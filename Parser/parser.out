Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> empty NEWLINE
Rule 5     statement -> declaration NEWLINE
Rule 6     statement -> assignment NEWLINE
Rule 7     statement -> convert NEWLINE
Rule 8     statement -> digitize NEWLINE
Rule 9     statement -> while NEWLINE
Rule 10    statement -> until NEWLINE
Rule 11    statement -> if NEWLINE
Rule 12    statement -> command NEWLINE
Rule 13    statement -> function NEWLINE
Rule 14    statement -> function_call NEWLINE
Rule 15    empty -> <empty>
Rule 16    declaration -> VARIANT variant
Rule 17    declaration -> VARIANT variant ASSIGNMENT initialization
Rule 18    variant -> NAME
Rule 19    variant -> NAME varsize
Rule 20    variant -> PARAM
Rule 21    variant -> PARAM varsize
Rule 22    varsize -> LSQBRACKET decimal_expression RSQBRACKET
Rule 23    varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET
Rule 24    varsize -> LSQBRACKET RSQBRACKET
Rule 25    initialization -> LBRACE init_lists RBRACE
Rule 26    init_lists -> init_lists init_list
Rule 27    init_lists -> init_list
Rule 28    init_list -> LBRACE inits RBRACE
Rule 29    init_list -> LBRACE RBRACE
Rule 30    inits -> inits init
Rule 31    inits -> init
Rule 32    init -> const_expressions COMMA const_expression SEMICOLON
Rule 33    init -> const_expression SEMICOLON
Rule 34    const_expressions -> const_expressions COMMA const_expression
Rule 35    const_expressions -> const_expression
Rule 36    const_expression -> const_math_expression
Rule 37    const_expression -> const
Rule 38    expression -> math_expression
Rule 39    expression -> const
Rule 40    expression -> variant
Rule 41    expression -> function_call
Rule 42    decimal_expression -> dec_math_expression
Rule 43    decimal_expression -> decimal_const
Rule 44    decimal_expression -> variant
Rule 45    decimal_expression -> function_call
Rule 46    bool_expression -> bool_math_expression
Rule 47    bool_expression -> bool_const
Rule 48    bool_expression -> variant
Rule 49    bool_expression -> function_call
Rule 50    string_expression -> string_math_expression
Rule 51    string_expression -> string_const
Rule 52    string_expression -> variant
Rule 53    string_expression -> function_call
Rule 54    math_expression -> expression PLUS expression
Rule 55    math_expression -> MINUS expression
Rule 56    const_math_expression -> const_expression PLUS const_expression
Rule 57    const_math_expression -> MINUS const_expression
Rule 58    dec_math_expression -> decimal_expression PLUS decimal_expression
Rule 59    dec_math_expression -> MINUS decimal_expression
Rule 60    bool_math_expression -> bool_expression PLUS bool_expression
Rule 61    bool_math_expression -> MINUS bool_expression
Rule 62    string_math_expression -> string_expression PLUS string_expression
Rule 63    string_math_expression -> MINUS string_expression
Rule 64    const -> bool_const
Rule 65    const -> decimal_const
Rule 66    const -> string_const
Rule 67    decimal_const -> DECIMAL
Rule 68    bool_const -> TRUE
Rule 69    bool_const -> FALSE
Rule 70    string_const -> LETTERS
Rule 71    assignment -> variant ASSIGNMENT expression
Rule 72    convert -> CONVERT type TO type variant
Rule 73    digitize -> DIGITIZE type variant
Rule 74    type -> BOOL
Rule 75    type -> DIGIT
Rule 76    type -> STRING
Rule 77    while -> WHILE bool_expression NEWLINE statements ENDW
Rule 78    until -> UNTIL bool_expression NEWLINE statements ENDU
Rule 79    if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
Rule 80    if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
Rule 81    if -> IFZERO decimal_expression NEWLINE statements ENDIF
Rule 82    if -> IFNZERO decimal_expression NEWLINE statements ENDIF
Rule 83    if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
Rule 84    if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
Rule 85    command -> COMMAND string_expression
Rule 86    func_body_statements -> func_body_statements func_body_statement
Rule 87    func_body_statements -> func_body_statement
Rule 88    func_body_statement -> empty NEWLINE
Rule 89    func_body_statement -> declaration NEWLINE
Rule 90    func_body_statement -> assignment NEWLINE
Rule 91    func_body_statement -> convert NEWLINE
Rule 92    func_body_statement -> digitize NEWLINE
Rule 93    func_body_statement -> while NEWLINE
Rule 94    func_body_statement -> until NEWLINE
Rule 95    func_body_statement -> if NEWLINE
Rule 96    func_body_statement -> command NEWLINE
Rule 97    func_body_statement -> function_call NEWLINE
Rule 98    func_body_statement -> return NEWLINE
Rule 99    function -> FUNC NAME NEWLINE func_body_statements ENDFUNC
Rule 100   function_call -> CALL NAME expression
Rule 101   function_call -> CALL NAME
Rule 102   return -> RETURN expression
Rule 103   declaration -> VARIANT error
Rule 104   declaration -> VARIANT variant ASSIGNMENT error
Rule 105   declaration -> declaration error
Rule 106   varsize -> LSQBRACKET error RSQBRACKET
Rule 107   varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET
Rule 108   varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET
Rule 109   varsize -> LSQBRACKET error COMMA error RSQBRACKET
Rule 110   varsize -> varsize error
Rule 111   assignment -> variant ASSIGNMENT error
Rule 112   assignment -> error ASSIGNMENT expression
Rule 113   convert -> CONVERT type TO type error
Rule 114   convert -> CONVERT type TO error
Rule 115   convert -> CONVERT type error
Rule 116   convert -> CONVERT error
Rule 117   convert -> convert error
Rule 118   digitize -> DIGITIZE error
Rule 119   digitize -> digitize error
Rule 120   command -> COMMAND error
Rule 121   command -> command error
Rule 122   while -> WHILE error NEWLINE statements ENDW
Rule 123   while -> WHILE bool_expression NEWLINE statements error
Rule 124   while -> WHILE bool_expression statements ENDW
Rule 125   while -> while error
Rule 126   until -> UNTIL error NEWLINE statements ENDU
Rule 127   until -> UNTIL bool_expression NEWLINE statements error
Rule 128   until -> UNTIL bool_expression statements ENDU
Rule 129   until -> until error
Rule 130   if -> IFLESS error NEWLINE statements ENDIF
Rule 131   if -> IFNLESS error NEWLINE statements ENDIF
Rule 132   if -> IFZERO error NEWLINE statements ENDIF
Rule 133   if -> IFNZERO error NEWLINE statements ENDIF
Rule 134   if -> IFHIGH error NEWLINE statements ENDIF
Rule 135   if -> IFNHIGH error NEWLINE statements ENDIF
Rule 136   if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
Rule 137   if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
Rule 138   if -> IFZERO decimal_expression NEWLINE statements error
Rule 139   if -> IFNZERO decimal_expression NEWLINE statements error
Rule 140   if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
Rule 141   if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
Rule 142   if -> IFLESS decimal_expression COMMA decimal_expression statements ENDIF
Rule 143   if -> IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
Rule 144   if -> IFZERO decimal_expression statements ENDIF
Rule 145   if -> IFNZERO decimal_expression statements ENDIF
Rule 146   if -> IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
Rule 147   if -> IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
Rule 148   if -> if error
Rule 149   function -> FUNC error NEWLINE func_body_statements ENDFUNC
Rule 150   function -> FUNC NAME NEWLINE func_body_statements error
Rule 151   function -> FUNC error NEWLINE func_body_statements error
Rule 152   function -> function error
Rule 153   return -> RETURN error
Rule 154   return -> return error

Terminals, with rules where they appear

ASSIGNMENT           : 17 71 104 111 112
BOOL                 : 74
CALL                 : 100 101
COMMA                : 23 32 34 79 80 83 84 107 108 109 136 137 140 141 142 143 146 147
COMMAND              : 85 120
CONVERT              : 72 113 114 115 116
DECIMAL              : 67
DIGIT                : 75
DIGITIZE             : 73 118
ENDFUNC              : 99 149
ENDIF                : 79 80 81 82 83 84 130 131 132 133 134 135 142 143 144 145 146 147
ENDU                 : 78 126 128
ENDW                 : 77 122 124
FALSE                : 69
FUNC                 : 99 149 150 151
IFHIGH               : 83 134 140 146
IFLESS               : 79 130 136 142
IFNHIGH              : 84 135 141 147
IFNLESS              : 80 131 137 143
IFNZERO              : 82 133 139 145
IFZERO               : 81 132 138 144
LBRACE               : 25 28 29
LETTERS              : 70
LSQBRACKET           : 22 23 24 106 107 108 109
MINUS                : 55 57 59 61 63
NAME                 : 18 19 99 100 101 150
NEWLINE              : 4 5 6 7 8 9 10 11 12 13 14 77 78 79 80 81 82 83 84 88 89 90 91 92 93 94 95 96 97 98 99 122 123 126 127 130 131 132 133 134 135 136 137 138 139 140 141 149 150 151
PARAM                : 20 21
PLUS                 : 54 56 58 60 62
RBRACE               : 25 28 29
RETURN               : 102 153
RSQBRACKET           : 22 23 24 106 107 108 109
SEMICOLON            : 32 33
STRING               : 76
TO                   : 72 113 114
TRUE                 : 68
UNTIL                : 78 126 127 128
VARIANT              : 16 17 103 104
WHILE                : 77 122 123 124
error                : 103 104 105 106 107 108 109 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 125 126 127 129 130 131 132 133 134 135 136 137 138 139 140 141 148 149 150 151 151 152 153 154

Nonterminals, with rules where they appear

assignment           : 6 90
bool_const           : 47 64
bool_expression      : 60 60 61 77 78 123 124 127 128
bool_math_expression : 46
command              : 12 96 121
const                : 37 39
const_expression     : 32 33 34 35 56 56 57
const_expressions    : 32 34
const_math_expression : 36
convert              : 7 91 117
dec_math_expression  : 42
decimal_const        : 43 65
decimal_expression   : 22 23 23 58 58 59 79 79 80 80 81 82 83 83 84 84 107 108 136 136 137 137 138 139 140 140 141 141 142 142 143 143 144 145 146 146 147 147
declaration          : 5 89 105
digitize             : 8 92 119
empty                : 4 88
expression           : 54 54 55 71 100 102 112
func_body_statement  : 86 87
func_body_statements : 86 99 149 150 151
function             : 13 152
function_call        : 14 41 45 49 53 97
if                   : 11 95 148
init                 : 30 31
init_list            : 26 27
init_lists           : 25 26
initialization       : 17
inits                : 28 30
math_expression      : 38
program              : 0
return               : 98 154
statement            : 2 3
statements           : 1 2 77 78 79 80 81 82 83 84 122 123 124 126 127 128 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147
string_const         : 51 66
string_expression    : 62 62 63 85
string_math_expression : 50
type                 : 72 72 73 113 113 114 115
until                : 10 94 129
variant              : 16 17 40 44 48 52 71 72 73 104 111
varsize              : 19 21 110
while                : 9 93 125

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    $end            reduce using rule 1 (program -> statements .)
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 3

    (3) statements -> statement .

    VARIANT         reduce using rule 3 (statements -> statement .)
    error           reduce using rule 3 (statements -> statement .)
    CONVERT         reduce using rule 3 (statements -> statement .)
    DIGITIZE        reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    UNTIL           reduce using rule 3 (statements -> statement .)
    IFLESS          reduce using rule 3 (statements -> statement .)
    IFNLESS         reduce using rule 3 (statements -> statement .)
    IFZERO          reduce using rule 3 (statements -> statement .)
    IFNZERO         reduce using rule 3 (statements -> statement .)
    IFHIGH          reduce using rule 3 (statements -> statement .)
    IFNHIGH         reduce using rule 3 (statements -> statement .)
    COMMAND         reduce using rule 3 (statements -> statement .)
    FUNC            reduce using rule 3 (statements -> statement .)
    CALL            reduce using rule 3 (statements -> statement .)
    NAME            reduce using rule 3 (statements -> statement .)
    PARAM           reduce using rule 3 (statements -> statement .)
    NEWLINE         reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    ENDW            reduce using rule 3 (statements -> statement .)
    ENDU            reduce using rule 3 (statements -> statement .)
    ENDIF           reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> empty . NEWLINE

    NEWLINE         shift and go to state 34


state 5

    (5) statement -> declaration . NEWLINE
    (105) declaration -> declaration . error

    NEWLINE         shift and go to state 35
    error           shift and go to state 36


state 6

    (6) statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 37


state 7

    (7) statement -> convert . NEWLINE
    (117) convert -> convert . error

    NEWLINE         shift and go to state 38
    error           shift and go to state 39


state 8

    (8) statement -> digitize . NEWLINE
    (119) digitize -> digitize . error

    NEWLINE         shift and go to state 40
    error           shift and go to state 41


state 9

    (9) statement -> while . NEWLINE
    (125) while -> while . error

    NEWLINE         shift and go to state 42
    error           shift and go to state 43


state 10

    (10) statement -> until . NEWLINE
    (129) until -> until . error

    NEWLINE         shift and go to state 44
    error           shift and go to state 45


state 11

    (11) statement -> if . NEWLINE
    (148) if -> if . error

    NEWLINE         shift and go to state 46
    error           shift and go to state 47


state 12

    (12) statement -> command . NEWLINE
    (121) command -> command . error

    NEWLINE         shift and go to state 48
    error           shift and go to state 49


state 13

    (13) statement -> function . NEWLINE
    (152) function -> function . error

    NEWLINE         shift and go to state 50
    error           shift and go to state 51


state 14

    (14) statement -> function_call . NEWLINE

    NEWLINE         shift and go to state 52


state 15

    (16) declaration -> VARIANT . variant
    (17) declaration -> VARIANT . variant ASSIGNMENT initialization
    (103) declaration -> VARIANT . error
    (104) declaration -> VARIANT . variant ASSIGNMENT error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    error           shift and go to state 54
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    variant                        shift and go to state 53

state 16

    (71) assignment -> variant . ASSIGNMENT expression
    (111) assignment -> variant . ASSIGNMENT error

    ASSIGNMENT      shift and go to state 55


state 17

    (112) assignment -> error . ASSIGNMENT expression

    ASSIGNMENT      shift and go to state 56


state 18

    (72) convert -> CONVERT . type TO type variant
    (113) convert -> CONVERT . type TO type error
    (114) convert -> CONVERT . type TO error
    (115) convert -> CONVERT . type error
    (116) convert -> CONVERT . error
    (74) type -> . BOOL
    (75) type -> . DIGIT
    (76) type -> . STRING

    error           shift and go to state 58
    BOOL            shift and go to state 59
    DIGIT           shift and go to state 60
    STRING          shift and go to state 61

    type                           shift and go to state 57

state 19

    (73) digitize -> DIGITIZE . type variant
    (118) digitize -> DIGITIZE . error
    (74) type -> . BOOL
    (75) type -> . DIGIT
    (76) type -> . STRING

    error           shift and go to state 63
    BOOL            shift and go to state 59
    DIGIT           shift and go to state 60
    STRING          shift and go to state 61

    type                           shift and go to state 62

state 20

    (77) while -> WHILE . bool_expression NEWLINE statements ENDW
    (122) while -> WHILE . error NEWLINE statements ENDW
    (123) while -> WHILE . bool_expression NEWLINE statements error
    (124) while -> WHILE . bool_expression statements ENDW
    (46) bool_expression -> . bool_math_expression
    (47) bool_expression -> . bool_const
    (48) bool_expression -> . variant
    (49) bool_expression -> . function_call
    (60) bool_math_expression -> . bool_expression PLUS bool_expression
    (61) bool_math_expression -> . MINUS bool_expression
    (68) bool_const -> . TRUE
    (69) bool_const -> . FALSE
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    error           shift and go to state 65
    MINUS           shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    bool_expression                shift and go to state 64
    bool_math_expression           shift and go to state 66
    bool_const                     shift and go to state 67
    variant                        shift and go to state 68
    function_call                  shift and go to state 69

state 21

    (78) until -> UNTIL . bool_expression NEWLINE statements ENDU
    (126) until -> UNTIL . error NEWLINE statements ENDU
    (127) until -> UNTIL . bool_expression NEWLINE statements error
    (128) until -> UNTIL . bool_expression statements ENDU
    (46) bool_expression -> . bool_math_expression
    (47) bool_expression -> . bool_const
    (48) bool_expression -> . variant
    (49) bool_expression -> . function_call
    (60) bool_math_expression -> . bool_expression PLUS bool_expression
    (61) bool_math_expression -> . MINUS bool_expression
    (68) bool_const -> . TRUE
    (69) bool_const -> . FALSE
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    error           shift and go to state 74
    MINUS           shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    bool_expression                shift and go to state 73
    bool_math_expression           shift and go to state 66
    bool_const                     shift and go to state 67
    variant                        shift and go to state 68
    function_call                  shift and go to state 69

state 22

    (79) if -> IFLESS . decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> IFLESS . error NEWLINE statements ENDIF
    (136) if -> IFLESS . decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> IFLESS . decimal_expression COMMA decimal_expression statements ENDIF
    (42) decimal_expression -> . dec_math_expression
    (43) decimal_expression -> . decimal_const
    (44) decimal_expression -> . variant
    (45) decimal_expression -> . function_call
    (58) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (59) dec_math_expression -> . MINUS decimal_expression
    (67) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    error           shift and go to state 76
    MINUS           shift and go to state 81
    DECIMAL         shift and go to state 82
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    decimal_expression             shift and go to state 75
    dec_math_expression            shift and go to state 77
    decimal_const                  shift and go to state 78
    variant                        shift and go to state 79
    function_call                  shift and go to state 80

state 23

    (80) if -> IFNLESS . decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (131) if -> IFNLESS . error NEWLINE statements ENDIF
    (137) if -> IFNLESS . decimal_expression COMMA decimal_expression NEWLINE statements error
    (143) if -> IFNLESS . decimal_expression COMMA decimal_expression statements ENDIF
    (42) decimal_expression -> . dec_math_expression
    (43) decimal_expression -> . decimal_const
    (44) decimal_expression -> . variant
    (45) decimal_expression -> . function_call
    (58) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (59) dec_math_expression -> . MINUS decimal_expression
    (67) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    error           shift and go to state 84
    MINUS           shift and go to state 81
    DECIMAL         shift and go to state 82
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    decimal_expression             shift and go to state 83
    dec_math_expression            shift and go to state 77
    decimal_const                  shift and go to state 78
    variant                        shift and go to state 79
    function_call                  shift and go to state 80

state 24

    (81) if -> IFZERO . decimal_expression NEWLINE statements ENDIF
    (132) if -> IFZERO . error NEWLINE statements ENDIF
    (138) if -> IFZERO . decimal_expression NEWLINE statements error
    (144) if -> IFZERO . decimal_expression statements ENDIF
    (42) decimal_expression -> . dec_math_expression
    (43) decimal_expression -> . decimal_const
    (44) decimal_expression -> . variant
    (45) decimal_expression -> . function_call
    (58) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (59) dec_math_expression -> . MINUS decimal_expression
    (67) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    error           shift and go to state 86
    MINUS           shift and go to state 81
    DECIMAL         shift and go to state 82
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    decimal_expression             shift and go to state 85
    dec_math_expression            shift and go to state 77
    decimal_const                  shift and go to state 78
    variant                        shift and go to state 79
    function_call                  shift and go to state 80

state 25

    (82) if -> IFNZERO . decimal_expression NEWLINE statements ENDIF
    (133) if -> IFNZERO . error NEWLINE statements ENDIF
    (139) if -> IFNZERO . decimal_expression NEWLINE statements error
    (145) if -> IFNZERO . decimal_expression statements ENDIF
    (42) decimal_expression -> . dec_math_expression
    (43) decimal_expression -> . decimal_const
    (44) decimal_expression -> . variant
    (45) decimal_expression -> . function_call
    (58) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (59) dec_math_expression -> . MINUS decimal_expression
    (67) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    error           shift and go to state 88
    MINUS           shift and go to state 81
    DECIMAL         shift and go to state 82
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    decimal_expression             shift and go to state 87
    dec_math_expression            shift and go to state 77
    decimal_const                  shift and go to state 78
    variant                        shift and go to state 79
    function_call                  shift and go to state 80

state 26

    (83) if -> IFHIGH . decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (134) if -> IFHIGH . error NEWLINE statements ENDIF
    (140) if -> IFHIGH . decimal_expression COMMA decimal_expression NEWLINE statements error
    (146) if -> IFHIGH . decimal_expression COMMA decimal_expression statements ENDIF
    (42) decimal_expression -> . dec_math_expression
    (43) decimal_expression -> . decimal_const
    (44) decimal_expression -> . variant
    (45) decimal_expression -> . function_call
    (58) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (59) dec_math_expression -> . MINUS decimal_expression
    (67) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    error           shift and go to state 90
    MINUS           shift and go to state 81
    DECIMAL         shift and go to state 82
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    decimal_expression             shift and go to state 89
    dec_math_expression            shift and go to state 77
    decimal_const                  shift and go to state 78
    variant                        shift and go to state 79
    function_call                  shift and go to state 80

state 27

    (84) if -> IFNHIGH . decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (135) if -> IFNHIGH . error NEWLINE statements ENDIF
    (141) if -> IFNHIGH . decimal_expression COMMA decimal_expression NEWLINE statements error
    (147) if -> IFNHIGH . decimal_expression COMMA decimal_expression statements ENDIF
    (42) decimal_expression -> . dec_math_expression
    (43) decimal_expression -> . decimal_const
    (44) decimal_expression -> . variant
    (45) decimal_expression -> . function_call
    (58) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (59) dec_math_expression -> . MINUS decimal_expression
    (67) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    error           shift and go to state 92
    MINUS           shift and go to state 81
    DECIMAL         shift and go to state 82
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    decimal_expression             shift and go to state 91
    dec_math_expression            shift and go to state 77
    decimal_const                  shift and go to state 78
    variant                        shift and go to state 79
    function_call                  shift and go to state 80

state 28

    (85) command -> COMMAND . string_expression
    (120) command -> COMMAND . error
    (50) string_expression -> . string_math_expression
    (51) string_expression -> . string_const
    (52) string_expression -> . variant
    (53) string_expression -> . function_call
    (62) string_math_expression -> . string_expression PLUS string_expression
    (63) string_math_expression -> . MINUS string_expression
    (70) string_const -> . LETTERS
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    error           shift and go to state 94
    MINUS           shift and go to state 99
    LETTERS         shift and go to state 100
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    string_expression              shift and go to state 93
    string_math_expression         shift and go to state 95
    string_const                   shift and go to state 96
    variant                        shift and go to state 97
    function_call                  shift and go to state 98

state 29

    (99) function -> FUNC . NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> FUNC . error NEWLINE func_body_statements ENDFUNC
    (150) function -> FUNC . NAME NEWLINE func_body_statements error
    (151) function -> FUNC . error NEWLINE func_body_statements error

    NAME            shift and go to state 101
    error           shift and go to state 102


state 30

    (18) variant -> NAME .
    (19) variant -> NAME . varsize
    (22) varsize -> . LSQBRACKET decimal_expression RSQBRACKET
    (23) varsize -> . LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET
    (24) varsize -> . LSQBRACKET RSQBRACKET
    (106) varsize -> . LSQBRACKET error RSQBRACKET
    (107) varsize -> . LSQBRACKET error COMMA decimal_expression RSQBRACKET
    (108) varsize -> . LSQBRACKET decimal_expression COMMA error RSQBRACKET
    (109) varsize -> . LSQBRACKET error COMMA error RSQBRACKET
    (110) varsize -> . varsize error

    ASSIGNMENT      reduce using rule 18 (variant -> NAME .)
    NEWLINE         reduce using rule 18 (variant -> NAME .)
    error           reduce using rule 18 (variant -> NAME .)
    PLUS            reduce using rule 18 (variant -> NAME .)
    VARIANT         reduce using rule 18 (variant -> NAME .)
    CONVERT         reduce using rule 18 (variant -> NAME .)
    DIGITIZE        reduce using rule 18 (variant -> NAME .)
    WHILE           reduce using rule 18 (variant -> NAME .)
    UNTIL           reduce using rule 18 (variant -> NAME .)
    IFLESS          reduce using rule 18 (variant -> NAME .)
    IFNLESS         reduce using rule 18 (variant -> NAME .)
    IFZERO          reduce using rule 18 (variant -> NAME .)
    IFNZERO         reduce using rule 18 (variant -> NAME .)
    IFHIGH          reduce using rule 18 (variant -> NAME .)
    IFNHIGH         reduce using rule 18 (variant -> NAME .)
    COMMAND         reduce using rule 18 (variant -> NAME .)
    FUNC            reduce using rule 18 (variant -> NAME .)
    CALL            reduce using rule 18 (variant -> NAME .)
    NAME            reduce using rule 18 (variant -> NAME .)
    PARAM           reduce using rule 18 (variant -> NAME .)
    COMMA           reduce using rule 18 (variant -> NAME .)
    RSQBRACKET      reduce using rule 18 (variant -> NAME .)
    LSQBRACKET      shift and go to state 104

    varsize                        shift and go to state 103

state 31

    (100) function_call -> CALL . NAME expression
    (101) function_call -> CALL . NAME

    NAME            shift and go to state 105


state 32

    (20) variant -> PARAM .
    (21) variant -> PARAM . varsize
    (22) varsize -> . LSQBRACKET decimal_expression RSQBRACKET
    (23) varsize -> . LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET
    (24) varsize -> . LSQBRACKET RSQBRACKET
    (106) varsize -> . LSQBRACKET error RSQBRACKET
    (107) varsize -> . LSQBRACKET error COMMA decimal_expression RSQBRACKET
    (108) varsize -> . LSQBRACKET decimal_expression COMMA error RSQBRACKET
    (109) varsize -> . LSQBRACKET error COMMA error RSQBRACKET
    (110) varsize -> . varsize error

    ASSIGNMENT      reduce using rule 20 (variant -> PARAM .)
    NEWLINE         reduce using rule 20 (variant -> PARAM .)
    error           reduce using rule 20 (variant -> PARAM .)
    PLUS            reduce using rule 20 (variant -> PARAM .)
    VARIANT         reduce using rule 20 (variant -> PARAM .)
    CONVERT         reduce using rule 20 (variant -> PARAM .)
    DIGITIZE        reduce using rule 20 (variant -> PARAM .)
    WHILE           reduce using rule 20 (variant -> PARAM .)
    UNTIL           reduce using rule 20 (variant -> PARAM .)
    IFLESS          reduce using rule 20 (variant -> PARAM .)
    IFNLESS         reduce using rule 20 (variant -> PARAM .)
    IFZERO          reduce using rule 20 (variant -> PARAM .)
    IFNZERO         reduce using rule 20 (variant -> PARAM .)
    IFHIGH          reduce using rule 20 (variant -> PARAM .)
    IFNHIGH         reduce using rule 20 (variant -> PARAM .)
    COMMAND         reduce using rule 20 (variant -> PARAM .)
    FUNC            reduce using rule 20 (variant -> PARAM .)
    CALL            reduce using rule 20 (variant -> PARAM .)
    NAME            reduce using rule 20 (variant -> PARAM .)
    PARAM           reduce using rule 20 (variant -> PARAM .)
    COMMA           reduce using rule 20 (variant -> PARAM .)
    RSQBRACKET      reduce using rule 20 (variant -> PARAM .)
    LSQBRACKET      shift and go to state 104

    varsize                        shift and go to state 106

state 33

    (2) statements -> statements statement .

    VARIANT         reduce using rule 2 (statements -> statements statement .)
    error           reduce using rule 2 (statements -> statements statement .)
    CONVERT         reduce using rule 2 (statements -> statements statement .)
    DIGITIZE        reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    UNTIL           reduce using rule 2 (statements -> statements statement .)
    IFLESS          reduce using rule 2 (statements -> statements statement .)
    IFNLESS         reduce using rule 2 (statements -> statements statement .)
    IFZERO          reduce using rule 2 (statements -> statements statement .)
    IFNZERO         reduce using rule 2 (statements -> statements statement .)
    IFHIGH          reduce using rule 2 (statements -> statements statement .)
    IFNHIGH         reduce using rule 2 (statements -> statements statement .)
    COMMAND         reduce using rule 2 (statements -> statements statement .)
    FUNC            reduce using rule 2 (statements -> statements statement .)
    CALL            reduce using rule 2 (statements -> statements statement .)
    NAME            reduce using rule 2 (statements -> statements statement .)
    PARAM           reduce using rule 2 (statements -> statements statement .)
    NEWLINE         reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    ENDW            reduce using rule 2 (statements -> statements statement .)
    ENDU            reduce using rule 2 (statements -> statements statement .)
    ENDIF           reduce using rule 2 (statements -> statements statement .)


state 34

    (4) statement -> empty NEWLINE .

    VARIANT         reduce using rule 4 (statement -> empty NEWLINE .)
    error           reduce using rule 4 (statement -> empty NEWLINE .)
    CONVERT         reduce using rule 4 (statement -> empty NEWLINE .)
    DIGITIZE        reduce using rule 4 (statement -> empty NEWLINE .)
    WHILE           reduce using rule 4 (statement -> empty NEWLINE .)
    UNTIL           reduce using rule 4 (statement -> empty NEWLINE .)
    IFLESS          reduce using rule 4 (statement -> empty NEWLINE .)
    IFNLESS         reduce using rule 4 (statement -> empty NEWLINE .)
    IFZERO          reduce using rule 4 (statement -> empty NEWLINE .)
    IFNZERO         reduce using rule 4 (statement -> empty NEWLINE .)
    IFHIGH          reduce using rule 4 (statement -> empty NEWLINE .)
    IFNHIGH         reduce using rule 4 (statement -> empty NEWLINE .)
    COMMAND         reduce using rule 4 (statement -> empty NEWLINE .)
    FUNC            reduce using rule 4 (statement -> empty NEWLINE .)
    CALL            reduce using rule 4 (statement -> empty NEWLINE .)
    NAME            reduce using rule 4 (statement -> empty NEWLINE .)
    PARAM           reduce using rule 4 (statement -> empty NEWLINE .)
    NEWLINE         reduce using rule 4 (statement -> empty NEWLINE .)
    $end            reduce using rule 4 (statement -> empty NEWLINE .)
    ENDW            reduce using rule 4 (statement -> empty NEWLINE .)
    ENDU            reduce using rule 4 (statement -> empty NEWLINE .)
    ENDIF           reduce using rule 4 (statement -> empty NEWLINE .)


state 35

    (5) statement -> declaration NEWLINE .

    VARIANT         reduce using rule 5 (statement -> declaration NEWLINE .)
    error           reduce using rule 5 (statement -> declaration NEWLINE .)
    CONVERT         reduce using rule 5 (statement -> declaration NEWLINE .)
    DIGITIZE        reduce using rule 5 (statement -> declaration NEWLINE .)
    WHILE           reduce using rule 5 (statement -> declaration NEWLINE .)
    UNTIL           reduce using rule 5 (statement -> declaration NEWLINE .)
    IFLESS          reduce using rule 5 (statement -> declaration NEWLINE .)
    IFNLESS         reduce using rule 5 (statement -> declaration NEWLINE .)
    IFZERO          reduce using rule 5 (statement -> declaration NEWLINE .)
    IFNZERO         reduce using rule 5 (statement -> declaration NEWLINE .)
    IFHIGH          reduce using rule 5 (statement -> declaration NEWLINE .)
    IFNHIGH         reduce using rule 5 (statement -> declaration NEWLINE .)
    COMMAND         reduce using rule 5 (statement -> declaration NEWLINE .)
    FUNC            reduce using rule 5 (statement -> declaration NEWLINE .)
    CALL            reduce using rule 5 (statement -> declaration NEWLINE .)
    NAME            reduce using rule 5 (statement -> declaration NEWLINE .)
    PARAM           reduce using rule 5 (statement -> declaration NEWLINE .)
    NEWLINE         reduce using rule 5 (statement -> declaration NEWLINE .)
    $end            reduce using rule 5 (statement -> declaration NEWLINE .)
    ENDW            reduce using rule 5 (statement -> declaration NEWLINE .)
    ENDU            reduce using rule 5 (statement -> declaration NEWLINE .)
    ENDIF           reduce using rule 5 (statement -> declaration NEWLINE .)


state 36

    (105) declaration -> declaration error .

    NEWLINE         reduce using rule 105 (declaration -> declaration error .)
    error           reduce using rule 105 (declaration -> declaration error .)


state 37

    (6) statement -> assignment NEWLINE .

    VARIANT         reduce using rule 6 (statement -> assignment NEWLINE .)
    error           reduce using rule 6 (statement -> assignment NEWLINE .)
    CONVERT         reduce using rule 6 (statement -> assignment NEWLINE .)
    DIGITIZE        reduce using rule 6 (statement -> assignment NEWLINE .)
    WHILE           reduce using rule 6 (statement -> assignment NEWLINE .)
    UNTIL           reduce using rule 6 (statement -> assignment NEWLINE .)
    IFLESS          reduce using rule 6 (statement -> assignment NEWLINE .)
    IFNLESS         reduce using rule 6 (statement -> assignment NEWLINE .)
    IFZERO          reduce using rule 6 (statement -> assignment NEWLINE .)
    IFNZERO         reduce using rule 6 (statement -> assignment NEWLINE .)
    IFHIGH          reduce using rule 6 (statement -> assignment NEWLINE .)
    IFNHIGH         reduce using rule 6 (statement -> assignment NEWLINE .)
    COMMAND         reduce using rule 6 (statement -> assignment NEWLINE .)
    FUNC            reduce using rule 6 (statement -> assignment NEWLINE .)
    CALL            reduce using rule 6 (statement -> assignment NEWLINE .)
    NAME            reduce using rule 6 (statement -> assignment NEWLINE .)
    PARAM           reduce using rule 6 (statement -> assignment NEWLINE .)
    NEWLINE         reduce using rule 6 (statement -> assignment NEWLINE .)
    $end            reduce using rule 6 (statement -> assignment NEWLINE .)
    ENDW            reduce using rule 6 (statement -> assignment NEWLINE .)
    ENDU            reduce using rule 6 (statement -> assignment NEWLINE .)
    ENDIF           reduce using rule 6 (statement -> assignment NEWLINE .)


state 38

    (7) statement -> convert NEWLINE .

    VARIANT         reduce using rule 7 (statement -> convert NEWLINE .)
    error           reduce using rule 7 (statement -> convert NEWLINE .)
    CONVERT         reduce using rule 7 (statement -> convert NEWLINE .)
    DIGITIZE        reduce using rule 7 (statement -> convert NEWLINE .)
    WHILE           reduce using rule 7 (statement -> convert NEWLINE .)
    UNTIL           reduce using rule 7 (statement -> convert NEWLINE .)
    IFLESS          reduce using rule 7 (statement -> convert NEWLINE .)
    IFNLESS         reduce using rule 7 (statement -> convert NEWLINE .)
    IFZERO          reduce using rule 7 (statement -> convert NEWLINE .)
    IFNZERO         reduce using rule 7 (statement -> convert NEWLINE .)
    IFHIGH          reduce using rule 7 (statement -> convert NEWLINE .)
    IFNHIGH         reduce using rule 7 (statement -> convert NEWLINE .)
    COMMAND         reduce using rule 7 (statement -> convert NEWLINE .)
    FUNC            reduce using rule 7 (statement -> convert NEWLINE .)
    CALL            reduce using rule 7 (statement -> convert NEWLINE .)
    NAME            reduce using rule 7 (statement -> convert NEWLINE .)
    PARAM           reduce using rule 7 (statement -> convert NEWLINE .)
    NEWLINE         reduce using rule 7 (statement -> convert NEWLINE .)
    $end            reduce using rule 7 (statement -> convert NEWLINE .)
    ENDW            reduce using rule 7 (statement -> convert NEWLINE .)
    ENDU            reduce using rule 7 (statement -> convert NEWLINE .)
    ENDIF           reduce using rule 7 (statement -> convert NEWLINE .)


state 39

    (117) convert -> convert error .

    NEWLINE         reduce using rule 117 (convert -> convert error .)
    error           reduce using rule 117 (convert -> convert error .)


state 40

    (8) statement -> digitize NEWLINE .

    VARIANT         reduce using rule 8 (statement -> digitize NEWLINE .)
    error           reduce using rule 8 (statement -> digitize NEWLINE .)
    CONVERT         reduce using rule 8 (statement -> digitize NEWLINE .)
    DIGITIZE        reduce using rule 8 (statement -> digitize NEWLINE .)
    WHILE           reduce using rule 8 (statement -> digitize NEWLINE .)
    UNTIL           reduce using rule 8 (statement -> digitize NEWLINE .)
    IFLESS          reduce using rule 8 (statement -> digitize NEWLINE .)
    IFNLESS         reduce using rule 8 (statement -> digitize NEWLINE .)
    IFZERO          reduce using rule 8 (statement -> digitize NEWLINE .)
    IFNZERO         reduce using rule 8 (statement -> digitize NEWLINE .)
    IFHIGH          reduce using rule 8 (statement -> digitize NEWLINE .)
    IFNHIGH         reduce using rule 8 (statement -> digitize NEWLINE .)
    COMMAND         reduce using rule 8 (statement -> digitize NEWLINE .)
    FUNC            reduce using rule 8 (statement -> digitize NEWLINE .)
    CALL            reduce using rule 8 (statement -> digitize NEWLINE .)
    NAME            reduce using rule 8 (statement -> digitize NEWLINE .)
    PARAM           reduce using rule 8 (statement -> digitize NEWLINE .)
    NEWLINE         reduce using rule 8 (statement -> digitize NEWLINE .)
    $end            reduce using rule 8 (statement -> digitize NEWLINE .)
    ENDW            reduce using rule 8 (statement -> digitize NEWLINE .)
    ENDU            reduce using rule 8 (statement -> digitize NEWLINE .)
    ENDIF           reduce using rule 8 (statement -> digitize NEWLINE .)


state 41

    (119) digitize -> digitize error .

    NEWLINE         reduce using rule 119 (digitize -> digitize error .)
    error           reduce using rule 119 (digitize -> digitize error .)


state 42

    (9) statement -> while NEWLINE .

    VARIANT         reduce using rule 9 (statement -> while NEWLINE .)
    error           reduce using rule 9 (statement -> while NEWLINE .)
    CONVERT         reduce using rule 9 (statement -> while NEWLINE .)
    DIGITIZE        reduce using rule 9 (statement -> while NEWLINE .)
    WHILE           reduce using rule 9 (statement -> while NEWLINE .)
    UNTIL           reduce using rule 9 (statement -> while NEWLINE .)
    IFLESS          reduce using rule 9 (statement -> while NEWLINE .)
    IFNLESS         reduce using rule 9 (statement -> while NEWLINE .)
    IFZERO          reduce using rule 9 (statement -> while NEWLINE .)
    IFNZERO         reduce using rule 9 (statement -> while NEWLINE .)
    IFHIGH          reduce using rule 9 (statement -> while NEWLINE .)
    IFNHIGH         reduce using rule 9 (statement -> while NEWLINE .)
    COMMAND         reduce using rule 9 (statement -> while NEWLINE .)
    FUNC            reduce using rule 9 (statement -> while NEWLINE .)
    CALL            reduce using rule 9 (statement -> while NEWLINE .)
    NAME            reduce using rule 9 (statement -> while NEWLINE .)
    PARAM           reduce using rule 9 (statement -> while NEWLINE .)
    NEWLINE         reduce using rule 9 (statement -> while NEWLINE .)
    $end            reduce using rule 9 (statement -> while NEWLINE .)
    ENDW            reduce using rule 9 (statement -> while NEWLINE .)
    ENDU            reduce using rule 9 (statement -> while NEWLINE .)
    ENDIF           reduce using rule 9 (statement -> while NEWLINE .)


state 43

    (125) while -> while error .

    NEWLINE         reduce using rule 125 (while -> while error .)
    error           reduce using rule 125 (while -> while error .)


state 44

    (10) statement -> until NEWLINE .

    VARIANT         reduce using rule 10 (statement -> until NEWLINE .)
    error           reduce using rule 10 (statement -> until NEWLINE .)
    CONVERT         reduce using rule 10 (statement -> until NEWLINE .)
    DIGITIZE        reduce using rule 10 (statement -> until NEWLINE .)
    WHILE           reduce using rule 10 (statement -> until NEWLINE .)
    UNTIL           reduce using rule 10 (statement -> until NEWLINE .)
    IFLESS          reduce using rule 10 (statement -> until NEWLINE .)
    IFNLESS         reduce using rule 10 (statement -> until NEWLINE .)
    IFZERO          reduce using rule 10 (statement -> until NEWLINE .)
    IFNZERO         reduce using rule 10 (statement -> until NEWLINE .)
    IFHIGH          reduce using rule 10 (statement -> until NEWLINE .)
    IFNHIGH         reduce using rule 10 (statement -> until NEWLINE .)
    COMMAND         reduce using rule 10 (statement -> until NEWLINE .)
    FUNC            reduce using rule 10 (statement -> until NEWLINE .)
    CALL            reduce using rule 10 (statement -> until NEWLINE .)
    NAME            reduce using rule 10 (statement -> until NEWLINE .)
    PARAM           reduce using rule 10 (statement -> until NEWLINE .)
    NEWLINE         reduce using rule 10 (statement -> until NEWLINE .)
    $end            reduce using rule 10 (statement -> until NEWLINE .)
    ENDW            reduce using rule 10 (statement -> until NEWLINE .)
    ENDU            reduce using rule 10 (statement -> until NEWLINE .)
    ENDIF           reduce using rule 10 (statement -> until NEWLINE .)


state 45

    (129) until -> until error .

    NEWLINE         reduce using rule 129 (until -> until error .)
    error           reduce using rule 129 (until -> until error .)


state 46

    (11) statement -> if NEWLINE .

    VARIANT         reduce using rule 11 (statement -> if NEWLINE .)
    error           reduce using rule 11 (statement -> if NEWLINE .)
    CONVERT         reduce using rule 11 (statement -> if NEWLINE .)
    DIGITIZE        reduce using rule 11 (statement -> if NEWLINE .)
    WHILE           reduce using rule 11 (statement -> if NEWLINE .)
    UNTIL           reduce using rule 11 (statement -> if NEWLINE .)
    IFLESS          reduce using rule 11 (statement -> if NEWLINE .)
    IFNLESS         reduce using rule 11 (statement -> if NEWLINE .)
    IFZERO          reduce using rule 11 (statement -> if NEWLINE .)
    IFNZERO         reduce using rule 11 (statement -> if NEWLINE .)
    IFHIGH          reduce using rule 11 (statement -> if NEWLINE .)
    IFNHIGH         reduce using rule 11 (statement -> if NEWLINE .)
    COMMAND         reduce using rule 11 (statement -> if NEWLINE .)
    FUNC            reduce using rule 11 (statement -> if NEWLINE .)
    CALL            reduce using rule 11 (statement -> if NEWLINE .)
    NAME            reduce using rule 11 (statement -> if NEWLINE .)
    PARAM           reduce using rule 11 (statement -> if NEWLINE .)
    NEWLINE         reduce using rule 11 (statement -> if NEWLINE .)
    $end            reduce using rule 11 (statement -> if NEWLINE .)
    ENDW            reduce using rule 11 (statement -> if NEWLINE .)
    ENDU            reduce using rule 11 (statement -> if NEWLINE .)
    ENDIF           reduce using rule 11 (statement -> if NEWLINE .)


state 47

    (148) if -> if error .

    NEWLINE         reduce using rule 148 (if -> if error .)
    error           reduce using rule 148 (if -> if error .)


state 48

    (12) statement -> command NEWLINE .

    VARIANT         reduce using rule 12 (statement -> command NEWLINE .)
    error           reduce using rule 12 (statement -> command NEWLINE .)
    CONVERT         reduce using rule 12 (statement -> command NEWLINE .)
    DIGITIZE        reduce using rule 12 (statement -> command NEWLINE .)
    WHILE           reduce using rule 12 (statement -> command NEWLINE .)
    UNTIL           reduce using rule 12 (statement -> command NEWLINE .)
    IFLESS          reduce using rule 12 (statement -> command NEWLINE .)
    IFNLESS         reduce using rule 12 (statement -> command NEWLINE .)
    IFZERO          reduce using rule 12 (statement -> command NEWLINE .)
    IFNZERO         reduce using rule 12 (statement -> command NEWLINE .)
    IFHIGH          reduce using rule 12 (statement -> command NEWLINE .)
    IFNHIGH         reduce using rule 12 (statement -> command NEWLINE .)
    COMMAND         reduce using rule 12 (statement -> command NEWLINE .)
    FUNC            reduce using rule 12 (statement -> command NEWLINE .)
    CALL            reduce using rule 12 (statement -> command NEWLINE .)
    NAME            reduce using rule 12 (statement -> command NEWLINE .)
    PARAM           reduce using rule 12 (statement -> command NEWLINE .)
    NEWLINE         reduce using rule 12 (statement -> command NEWLINE .)
    $end            reduce using rule 12 (statement -> command NEWLINE .)
    ENDW            reduce using rule 12 (statement -> command NEWLINE .)
    ENDU            reduce using rule 12 (statement -> command NEWLINE .)
    ENDIF           reduce using rule 12 (statement -> command NEWLINE .)


state 49

    (121) command -> command error .

    NEWLINE         reduce using rule 121 (command -> command error .)
    error           reduce using rule 121 (command -> command error .)


state 50

    (13) statement -> function NEWLINE .

    VARIANT         reduce using rule 13 (statement -> function NEWLINE .)
    error           reduce using rule 13 (statement -> function NEWLINE .)
    CONVERT         reduce using rule 13 (statement -> function NEWLINE .)
    DIGITIZE        reduce using rule 13 (statement -> function NEWLINE .)
    WHILE           reduce using rule 13 (statement -> function NEWLINE .)
    UNTIL           reduce using rule 13 (statement -> function NEWLINE .)
    IFLESS          reduce using rule 13 (statement -> function NEWLINE .)
    IFNLESS         reduce using rule 13 (statement -> function NEWLINE .)
    IFZERO          reduce using rule 13 (statement -> function NEWLINE .)
    IFNZERO         reduce using rule 13 (statement -> function NEWLINE .)
    IFHIGH          reduce using rule 13 (statement -> function NEWLINE .)
    IFNHIGH         reduce using rule 13 (statement -> function NEWLINE .)
    COMMAND         reduce using rule 13 (statement -> function NEWLINE .)
    FUNC            reduce using rule 13 (statement -> function NEWLINE .)
    CALL            reduce using rule 13 (statement -> function NEWLINE .)
    NAME            reduce using rule 13 (statement -> function NEWLINE .)
    PARAM           reduce using rule 13 (statement -> function NEWLINE .)
    NEWLINE         reduce using rule 13 (statement -> function NEWLINE .)
    $end            reduce using rule 13 (statement -> function NEWLINE .)
    ENDW            reduce using rule 13 (statement -> function NEWLINE .)
    ENDU            reduce using rule 13 (statement -> function NEWLINE .)
    ENDIF           reduce using rule 13 (statement -> function NEWLINE .)


state 51

    (152) function -> function error .

    NEWLINE         reduce using rule 152 (function -> function error .)
    error           reduce using rule 152 (function -> function error .)


state 52

    (14) statement -> function_call NEWLINE .

    VARIANT         reduce using rule 14 (statement -> function_call NEWLINE .)
    error           reduce using rule 14 (statement -> function_call NEWLINE .)
    CONVERT         reduce using rule 14 (statement -> function_call NEWLINE .)
    DIGITIZE        reduce using rule 14 (statement -> function_call NEWLINE .)
    WHILE           reduce using rule 14 (statement -> function_call NEWLINE .)
    UNTIL           reduce using rule 14 (statement -> function_call NEWLINE .)
    IFLESS          reduce using rule 14 (statement -> function_call NEWLINE .)
    IFNLESS         reduce using rule 14 (statement -> function_call NEWLINE .)
    IFZERO          reduce using rule 14 (statement -> function_call NEWLINE .)
    IFNZERO         reduce using rule 14 (statement -> function_call NEWLINE .)
    IFHIGH          reduce using rule 14 (statement -> function_call NEWLINE .)
    IFNHIGH         reduce using rule 14 (statement -> function_call NEWLINE .)
    COMMAND         reduce using rule 14 (statement -> function_call NEWLINE .)
    FUNC            reduce using rule 14 (statement -> function_call NEWLINE .)
    CALL            reduce using rule 14 (statement -> function_call NEWLINE .)
    NAME            reduce using rule 14 (statement -> function_call NEWLINE .)
    PARAM           reduce using rule 14 (statement -> function_call NEWLINE .)
    NEWLINE         reduce using rule 14 (statement -> function_call NEWLINE .)
    $end            reduce using rule 14 (statement -> function_call NEWLINE .)
    ENDW            reduce using rule 14 (statement -> function_call NEWLINE .)
    ENDU            reduce using rule 14 (statement -> function_call NEWLINE .)
    ENDIF           reduce using rule 14 (statement -> function_call NEWLINE .)


state 53

    (16) declaration -> VARIANT variant .
    (17) declaration -> VARIANT variant . ASSIGNMENT initialization
    (104) declaration -> VARIANT variant . ASSIGNMENT error

    NEWLINE         reduce using rule 16 (declaration -> VARIANT variant .)
    error           reduce using rule 16 (declaration -> VARIANT variant .)
    ASSIGNMENT      shift and go to state 107


state 54

    (103) declaration -> VARIANT error .

    NEWLINE         reduce using rule 103 (declaration -> VARIANT error .)
    error           reduce using rule 103 (declaration -> VARIANT error .)


state 55

    (71) assignment -> variant ASSIGNMENT . expression
    (111) assignment -> variant ASSIGNMENT . error
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variant
    (41) expression -> . function_call
    (54) math_expression -> . expression PLUS expression
    (55) math_expression -> . MINUS expression
    (64) const -> . bool_const
    (65) const -> . decimal_const
    (66) const -> . string_const
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (68) bool_const -> . TRUE
    (69) bool_const -> . FALSE
    (67) decimal_const -> . DECIMAL
    (70) string_const -> . LETTERS

    error           shift and go to state 110
    MINUS           shift and go to state 114
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    DECIMAL         shift and go to state 82
    LETTERS         shift and go to state 100

    variant                        shift and go to state 108
    expression                     shift and go to state 109
    math_expression                shift and go to state 111
    const                          shift and go to state 112
    function_call                  shift and go to state 113
    bool_const                     shift and go to state 115
    decimal_const                  shift and go to state 116
    string_const                   shift and go to state 117

state 56

    (112) assignment -> error ASSIGNMENT . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variant
    (41) expression -> . function_call
    (54) math_expression -> . expression PLUS expression
    (55) math_expression -> . MINUS expression
    (64) const -> . bool_const
    (65) const -> . decimal_const
    (66) const -> . string_const
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (68) bool_const -> . TRUE
    (69) bool_const -> . FALSE
    (67) decimal_const -> . DECIMAL
    (70) string_const -> . LETTERS

    MINUS           shift and go to state 114
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    DECIMAL         shift and go to state 82
    LETTERS         shift and go to state 100

    expression                     shift and go to state 118
    math_expression                shift and go to state 111
    const                          shift and go to state 112
    variant                        shift and go to state 108
    function_call                  shift and go to state 113
    bool_const                     shift and go to state 115
    decimal_const                  shift and go to state 116
    string_const                   shift and go to state 117

state 57

    (72) convert -> CONVERT type . TO type variant
    (113) convert -> CONVERT type . TO type error
    (114) convert -> CONVERT type . TO error
    (115) convert -> CONVERT type . error

    TO              shift and go to state 119
    error           shift and go to state 120


state 58

    (116) convert -> CONVERT error .

    NEWLINE         reduce using rule 116 (convert -> CONVERT error .)
    error           reduce using rule 116 (convert -> CONVERT error .)


state 59

    (74) type -> BOOL .

    TO              reduce using rule 74 (type -> BOOL .)
    error           reduce using rule 74 (type -> BOOL .)
    NAME            reduce using rule 74 (type -> BOOL .)
    PARAM           reduce using rule 74 (type -> BOOL .)


state 60

    (75) type -> DIGIT .

    TO              reduce using rule 75 (type -> DIGIT .)
    error           reduce using rule 75 (type -> DIGIT .)
    NAME            reduce using rule 75 (type -> DIGIT .)
    PARAM           reduce using rule 75 (type -> DIGIT .)


state 61

    (76) type -> STRING .

    TO              reduce using rule 76 (type -> STRING .)
    error           reduce using rule 76 (type -> STRING .)
    NAME            reduce using rule 76 (type -> STRING .)
    PARAM           reduce using rule 76 (type -> STRING .)


state 62

    (73) digitize -> DIGITIZE type . variant
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    variant                        shift and go to state 121

state 63

    (118) digitize -> DIGITIZE error .

    NEWLINE         reduce using rule 118 (digitize -> DIGITIZE error .)
    error           reduce using rule 118 (digitize -> DIGITIZE error .)


state 64

    (77) while -> WHILE bool_expression . NEWLINE statements ENDW
    (123) while -> WHILE bool_expression . NEWLINE statements error
    (124) while -> WHILE bool_expression . statements ENDW
    (60) bool_math_expression -> bool_expression . PLUS bool_expression
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 122
    PLUS            shift and go to state 124
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

  ! NEWLINE         [ reduce using rule 15 (empty -> .) ]

    statements                     shift and go to state 123
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 65

    (122) while -> WHILE error . NEWLINE statements ENDW

    NEWLINE         shift and go to state 125


state 66

    (46) bool_expression -> bool_math_expression .

    NEWLINE         reduce using rule 46 (bool_expression -> bool_math_expression .)
    PLUS            reduce using rule 46 (bool_expression -> bool_math_expression .)
    VARIANT         reduce using rule 46 (bool_expression -> bool_math_expression .)
    error           reduce using rule 46 (bool_expression -> bool_math_expression .)
    CONVERT         reduce using rule 46 (bool_expression -> bool_math_expression .)
    DIGITIZE        reduce using rule 46 (bool_expression -> bool_math_expression .)
    WHILE           reduce using rule 46 (bool_expression -> bool_math_expression .)
    UNTIL           reduce using rule 46 (bool_expression -> bool_math_expression .)
    IFLESS          reduce using rule 46 (bool_expression -> bool_math_expression .)
    IFNLESS         reduce using rule 46 (bool_expression -> bool_math_expression .)
    IFZERO          reduce using rule 46 (bool_expression -> bool_math_expression .)
    IFNZERO         reduce using rule 46 (bool_expression -> bool_math_expression .)
    IFHIGH          reduce using rule 46 (bool_expression -> bool_math_expression .)
    IFNHIGH         reduce using rule 46 (bool_expression -> bool_math_expression .)
    COMMAND         reduce using rule 46 (bool_expression -> bool_math_expression .)
    FUNC            reduce using rule 46 (bool_expression -> bool_math_expression .)
    CALL            reduce using rule 46 (bool_expression -> bool_math_expression .)
    NAME            reduce using rule 46 (bool_expression -> bool_math_expression .)
    PARAM           reduce using rule 46 (bool_expression -> bool_math_expression .)


state 67

    (47) bool_expression -> bool_const .

    NEWLINE         reduce using rule 47 (bool_expression -> bool_const .)
    PLUS            reduce using rule 47 (bool_expression -> bool_const .)
    VARIANT         reduce using rule 47 (bool_expression -> bool_const .)
    error           reduce using rule 47 (bool_expression -> bool_const .)
    CONVERT         reduce using rule 47 (bool_expression -> bool_const .)
    DIGITIZE        reduce using rule 47 (bool_expression -> bool_const .)
    WHILE           reduce using rule 47 (bool_expression -> bool_const .)
    UNTIL           reduce using rule 47 (bool_expression -> bool_const .)
    IFLESS          reduce using rule 47 (bool_expression -> bool_const .)
    IFNLESS         reduce using rule 47 (bool_expression -> bool_const .)
    IFZERO          reduce using rule 47 (bool_expression -> bool_const .)
    IFNZERO         reduce using rule 47 (bool_expression -> bool_const .)
    IFHIGH          reduce using rule 47 (bool_expression -> bool_const .)
    IFNHIGH         reduce using rule 47 (bool_expression -> bool_const .)
    COMMAND         reduce using rule 47 (bool_expression -> bool_const .)
    FUNC            reduce using rule 47 (bool_expression -> bool_const .)
    CALL            reduce using rule 47 (bool_expression -> bool_const .)
    NAME            reduce using rule 47 (bool_expression -> bool_const .)
    PARAM           reduce using rule 47 (bool_expression -> bool_const .)


state 68

    (48) bool_expression -> variant .

    NEWLINE         reduce using rule 48 (bool_expression -> variant .)
    PLUS            reduce using rule 48 (bool_expression -> variant .)
    VARIANT         reduce using rule 48 (bool_expression -> variant .)
    error           reduce using rule 48 (bool_expression -> variant .)
    CONVERT         reduce using rule 48 (bool_expression -> variant .)
    DIGITIZE        reduce using rule 48 (bool_expression -> variant .)
    WHILE           reduce using rule 48 (bool_expression -> variant .)
    UNTIL           reduce using rule 48 (bool_expression -> variant .)
    IFLESS          reduce using rule 48 (bool_expression -> variant .)
    IFNLESS         reduce using rule 48 (bool_expression -> variant .)
    IFZERO          reduce using rule 48 (bool_expression -> variant .)
    IFNZERO         reduce using rule 48 (bool_expression -> variant .)
    IFHIGH          reduce using rule 48 (bool_expression -> variant .)
    IFNHIGH         reduce using rule 48 (bool_expression -> variant .)
    COMMAND         reduce using rule 48 (bool_expression -> variant .)
    FUNC            reduce using rule 48 (bool_expression -> variant .)
    CALL            reduce using rule 48 (bool_expression -> variant .)
    NAME            reduce using rule 48 (bool_expression -> variant .)
    PARAM           reduce using rule 48 (bool_expression -> variant .)


state 69

    (49) bool_expression -> function_call .

    NEWLINE         reduce using rule 49 (bool_expression -> function_call .)
    PLUS            reduce using rule 49 (bool_expression -> function_call .)
    VARIANT         reduce using rule 49 (bool_expression -> function_call .)
    error           reduce using rule 49 (bool_expression -> function_call .)
    CONVERT         reduce using rule 49 (bool_expression -> function_call .)
    DIGITIZE        reduce using rule 49 (bool_expression -> function_call .)
    WHILE           reduce using rule 49 (bool_expression -> function_call .)
    UNTIL           reduce using rule 49 (bool_expression -> function_call .)
    IFLESS          reduce using rule 49 (bool_expression -> function_call .)
    IFNLESS         reduce using rule 49 (bool_expression -> function_call .)
    IFZERO          reduce using rule 49 (bool_expression -> function_call .)
    IFNZERO         reduce using rule 49 (bool_expression -> function_call .)
    IFHIGH          reduce using rule 49 (bool_expression -> function_call .)
    IFNHIGH         reduce using rule 49 (bool_expression -> function_call .)
    COMMAND         reduce using rule 49 (bool_expression -> function_call .)
    FUNC            reduce using rule 49 (bool_expression -> function_call .)
    CALL            reduce using rule 49 (bool_expression -> function_call .)
    NAME            reduce using rule 49 (bool_expression -> function_call .)
    PARAM           reduce using rule 49 (bool_expression -> function_call .)


state 70

    (61) bool_math_expression -> MINUS . bool_expression
    (46) bool_expression -> . bool_math_expression
    (47) bool_expression -> . bool_const
    (48) bool_expression -> . variant
    (49) bool_expression -> . function_call
    (60) bool_math_expression -> . bool_expression PLUS bool_expression
    (61) bool_math_expression -> . MINUS bool_expression
    (68) bool_const -> . TRUE
    (69) bool_const -> . FALSE
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    MINUS           shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    bool_expression                shift and go to state 126
    bool_math_expression           shift and go to state 66
    bool_const                     shift and go to state 67
    variant                        shift and go to state 68
    function_call                  shift and go to state 69

state 71

    (68) bool_const -> TRUE .

    NEWLINE         reduce using rule 68 (bool_const -> TRUE .)
    PLUS            reduce using rule 68 (bool_const -> TRUE .)
    VARIANT         reduce using rule 68 (bool_const -> TRUE .)
    error           reduce using rule 68 (bool_const -> TRUE .)
    CONVERT         reduce using rule 68 (bool_const -> TRUE .)
    DIGITIZE        reduce using rule 68 (bool_const -> TRUE .)
    WHILE           reduce using rule 68 (bool_const -> TRUE .)
    UNTIL           reduce using rule 68 (bool_const -> TRUE .)
    IFLESS          reduce using rule 68 (bool_const -> TRUE .)
    IFNLESS         reduce using rule 68 (bool_const -> TRUE .)
    IFZERO          reduce using rule 68 (bool_const -> TRUE .)
    IFNZERO         reduce using rule 68 (bool_const -> TRUE .)
    IFHIGH          reduce using rule 68 (bool_const -> TRUE .)
    IFNHIGH         reduce using rule 68 (bool_const -> TRUE .)
    COMMAND         reduce using rule 68 (bool_const -> TRUE .)
    FUNC            reduce using rule 68 (bool_const -> TRUE .)
    CALL            reduce using rule 68 (bool_const -> TRUE .)
    NAME            reduce using rule 68 (bool_const -> TRUE .)
    PARAM           reduce using rule 68 (bool_const -> TRUE .)
    COMMA           reduce using rule 68 (bool_const -> TRUE .)
    RSQBRACKET      reduce using rule 68 (bool_const -> TRUE .)
    SEMICOLON       reduce using rule 68 (bool_const -> TRUE .)


state 72

    (69) bool_const -> FALSE .

    NEWLINE         reduce using rule 69 (bool_const -> FALSE .)
    PLUS            reduce using rule 69 (bool_const -> FALSE .)
    VARIANT         reduce using rule 69 (bool_const -> FALSE .)
    error           reduce using rule 69 (bool_const -> FALSE .)
    CONVERT         reduce using rule 69 (bool_const -> FALSE .)
    DIGITIZE        reduce using rule 69 (bool_const -> FALSE .)
    WHILE           reduce using rule 69 (bool_const -> FALSE .)
    UNTIL           reduce using rule 69 (bool_const -> FALSE .)
    IFLESS          reduce using rule 69 (bool_const -> FALSE .)
    IFNLESS         reduce using rule 69 (bool_const -> FALSE .)
    IFZERO          reduce using rule 69 (bool_const -> FALSE .)
    IFNZERO         reduce using rule 69 (bool_const -> FALSE .)
    IFHIGH          reduce using rule 69 (bool_const -> FALSE .)
    IFNHIGH         reduce using rule 69 (bool_const -> FALSE .)
    COMMAND         reduce using rule 69 (bool_const -> FALSE .)
    FUNC            reduce using rule 69 (bool_const -> FALSE .)
    CALL            reduce using rule 69 (bool_const -> FALSE .)
    NAME            reduce using rule 69 (bool_const -> FALSE .)
    PARAM           reduce using rule 69 (bool_const -> FALSE .)
    COMMA           reduce using rule 69 (bool_const -> FALSE .)
    RSQBRACKET      reduce using rule 69 (bool_const -> FALSE .)
    SEMICOLON       reduce using rule 69 (bool_const -> FALSE .)


state 73

    (78) until -> UNTIL bool_expression . NEWLINE statements ENDU
    (127) until -> UNTIL bool_expression . NEWLINE statements error
    (128) until -> UNTIL bool_expression . statements ENDU
    (60) bool_math_expression -> bool_expression . PLUS bool_expression
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 127
    PLUS            shift and go to state 124
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

  ! NEWLINE         [ reduce using rule 15 (empty -> .) ]

    statements                     shift and go to state 128
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 74

    (126) until -> UNTIL error . NEWLINE statements ENDU

    NEWLINE         shift and go to state 129


state 75

    (79) if -> IFLESS decimal_expression . COMMA decimal_expression NEWLINE statements ENDIF
    (136) if -> IFLESS decimal_expression . COMMA decimal_expression NEWLINE statements error
    (142) if -> IFLESS decimal_expression . COMMA decimal_expression statements ENDIF
    (58) dec_math_expression -> decimal_expression . PLUS decimal_expression

    COMMA           shift and go to state 130
    PLUS            shift and go to state 131


state 76

    (130) if -> IFLESS error . NEWLINE statements ENDIF

    NEWLINE         shift and go to state 132


state 77

    (42) decimal_expression -> dec_math_expression .

    COMMA           reduce using rule 42 (decimal_expression -> dec_math_expression .)
    PLUS            reduce using rule 42 (decimal_expression -> dec_math_expression .)
    NEWLINE         reduce using rule 42 (decimal_expression -> dec_math_expression .)
    VARIANT         reduce using rule 42 (decimal_expression -> dec_math_expression .)
    error           reduce using rule 42 (decimal_expression -> dec_math_expression .)
    CONVERT         reduce using rule 42 (decimal_expression -> dec_math_expression .)
    DIGITIZE        reduce using rule 42 (decimal_expression -> dec_math_expression .)
    WHILE           reduce using rule 42 (decimal_expression -> dec_math_expression .)
    UNTIL           reduce using rule 42 (decimal_expression -> dec_math_expression .)
    IFLESS          reduce using rule 42 (decimal_expression -> dec_math_expression .)
    IFNLESS         reduce using rule 42 (decimal_expression -> dec_math_expression .)
    IFZERO          reduce using rule 42 (decimal_expression -> dec_math_expression .)
    IFNZERO         reduce using rule 42 (decimal_expression -> dec_math_expression .)
    IFHIGH          reduce using rule 42 (decimal_expression -> dec_math_expression .)
    IFNHIGH         reduce using rule 42 (decimal_expression -> dec_math_expression .)
    COMMAND         reduce using rule 42 (decimal_expression -> dec_math_expression .)
    FUNC            reduce using rule 42 (decimal_expression -> dec_math_expression .)
    CALL            reduce using rule 42 (decimal_expression -> dec_math_expression .)
    NAME            reduce using rule 42 (decimal_expression -> dec_math_expression .)
    PARAM           reduce using rule 42 (decimal_expression -> dec_math_expression .)
    RSQBRACKET      reduce using rule 42 (decimal_expression -> dec_math_expression .)


state 78

    (43) decimal_expression -> decimal_const .

    COMMA           reduce using rule 43 (decimal_expression -> decimal_const .)
    PLUS            reduce using rule 43 (decimal_expression -> decimal_const .)
    NEWLINE         reduce using rule 43 (decimal_expression -> decimal_const .)
    VARIANT         reduce using rule 43 (decimal_expression -> decimal_const .)
    error           reduce using rule 43 (decimal_expression -> decimal_const .)
    CONVERT         reduce using rule 43 (decimal_expression -> decimal_const .)
    DIGITIZE        reduce using rule 43 (decimal_expression -> decimal_const .)
    WHILE           reduce using rule 43 (decimal_expression -> decimal_const .)
    UNTIL           reduce using rule 43 (decimal_expression -> decimal_const .)
    IFLESS          reduce using rule 43 (decimal_expression -> decimal_const .)
    IFNLESS         reduce using rule 43 (decimal_expression -> decimal_const .)
    IFZERO          reduce using rule 43 (decimal_expression -> decimal_const .)
    IFNZERO         reduce using rule 43 (decimal_expression -> decimal_const .)
    IFHIGH          reduce using rule 43 (decimal_expression -> decimal_const .)
    IFNHIGH         reduce using rule 43 (decimal_expression -> decimal_const .)
    COMMAND         reduce using rule 43 (decimal_expression -> decimal_const .)
    FUNC            reduce using rule 43 (decimal_expression -> decimal_const .)
    CALL            reduce using rule 43 (decimal_expression -> decimal_const .)
    NAME            reduce using rule 43 (decimal_expression -> decimal_const .)
    PARAM           reduce using rule 43 (decimal_expression -> decimal_const .)
    RSQBRACKET      reduce using rule 43 (decimal_expression -> decimal_const .)


state 79

    (44) decimal_expression -> variant .

    COMMA           reduce using rule 44 (decimal_expression -> variant .)
    PLUS            reduce using rule 44 (decimal_expression -> variant .)
    NEWLINE         reduce using rule 44 (decimal_expression -> variant .)
    VARIANT         reduce using rule 44 (decimal_expression -> variant .)
    error           reduce using rule 44 (decimal_expression -> variant .)
    CONVERT         reduce using rule 44 (decimal_expression -> variant .)
    DIGITIZE        reduce using rule 44 (decimal_expression -> variant .)
    WHILE           reduce using rule 44 (decimal_expression -> variant .)
    UNTIL           reduce using rule 44 (decimal_expression -> variant .)
    IFLESS          reduce using rule 44 (decimal_expression -> variant .)
    IFNLESS         reduce using rule 44 (decimal_expression -> variant .)
    IFZERO          reduce using rule 44 (decimal_expression -> variant .)
    IFNZERO         reduce using rule 44 (decimal_expression -> variant .)
    IFHIGH          reduce using rule 44 (decimal_expression -> variant .)
    IFNHIGH         reduce using rule 44 (decimal_expression -> variant .)
    COMMAND         reduce using rule 44 (decimal_expression -> variant .)
    FUNC            reduce using rule 44 (decimal_expression -> variant .)
    CALL            reduce using rule 44 (decimal_expression -> variant .)
    NAME            reduce using rule 44 (decimal_expression -> variant .)
    PARAM           reduce using rule 44 (decimal_expression -> variant .)
    RSQBRACKET      reduce using rule 44 (decimal_expression -> variant .)


state 80

    (45) decimal_expression -> function_call .

    COMMA           reduce using rule 45 (decimal_expression -> function_call .)
    PLUS            reduce using rule 45 (decimal_expression -> function_call .)
    NEWLINE         reduce using rule 45 (decimal_expression -> function_call .)
    VARIANT         reduce using rule 45 (decimal_expression -> function_call .)
    error           reduce using rule 45 (decimal_expression -> function_call .)
    CONVERT         reduce using rule 45 (decimal_expression -> function_call .)
    DIGITIZE        reduce using rule 45 (decimal_expression -> function_call .)
    WHILE           reduce using rule 45 (decimal_expression -> function_call .)
    UNTIL           reduce using rule 45 (decimal_expression -> function_call .)
    IFLESS          reduce using rule 45 (decimal_expression -> function_call .)
    IFNLESS         reduce using rule 45 (decimal_expression -> function_call .)
    IFZERO          reduce using rule 45 (decimal_expression -> function_call .)
    IFNZERO         reduce using rule 45 (decimal_expression -> function_call .)
    IFHIGH          reduce using rule 45 (decimal_expression -> function_call .)
    IFNHIGH         reduce using rule 45 (decimal_expression -> function_call .)
    COMMAND         reduce using rule 45 (decimal_expression -> function_call .)
    FUNC            reduce using rule 45 (decimal_expression -> function_call .)
    CALL            reduce using rule 45 (decimal_expression -> function_call .)
    NAME            reduce using rule 45 (decimal_expression -> function_call .)
    PARAM           reduce using rule 45 (decimal_expression -> function_call .)
    RSQBRACKET      reduce using rule 45 (decimal_expression -> function_call .)


state 81

    (59) dec_math_expression -> MINUS . decimal_expression
    (42) decimal_expression -> . dec_math_expression
    (43) decimal_expression -> . decimal_const
    (44) decimal_expression -> . variant
    (45) decimal_expression -> . function_call
    (58) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (59) dec_math_expression -> . MINUS decimal_expression
    (67) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    MINUS           shift and go to state 81
    DECIMAL         shift and go to state 82
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    decimal_expression             shift and go to state 133
    dec_math_expression            shift and go to state 77
    decimal_const                  shift and go to state 78
    variant                        shift and go to state 79
    function_call                  shift and go to state 80

state 82

    (67) decimal_const -> DECIMAL .

    COMMA           reduce using rule 67 (decimal_const -> DECIMAL .)
    PLUS            reduce using rule 67 (decimal_const -> DECIMAL .)
    NEWLINE         reduce using rule 67 (decimal_const -> DECIMAL .)
    VARIANT         reduce using rule 67 (decimal_const -> DECIMAL .)
    error           reduce using rule 67 (decimal_const -> DECIMAL .)
    CONVERT         reduce using rule 67 (decimal_const -> DECIMAL .)
    DIGITIZE        reduce using rule 67 (decimal_const -> DECIMAL .)
    WHILE           reduce using rule 67 (decimal_const -> DECIMAL .)
    UNTIL           reduce using rule 67 (decimal_const -> DECIMAL .)
    IFLESS          reduce using rule 67 (decimal_const -> DECIMAL .)
    IFNLESS         reduce using rule 67 (decimal_const -> DECIMAL .)
    IFZERO          reduce using rule 67 (decimal_const -> DECIMAL .)
    IFNZERO         reduce using rule 67 (decimal_const -> DECIMAL .)
    IFHIGH          reduce using rule 67 (decimal_const -> DECIMAL .)
    IFNHIGH         reduce using rule 67 (decimal_const -> DECIMAL .)
    COMMAND         reduce using rule 67 (decimal_const -> DECIMAL .)
    FUNC            reduce using rule 67 (decimal_const -> DECIMAL .)
    CALL            reduce using rule 67 (decimal_const -> DECIMAL .)
    NAME            reduce using rule 67 (decimal_const -> DECIMAL .)
    PARAM           reduce using rule 67 (decimal_const -> DECIMAL .)
    RSQBRACKET      reduce using rule 67 (decimal_const -> DECIMAL .)
    SEMICOLON       reduce using rule 67 (decimal_const -> DECIMAL .)


state 83

    (80) if -> IFNLESS decimal_expression . COMMA decimal_expression NEWLINE statements ENDIF
    (137) if -> IFNLESS decimal_expression . COMMA decimal_expression NEWLINE statements error
    (143) if -> IFNLESS decimal_expression . COMMA decimal_expression statements ENDIF
    (58) dec_math_expression -> decimal_expression . PLUS decimal_expression

    COMMA           shift and go to state 134
    PLUS            shift and go to state 131


state 84

    (131) if -> IFNLESS error . NEWLINE statements ENDIF

    NEWLINE         shift and go to state 135


state 85

    (81) if -> IFZERO decimal_expression . NEWLINE statements ENDIF
    (138) if -> IFZERO decimal_expression . NEWLINE statements error
    (144) if -> IFZERO decimal_expression . statements ENDIF
    (58) dec_math_expression -> decimal_expression . PLUS decimal_expression
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 136
    PLUS            shift and go to state 131
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

  ! NEWLINE         [ reduce using rule 15 (empty -> .) ]

    statements                     shift and go to state 137
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 86

    (132) if -> IFZERO error . NEWLINE statements ENDIF

    NEWLINE         shift and go to state 138


state 87

    (82) if -> IFNZERO decimal_expression . NEWLINE statements ENDIF
    (139) if -> IFNZERO decimal_expression . NEWLINE statements error
    (145) if -> IFNZERO decimal_expression . statements ENDIF
    (58) dec_math_expression -> decimal_expression . PLUS decimal_expression
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 139
    PLUS            shift and go to state 131
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

  ! NEWLINE         [ reduce using rule 15 (empty -> .) ]

    statements                     shift and go to state 140
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 88

    (133) if -> IFNZERO error . NEWLINE statements ENDIF

    NEWLINE         shift and go to state 141


state 89

    (83) if -> IFHIGH decimal_expression . COMMA decimal_expression NEWLINE statements ENDIF
    (140) if -> IFHIGH decimal_expression . COMMA decimal_expression NEWLINE statements error
    (146) if -> IFHIGH decimal_expression . COMMA decimal_expression statements ENDIF
    (58) dec_math_expression -> decimal_expression . PLUS decimal_expression

    COMMA           shift and go to state 142
    PLUS            shift and go to state 131


state 90

    (134) if -> IFHIGH error . NEWLINE statements ENDIF

    NEWLINE         shift and go to state 143


state 91

    (84) if -> IFNHIGH decimal_expression . COMMA decimal_expression NEWLINE statements ENDIF
    (141) if -> IFNHIGH decimal_expression . COMMA decimal_expression NEWLINE statements error
    (147) if -> IFNHIGH decimal_expression . COMMA decimal_expression statements ENDIF
    (58) dec_math_expression -> decimal_expression . PLUS decimal_expression

    COMMA           shift and go to state 144
    PLUS            shift and go to state 131


state 92

    (135) if -> IFNHIGH error . NEWLINE statements ENDIF

    NEWLINE         shift and go to state 145


state 93

    (85) command -> COMMAND string_expression .
    (62) string_math_expression -> string_expression . PLUS string_expression

    NEWLINE         reduce using rule 85 (command -> COMMAND string_expression .)
    error           reduce using rule 85 (command -> COMMAND string_expression .)
    PLUS            shift and go to state 146


state 94

    (120) command -> COMMAND error .

    NEWLINE         reduce using rule 120 (command -> COMMAND error .)
    error           reduce using rule 120 (command -> COMMAND error .)


state 95

    (50) string_expression -> string_math_expression .

    PLUS            reduce using rule 50 (string_expression -> string_math_expression .)
    NEWLINE         reduce using rule 50 (string_expression -> string_math_expression .)
    error           reduce using rule 50 (string_expression -> string_math_expression .)


state 96

    (51) string_expression -> string_const .

    PLUS            reduce using rule 51 (string_expression -> string_const .)
    NEWLINE         reduce using rule 51 (string_expression -> string_const .)
    error           reduce using rule 51 (string_expression -> string_const .)


state 97

    (52) string_expression -> variant .

    PLUS            reduce using rule 52 (string_expression -> variant .)
    NEWLINE         reduce using rule 52 (string_expression -> variant .)
    error           reduce using rule 52 (string_expression -> variant .)


state 98

    (53) string_expression -> function_call .

    PLUS            reduce using rule 53 (string_expression -> function_call .)
    NEWLINE         reduce using rule 53 (string_expression -> function_call .)
    error           reduce using rule 53 (string_expression -> function_call .)


state 99

    (63) string_math_expression -> MINUS . string_expression
    (50) string_expression -> . string_math_expression
    (51) string_expression -> . string_const
    (52) string_expression -> . variant
    (53) string_expression -> . function_call
    (62) string_math_expression -> . string_expression PLUS string_expression
    (63) string_math_expression -> . MINUS string_expression
    (70) string_const -> . LETTERS
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    MINUS           shift and go to state 99
    LETTERS         shift and go to state 100
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    string_expression              shift and go to state 147
    string_math_expression         shift and go to state 95
    string_const                   shift and go to state 96
    variant                        shift and go to state 97
    function_call                  shift and go to state 98

state 100

    (70) string_const -> LETTERS .

    PLUS            reduce using rule 70 (string_const -> LETTERS .)
    NEWLINE         reduce using rule 70 (string_const -> LETTERS .)
    error           reduce using rule 70 (string_const -> LETTERS .)
    VARIANT         reduce using rule 70 (string_const -> LETTERS .)
    CONVERT         reduce using rule 70 (string_const -> LETTERS .)
    DIGITIZE        reduce using rule 70 (string_const -> LETTERS .)
    WHILE           reduce using rule 70 (string_const -> LETTERS .)
    UNTIL           reduce using rule 70 (string_const -> LETTERS .)
    IFLESS          reduce using rule 70 (string_const -> LETTERS .)
    IFNLESS         reduce using rule 70 (string_const -> LETTERS .)
    IFZERO          reduce using rule 70 (string_const -> LETTERS .)
    IFNZERO         reduce using rule 70 (string_const -> LETTERS .)
    IFHIGH          reduce using rule 70 (string_const -> LETTERS .)
    IFNHIGH         reduce using rule 70 (string_const -> LETTERS .)
    COMMAND         reduce using rule 70 (string_const -> LETTERS .)
    FUNC            reduce using rule 70 (string_const -> LETTERS .)
    CALL            reduce using rule 70 (string_const -> LETTERS .)
    NAME            reduce using rule 70 (string_const -> LETTERS .)
    PARAM           reduce using rule 70 (string_const -> LETTERS .)
    COMMA           reduce using rule 70 (string_const -> LETTERS .)
    RSQBRACKET      reduce using rule 70 (string_const -> LETTERS .)
    SEMICOLON       reduce using rule 70 (string_const -> LETTERS .)


state 101

    (99) function -> FUNC NAME . NEWLINE func_body_statements ENDFUNC
    (150) function -> FUNC NAME . NEWLINE func_body_statements error

    NEWLINE         shift and go to state 148


state 102

    (149) function -> FUNC error . NEWLINE func_body_statements ENDFUNC
    (151) function -> FUNC error . NEWLINE func_body_statements error

    NEWLINE         shift and go to state 149


state 103

    (19) variant -> NAME varsize .
    (110) varsize -> varsize . error

  ! shift/reduce conflict for error resolved as shift
    ASSIGNMENT      reduce using rule 19 (variant -> NAME varsize .)
    NEWLINE         reduce using rule 19 (variant -> NAME varsize .)
    PLUS            reduce using rule 19 (variant -> NAME varsize .)
    VARIANT         reduce using rule 19 (variant -> NAME varsize .)
    CONVERT         reduce using rule 19 (variant -> NAME varsize .)
    DIGITIZE        reduce using rule 19 (variant -> NAME varsize .)
    WHILE           reduce using rule 19 (variant -> NAME varsize .)
    UNTIL           reduce using rule 19 (variant -> NAME varsize .)
    IFLESS          reduce using rule 19 (variant -> NAME varsize .)
    IFNLESS         reduce using rule 19 (variant -> NAME varsize .)
    IFZERO          reduce using rule 19 (variant -> NAME varsize .)
    IFNZERO         reduce using rule 19 (variant -> NAME varsize .)
    IFHIGH          reduce using rule 19 (variant -> NAME varsize .)
    IFNHIGH         reduce using rule 19 (variant -> NAME varsize .)
    COMMAND         reduce using rule 19 (variant -> NAME varsize .)
    FUNC            reduce using rule 19 (variant -> NAME varsize .)
    CALL            reduce using rule 19 (variant -> NAME varsize .)
    NAME            reduce using rule 19 (variant -> NAME varsize .)
    PARAM           reduce using rule 19 (variant -> NAME varsize .)
    COMMA           reduce using rule 19 (variant -> NAME varsize .)
    RSQBRACKET      reduce using rule 19 (variant -> NAME varsize .)
    error           shift and go to state 150

  ! error           [ reduce using rule 19 (variant -> NAME varsize .) ]


state 104

    (22) varsize -> LSQBRACKET . decimal_expression RSQBRACKET
    (23) varsize -> LSQBRACKET . decimal_expression COMMA decimal_expression RSQBRACKET
    (24) varsize -> LSQBRACKET . RSQBRACKET
    (106) varsize -> LSQBRACKET . error RSQBRACKET
    (107) varsize -> LSQBRACKET . error COMMA decimal_expression RSQBRACKET
    (108) varsize -> LSQBRACKET . decimal_expression COMMA error RSQBRACKET
    (109) varsize -> LSQBRACKET . error COMMA error RSQBRACKET
    (42) decimal_expression -> . dec_math_expression
    (43) decimal_expression -> . decimal_const
    (44) decimal_expression -> . variant
    (45) decimal_expression -> . function_call
    (58) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (59) dec_math_expression -> . MINUS decimal_expression
    (67) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    RSQBRACKET      shift and go to state 152
    error           shift and go to state 153
    MINUS           shift and go to state 81
    DECIMAL         shift and go to state 82
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    decimal_expression             shift and go to state 151
    dec_math_expression            shift and go to state 77
    decimal_const                  shift and go to state 78
    variant                        shift and go to state 79
    function_call                  shift and go to state 80

state 105

    (100) function_call -> CALL NAME . expression
    (101) function_call -> CALL NAME .
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variant
    (41) expression -> . function_call
    (54) math_expression -> . expression PLUS expression
    (55) math_expression -> . MINUS expression
    (64) const -> . bool_const
    (65) const -> . decimal_const
    (66) const -> . string_const
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (68) bool_const -> . TRUE
    (69) bool_const -> . FALSE
    (67) decimal_const -> . DECIMAL
    (70) string_const -> . LETTERS

  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for PARAM resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
    NEWLINE         reduce using rule 101 (function_call -> CALL NAME .)
    PLUS            reduce using rule 101 (function_call -> CALL NAME .)
    VARIANT         reduce using rule 101 (function_call -> CALL NAME .)
    error           reduce using rule 101 (function_call -> CALL NAME .)
    CONVERT         reduce using rule 101 (function_call -> CALL NAME .)
    DIGITIZE        reduce using rule 101 (function_call -> CALL NAME .)
    WHILE           reduce using rule 101 (function_call -> CALL NAME .)
    UNTIL           reduce using rule 101 (function_call -> CALL NAME .)
    IFLESS          reduce using rule 101 (function_call -> CALL NAME .)
    IFNLESS         reduce using rule 101 (function_call -> CALL NAME .)
    IFZERO          reduce using rule 101 (function_call -> CALL NAME .)
    IFNZERO         reduce using rule 101 (function_call -> CALL NAME .)
    IFHIGH          reduce using rule 101 (function_call -> CALL NAME .)
    IFNHIGH         reduce using rule 101 (function_call -> CALL NAME .)
    COMMAND         reduce using rule 101 (function_call -> CALL NAME .)
    FUNC            reduce using rule 101 (function_call -> CALL NAME .)
    COMMA           reduce using rule 101 (function_call -> CALL NAME .)
    RSQBRACKET      reduce using rule 101 (function_call -> CALL NAME .)
    MINUS           shift and go to state 114
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    DECIMAL         shift and go to state 82
    LETTERS         shift and go to state 100

  ! CALL            [ reduce using rule 101 (function_call -> CALL NAME .) ]
  ! NAME            [ reduce using rule 101 (function_call -> CALL NAME .) ]
  ! PARAM           [ reduce using rule 101 (function_call -> CALL NAME .) ]

    expression                     shift and go to state 154
    math_expression                shift and go to state 111
    const                          shift and go to state 112
    variant                        shift and go to state 108
    function_call                  shift and go to state 113
    bool_const                     shift and go to state 115
    decimal_const                  shift and go to state 116
    string_const                   shift and go to state 117

state 106

    (21) variant -> PARAM varsize .
    (110) varsize -> varsize . error

  ! shift/reduce conflict for error resolved as shift
    ASSIGNMENT      reduce using rule 21 (variant -> PARAM varsize .)
    NEWLINE         reduce using rule 21 (variant -> PARAM varsize .)
    PLUS            reduce using rule 21 (variant -> PARAM varsize .)
    VARIANT         reduce using rule 21 (variant -> PARAM varsize .)
    CONVERT         reduce using rule 21 (variant -> PARAM varsize .)
    DIGITIZE        reduce using rule 21 (variant -> PARAM varsize .)
    WHILE           reduce using rule 21 (variant -> PARAM varsize .)
    UNTIL           reduce using rule 21 (variant -> PARAM varsize .)
    IFLESS          reduce using rule 21 (variant -> PARAM varsize .)
    IFNLESS         reduce using rule 21 (variant -> PARAM varsize .)
    IFZERO          reduce using rule 21 (variant -> PARAM varsize .)
    IFNZERO         reduce using rule 21 (variant -> PARAM varsize .)
    IFHIGH          reduce using rule 21 (variant -> PARAM varsize .)
    IFNHIGH         reduce using rule 21 (variant -> PARAM varsize .)
    COMMAND         reduce using rule 21 (variant -> PARAM varsize .)
    FUNC            reduce using rule 21 (variant -> PARAM varsize .)
    CALL            reduce using rule 21 (variant -> PARAM varsize .)
    NAME            reduce using rule 21 (variant -> PARAM varsize .)
    PARAM           reduce using rule 21 (variant -> PARAM varsize .)
    COMMA           reduce using rule 21 (variant -> PARAM varsize .)
    RSQBRACKET      reduce using rule 21 (variant -> PARAM varsize .)
    error           shift and go to state 150

  ! error           [ reduce using rule 21 (variant -> PARAM varsize .) ]


state 107

    (17) declaration -> VARIANT variant ASSIGNMENT . initialization
    (104) declaration -> VARIANT variant ASSIGNMENT . error
    (25) initialization -> . LBRACE init_lists RBRACE

    error           shift and go to state 156
    LBRACE          shift and go to state 157

    initialization                 shift and go to state 155

state 108

    (40) expression -> variant .

    PLUS            reduce using rule 40 (expression -> variant .)
    NEWLINE         reduce using rule 40 (expression -> variant .)
    VARIANT         reduce using rule 40 (expression -> variant .)
    error           reduce using rule 40 (expression -> variant .)
    CONVERT         reduce using rule 40 (expression -> variant .)
    DIGITIZE        reduce using rule 40 (expression -> variant .)
    WHILE           reduce using rule 40 (expression -> variant .)
    UNTIL           reduce using rule 40 (expression -> variant .)
    IFLESS          reduce using rule 40 (expression -> variant .)
    IFNLESS         reduce using rule 40 (expression -> variant .)
    IFZERO          reduce using rule 40 (expression -> variant .)
    IFNZERO         reduce using rule 40 (expression -> variant .)
    IFHIGH          reduce using rule 40 (expression -> variant .)
    IFNHIGH         reduce using rule 40 (expression -> variant .)
    COMMAND         reduce using rule 40 (expression -> variant .)
    FUNC            reduce using rule 40 (expression -> variant .)
    CALL            reduce using rule 40 (expression -> variant .)
    NAME            reduce using rule 40 (expression -> variant .)
    PARAM           reduce using rule 40 (expression -> variant .)
    COMMA           reduce using rule 40 (expression -> variant .)
    RSQBRACKET      reduce using rule 40 (expression -> variant .)


state 109

    (71) assignment -> variant ASSIGNMENT expression .
    (54) math_expression -> expression . PLUS expression

    NEWLINE         reduce using rule 71 (assignment -> variant ASSIGNMENT expression .)
    PLUS            shift and go to state 158


state 110

    (111) assignment -> variant ASSIGNMENT error .

    NEWLINE         reduce using rule 111 (assignment -> variant ASSIGNMENT error .)


state 111

    (38) expression -> math_expression .

    PLUS            reduce using rule 38 (expression -> math_expression .)
    NEWLINE         reduce using rule 38 (expression -> math_expression .)
    VARIANT         reduce using rule 38 (expression -> math_expression .)
    error           reduce using rule 38 (expression -> math_expression .)
    CONVERT         reduce using rule 38 (expression -> math_expression .)
    DIGITIZE        reduce using rule 38 (expression -> math_expression .)
    WHILE           reduce using rule 38 (expression -> math_expression .)
    UNTIL           reduce using rule 38 (expression -> math_expression .)
    IFLESS          reduce using rule 38 (expression -> math_expression .)
    IFNLESS         reduce using rule 38 (expression -> math_expression .)
    IFZERO          reduce using rule 38 (expression -> math_expression .)
    IFNZERO         reduce using rule 38 (expression -> math_expression .)
    IFHIGH          reduce using rule 38 (expression -> math_expression .)
    IFNHIGH         reduce using rule 38 (expression -> math_expression .)
    COMMAND         reduce using rule 38 (expression -> math_expression .)
    FUNC            reduce using rule 38 (expression -> math_expression .)
    CALL            reduce using rule 38 (expression -> math_expression .)
    NAME            reduce using rule 38 (expression -> math_expression .)
    PARAM           reduce using rule 38 (expression -> math_expression .)
    COMMA           reduce using rule 38 (expression -> math_expression .)
    RSQBRACKET      reduce using rule 38 (expression -> math_expression .)


state 112

    (39) expression -> const .

    PLUS            reduce using rule 39 (expression -> const .)
    NEWLINE         reduce using rule 39 (expression -> const .)
    VARIANT         reduce using rule 39 (expression -> const .)
    error           reduce using rule 39 (expression -> const .)
    CONVERT         reduce using rule 39 (expression -> const .)
    DIGITIZE        reduce using rule 39 (expression -> const .)
    WHILE           reduce using rule 39 (expression -> const .)
    UNTIL           reduce using rule 39 (expression -> const .)
    IFLESS          reduce using rule 39 (expression -> const .)
    IFNLESS         reduce using rule 39 (expression -> const .)
    IFZERO          reduce using rule 39 (expression -> const .)
    IFNZERO         reduce using rule 39 (expression -> const .)
    IFHIGH          reduce using rule 39 (expression -> const .)
    IFNHIGH         reduce using rule 39 (expression -> const .)
    COMMAND         reduce using rule 39 (expression -> const .)
    FUNC            reduce using rule 39 (expression -> const .)
    CALL            reduce using rule 39 (expression -> const .)
    NAME            reduce using rule 39 (expression -> const .)
    PARAM           reduce using rule 39 (expression -> const .)
    COMMA           reduce using rule 39 (expression -> const .)
    RSQBRACKET      reduce using rule 39 (expression -> const .)


state 113

    (41) expression -> function_call .

    PLUS            reduce using rule 41 (expression -> function_call .)
    NEWLINE         reduce using rule 41 (expression -> function_call .)
    VARIANT         reduce using rule 41 (expression -> function_call .)
    error           reduce using rule 41 (expression -> function_call .)
    CONVERT         reduce using rule 41 (expression -> function_call .)
    DIGITIZE        reduce using rule 41 (expression -> function_call .)
    WHILE           reduce using rule 41 (expression -> function_call .)
    UNTIL           reduce using rule 41 (expression -> function_call .)
    IFLESS          reduce using rule 41 (expression -> function_call .)
    IFNLESS         reduce using rule 41 (expression -> function_call .)
    IFZERO          reduce using rule 41 (expression -> function_call .)
    IFNZERO         reduce using rule 41 (expression -> function_call .)
    IFHIGH          reduce using rule 41 (expression -> function_call .)
    IFNHIGH         reduce using rule 41 (expression -> function_call .)
    COMMAND         reduce using rule 41 (expression -> function_call .)
    FUNC            reduce using rule 41 (expression -> function_call .)
    CALL            reduce using rule 41 (expression -> function_call .)
    NAME            reduce using rule 41 (expression -> function_call .)
    PARAM           reduce using rule 41 (expression -> function_call .)
    COMMA           reduce using rule 41 (expression -> function_call .)
    RSQBRACKET      reduce using rule 41 (expression -> function_call .)


state 114

    (55) math_expression -> MINUS . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variant
    (41) expression -> . function_call
    (54) math_expression -> . expression PLUS expression
    (55) math_expression -> . MINUS expression
    (64) const -> . bool_const
    (65) const -> . decimal_const
    (66) const -> . string_const
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (68) bool_const -> . TRUE
    (69) bool_const -> . FALSE
    (67) decimal_const -> . DECIMAL
    (70) string_const -> . LETTERS

    MINUS           shift and go to state 114
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    DECIMAL         shift and go to state 82
    LETTERS         shift and go to state 100

    expression                     shift and go to state 159
    math_expression                shift and go to state 111
    const                          shift and go to state 112
    variant                        shift and go to state 108
    function_call                  shift and go to state 113
    bool_const                     shift and go to state 115
    decimal_const                  shift and go to state 116
    string_const                   shift and go to state 117

state 115

    (64) const -> bool_const .

    PLUS            reduce using rule 64 (const -> bool_const .)
    NEWLINE         reduce using rule 64 (const -> bool_const .)
    VARIANT         reduce using rule 64 (const -> bool_const .)
    error           reduce using rule 64 (const -> bool_const .)
    CONVERT         reduce using rule 64 (const -> bool_const .)
    DIGITIZE        reduce using rule 64 (const -> bool_const .)
    WHILE           reduce using rule 64 (const -> bool_const .)
    UNTIL           reduce using rule 64 (const -> bool_const .)
    IFLESS          reduce using rule 64 (const -> bool_const .)
    IFNLESS         reduce using rule 64 (const -> bool_const .)
    IFZERO          reduce using rule 64 (const -> bool_const .)
    IFNZERO         reduce using rule 64 (const -> bool_const .)
    IFHIGH          reduce using rule 64 (const -> bool_const .)
    IFNHIGH         reduce using rule 64 (const -> bool_const .)
    COMMAND         reduce using rule 64 (const -> bool_const .)
    FUNC            reduce using rule 64 (const -> bool_const .)
    CALL            reduce using rule 64 (const -> bool_const .)
    NAME            reduce using rule 64 (const -> bool_const .)
    PARAM           reduce using rule 64 (const -> bool_const .)
    COMMA           reduce using rule 64 (const -> bool_const .)
    RSQBRACKET      reduce using rule 64 (const -> bool_const .)
    SEMICOLON       reduce using rule 64 (const -> bool_const .)


state 116

    (65) const -> decimal_const .

    PLUS            reduce using rule 65 (const -> decimal_const .)
    NEWLINE         reduce using rule 65 (const -> decimal_const .)
    VARIANT         reduce using rule 65 (const -> decimal_const .)
    error           reduce using rule 65 (const -> decimal_const .)
    CONVERT         reduce using rule 65 (const -> decimal_const .)
    DIGITIZE        reduce using rule 65 (const -> decimal_const .)
    WHILE           reduce using rule 65 (const -> decimal_const .)
    UNTIL           reduce using rule 65 (const -> decimal_const .)
    IFLESS          reduce using rule 65 (const -> decimal_const .)
    IFNLESS         reduce using rule 65 (const -> decimal_const .)
    IFZERO          reduce using rule 65 (const -> decimal_const .)
    IFNZERO         reduce using rule 65 (const -> decimal_const .)
    IFHIGH          reduce using rule 65 (const -> decimal_const .)
    IFNHIGH         reduce using rule 65 (const -> decimal_const .)
    COMMAND         reduce using rule 65 (const -> decimal_const .)
    FUNC            reduce using rule 65 (const -> decimal_const .)
    CALL            reduce using rule 65 (const -> decimal_const .)
    NAME            reduce using rule 65 (const -> decimal_const .)
    PARAM           reduce using rule 65 (const -> decimal_const .)
    COMMA           reduce using rule 65 (const -> decimal_const .)
    RSQBRACKET      reduce using rule 65 (const -> decimal_const .)
    SEMICOLON       reduce using rule 65 (const -> decimal_const .)


state 117

    (66) const -> string_const .

    PLUS            reduce using rule 66 (const -> string_const .)
    NEWLINE         reduce using rule 66 (const -> string_const .)
    VARIANT         reduce using rule 66 (const -> string_const .)
    error           reduce using rule 66 (const -> string_const .)
    CONVERT         reduce using rule 66 (const -> string_const .)
    DIGITIZE        reduce using rule 66 (const -> string_const .)
    WHILE           reduce using rule 66 (const -> string_const .)
    UNTIL           reduce using rule 66 (const -> string_const .)
    IFLESS          reduce using rule 66 (const -> string_const .)
    IFNLESS         reduce using rule 66 (const -> string_const .)
    IFZERO          reduce using rule 66 (const -> string_const .)
    IFNZERO         reduce using rule 66 (const -> string_const .)
    IFHIGH          reduce using rule 66 (const -> string_const .)
    IFNHIGH         reduce using rule 66 (const -> string_const .)
    COMMAND         reduce using rule 66 (const -> string_const .)
    FUNC            reduce using rule 66 (const -> string_const .)
    CALL            reduce using rule 66 (const -> string_const .)
    NAME            reduce using rule 66 (const -> string_const .)
    PARAM           reduce using rule 66 (const -> string_const .)
    COMMA           reduce using rule 66 (const -> string_const .)
    RSQBRACKET      reduce using rule 66 (const -> string_const .)
    SEMICOLON       reduce using rule 66 (const -> string_const .)


state 118

    (112) assignment -> error ASSIGNMENT expression .
    (54) math_expression -> expression . PLUS expression

    NEWLINE         reduce using rule 112 (assignment -> error ASSIGNMENT expression .)
    PLUS            shift and go to state 158


state 119

    (72) convert -> CONVERT type TO . type variant
    (113) convert -> CONVERT type TO . type error
    (114) convert -> CONVERT type TO . error
    (74) type -> . BOOL
    (75) type -> . DIGIT
    (76) type -> . STRING

    error           shift and go to state 161
    BOOL            shift and go to state 59
    DIGIT           shift and go to state 60
    STRING          shift and go to state 61

    type                           shift and go to state 160

state 120

    (115) convert -> CONVERT type error .

    NEWLINE         reduce using rule 115 (convert -> CONVERT type error .)
    error           reduce using rule 115 (convert -> CONVERT type error .)


state 121

    (73) digitize -> DIGITIZE type variant .

    NEWLINE         reduce using rule 73 (digitize -> DIGITIZE type variant .)
    error           reduce using rule 73 (digitize -> DIGITIZE type variant .)


state 122

    (77) while -> WHILE bool_expression NEWLINE . statements ENDW
    (123) while -> WHILE bool_expression NEWLINE . statements error
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statements                     shift and go to state 162
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 123

    (124) while -> WHILE bool_expression statements . ENDW
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDW            shift and go to state 163
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 124

    (60) bool_math_expression -> bool_expression PLUS . bool_expression
    (46) bool_expression -> . bool_math_expression
    (47) bool_expression -> . bool_const
    (48) bool_expression -> . variant
    (49) bool_expression -> . function_call
    (60) bool_math_expression -> . bool_expression PLUS bool_expression
    (61) bool_math_expression -> . MINUS bool_expression
    (68) bool_const -> . TRUE
    (69) bool_const -> . FALSE
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    MINUS           shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    bool_expression                shift and go to state 164
    bool_math_expression           shift and go to state 66
    bool_const                     shift and go to state 67
    variant                        shift and go to state 68
    function_call                  shift and go to state 69

state 125

    (122) while -> WHILE error NEWLINE . statements ENDW
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statements                     shift and go to state 165
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 126

    (61) bool_math_expression -> MINUS bool_expression .
    (60) bool_math_expression -> bool_expression . PLUS bool_expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 61 (bool_math_expression -> MINUS bool_expression .)
    VARIANT         reduce using rule 61 (bool_math_expression -> MINUS bool_expression .)
    error           reduce using rule 61 (bool_math_expression -> MINUS bool_expression .)
    CONVERT         reduce using rule 61 (bool_math_expression -> MINUS bool_expression .)
    DIGITIZE        reduce using rule 61 (bool_math_expression -> MINUS bool_expression .)
    WHILE           reduce using rule 61 (bool_math_expression -> MINUS bool_expression .)
    UNTIL           reduce using rule 61 (bool_math_expression -> MINUS bool_expression .)
    IFLESS          reduce using rule 61 (bool_math_expression -> MINUS bool_expression .)
    IFNLESS         reduce using rule 61 (bool_math_expression -> MINUS bool_expression .)
    IFZERO          reduce using rule 61 (bool_math_expression -> MINUS bool_expression .)
    IFNZERO         reduce using rule 61 (bool_math_expression -> MINUS bool_expression .)
    IFHIGH          reduce using rule 61 (bool_math_expression -> MINUS bool_expression .)
    IFNHIGH         reduce using rule 61 (bool_math_expression -> MINUS bool_expression .)
    COMMAND         reduce using rule 61 (bool_math_expression -> MINUS bool_expression .)
    FUNC            reduce using rule 61 (bool_math_expression -> MINUS bool_expression .)
    CALL            reduce using rule 61 (bool_math_expression -> MINUS bool_expression .)
    NAME            reduce using rule 61 (bool_math_expression -> MINUS bool_expression .)
    PARAM           reduce using rule 61 (bool_math_expression -> MINUS bool_expression .)
    PLUS            shift and go to state 124

  ! PLUS            [ reduce using rule 61 (bool_math_expression -> MINUS bool_expression .) ]


state 127

    (78) until -> UNTIL bool_expression NEWLINE . statements ENDU
    (127) until -> UNTIL bool_expression NEWLINE . statements error
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statements                     shift and go to state 166
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 128

    (128) until -> UNTIL bool_expression statements . ENDU
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDU            shift and go to state 167
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 129

    (126) until -> UNTIL error NEWLINE . statements ENDU
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statements                     shift and go to state 168
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 130

    (79) if -> IFLESS decimal_expression COMMA . decimal_expression NEWLINE statements ENDIF
    (136) if -> IFLESS decimal_expression COMMA . decimal_expression NEWLINE statements error
    (142) if -> IFLESS decimal_expression COMMA . decimal_expression statements ENDIF
    (42) decimal_expression -> . dec_math_expression
    (43) decimal_expression -> . decimal_const
    (44) decimal_expression -> . variant
    (45) decimal_expression -> . function_call
    (58) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (59) dec_math_expression -> . MINUS decimal_expression
    (67) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    MINUS           shift and go to state 81
    DECIMAL         shift and go to state 82
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    decimal_expression             shift and go to state 169
    dec_math_expression            shift and go to state 77
    decimal_const                  shift and go to state 78
    variant                        shift and go to state 79
    function_call                  shift and go to state 80

state 131

    (58) dec_math_expression -> decimal_expression PLUS . decimal_expression
    (42) decimal_expression -> . dec_math_expression
    (43) decimal_expression -> . decimal_const
    (44) decimal_expression -> . variant
    (45) decimal_expression -> . function_call
    (58) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (59) dec_math_expression -> . MINUS decimal_expression
    (67) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    MINUS           shift and go to state 81
    DECIMAL         shift and go to state 82
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    decimal_expression             shift and go to state 170
    dec_math_expression            shift and go to state 77
    decimal_const                  shift and go to state 78
    variant                        shift and go to state 79
    function_call                  shift and go to state 80

state 132

    (130) if -> IFLESS error NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statements                     shift and go to state 171
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 133

    (59) dec_math_expression -> MINUS decimal_expression .
    (58) dec_math_expression -> decimal_expression . PLUS decimal_expression

  ! shift/reduce conflict for PLUS resolved as shift
    COMMA           reduce using rule 59 (dec_math_expression -> MINUS decimal_expression .)
    NEWLINE         reduce using rule 59 (dec_math_expression -> MINUS decimal_expression .)
    VARIANT         reduce using rule 59 (dec_math_expression -> MINUS decimal_expression .)
    error           reduce using rule 59 (dec_math_expression -> MINUS decimal_expression .)
    CONVERT         reduce using rule 59 (dec_math_expression -> MINUS decimal_expression .)
    DIGITIZE        reduce using rule 59 (dec_math_expression -> MINUS decimal_expression .)
    WHILE           reduce using rule 59 (dec_math_expression -> MINUS decimal_expression .)
    UNTIL           reduce using rule 59 (dec_math_expression -> MINUS decimal_expression .)
    IFLESS          reduce using rule 59 (dec_math_expression -> MINUS decimal_expression .)
    IFNLESS         reduce using rule 59 (dec_math_expression -> MINUS decimal_expression .)
    IFZERO          reduce using rule 59 (dec_math_expression -> MINUS decimal_expression .)
    IFNZERO         reduce using rule 59 (dec_math_expression -> MINUS decimal_expression .)
    IFHIGH          reduce using rule 59 (dec_math_expression -> MINUS decimal_expression .)
    IFNHIGH         reduce using rule 59 (dec_math_expression -> MINUS decimal_expression .)
    COMMAND         reduce using rule 59 (dec_math_expression -> MINUS decimal_expression .)
    FUNC            reduce using rule 59 (dec_math_expression -> MINUS decimal_expression .)
    CALL            reduce using rule 59 (dec_math_expression -> MINUS decimal_expression .)
    NAME            reduce using rule 59 (dec_math_expression -> MINUS decimal_expression .)
    PARAM           reduce using rule 59 (dec_math_expression -> MINUS decimal_expression .)
    RSQBRACKET      reduce using rule 59 (dec_math_expression -> MINUS decimal_expression .)
    PLUS            shift and go to state 131

  ! PLUS            [ reduce using rule 59 (dec_math_expression -> MINUS decimal_expression .) ]


state 134

    (80) if -> IFNLESS decimal_expression COMMA . decimal_expression NEWLINE statements ENDIF
    (137) if -> IFNLESS decimal_expression COMMA . decimal_expression NEWLINE statements error
    (143) if -> IFNLESS decimal_expression COMMA . decimal_expression statements ENDIF
    (42) decimal_expression -> . dec_math_expression
    (43) decimal_expression -> . decimal_const
    (44) decimal_expression -> . variant
    (45) decimal_expression -> . function_call
    (58) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (59) dec_math_expression -> . MINUS decimal_expression
    (67) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    MINUS           shift and go to state 81
    DECIMAL         shift and go to state 82
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    decimal_expression             shift and go to state 172
    dec_math_expression            shift and go to state 77
    decimal_const                  shift and go to state 78
    variant                        shift and go to state 79
    function_call                  shift and go to state 80

state 135

    (131) if -> IFNLESS error NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statements                     shift and go to state 173
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 136

    (81) if -> IFZERO decimal_expression NEWLINE . statements ENDIF
    (138) if -> IFZERO decimal_expression NEWLINE . statements error
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statements                     shift and go to state 174
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 137

    (144) if -> IFZERO decimal_expression statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 175
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 138

    (132) if -> IFZERO error NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statements                     shift and go to state 176
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 139

    (82) if -> IFNZERO decimal_expression NEWLINE . statements ENDIF
    (139) if -> IFNZERO decimal_expression NEWLINE . statements error
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statements                     shift and go to state 177
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 140

    (145) if -> IFNZERO decimal_expression statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 178
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 141

    (133) if -> IFNZERO error NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statements                     shift and go to state 179
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 142

    (83) if -> IFHIGH decimal_expression COMMA . decimal_expression NEWLINE statements ENDIF
    (140) if -> IFHIGH decimal_expression COMMA . decimal_expression NEWLINE statements error
    (146) if -> IFHIGH decimal_expression COMMA . decimal_expression statements ENDIF
    (42) decimal_expression -> . dec_math_expression
    (43) decimal_expression -> . decimal_const
    (44) decimal_expression -> . variant
    (45) decimal_expression -> . function_call
    (58) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (59) dec_math_expression -> . MINUS decimal_expression
    (67) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    MINUS           shift and go to state 81
    DECIMAL         shift and go to state 82
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    decimal_expression             shift and go to state 180
    dec_math_expression            shift and go to state 77
    decimal_const                  shift and go to state 78
    variant                        shift and go to state 79
    function_call                  shift and go to state 80

state 143

    (134) if -> IFHIGH error NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statements                     shift and go to state 181
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 144

    (84) if -> IFNHIGH decimal_expression COMMA . decimal_expression NEWLINE statements ENDIF
    (141) if -> IFNHIGH decimal_expression COMMA . decimal_expression NEWLINE statements error
    (147) if -> IFNHIGH decimal_expression COMMA . decimal_expression statements ENDIF
    (42) decimal_expression -> . dec_math_expression
    (43) decimal_expression -> . decimal_const
    (44) decimal_expression -> . variant
    (45) decimal_expression -> . function_call
    (58) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (59) dec_math_expression -> . MINUS decimal_expression
    (67) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    MINUS           shift and go to state 81
    DECIMAL         shift and go to state 82
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    decimal_expression             shift and go to state 182
    dec_math_expression            shift and go to state 77
    decimal_const                  shift and go to state 78
    variant                        shift and go to state 79
    function_call                  shift and go to state 80

state 145

    (135) if -> IFNHIGH error NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statements                     shift and go to state 183
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 146

    (62) string_math_expression -> string_expression PLUS . string_expression
    (50) string_expression -> . string_math_expression
    (51) string_expression -> . string_const
    (52) string_expression -> . variant
    (53) string_expression -> . function_call
    (62) string_math_expression -> . string_expression PLUS string_expression
    (63) string_math_expression -> . MINUS string_expression
    (70) string_const -> . LETTERS
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    MINUS           shift and go to state 99
    LETTERS         shift and go to state 100
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    string_expression              shift and go to state 184
    string_math_expression         shift and go to state 95
    string_const                   shift and go to state 96
    variant                        shift and go to state 97
    function_call                  shift and go to state 98

state 147

    (63) string_math_expression -> MINUS string_expression .
    (62) string_math_expression -> string_expression . PLUS string_expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 63 (string_math_expression -> MINUS string_expression .)
    error           reduce using rule 63 (string_math_expression -> MINUS string_expression .)
    PLUS            shift and go to state 146

  ! PLUS            [ reduce using rule 63 (string_math_expression -> MINUS string_expression .) ]


state 148

    (99) function -> FUNC NAME NEWLINE . func_body_statements ENDFUNC
    (150) function -> FUNC NAME NEWLINE . func_body_statements error
    (86) func_body_statements -> . func_body_statements func_body_statement
    (87) func_body_statements -> . func_body_statement
    (88) func_body_statement -> . empty NEWLINE
    (89) func_body_statement -> . declaration NEWLINE
    (90) func_body_statement -> . assignment NEWLINE
    (91) func_body_statement -> . convert NEWLINE
    (92) func_body_statement -> . digitize NEWLINE
    (93) func_body_statement -> . while NEWLINE
    (94) func_body_statement -> . until NEWLINE
    (95) func_body_statement -> . if NEWLINE
    (96) func_body_statement -> . command NEWLINE
    (97) func_body_statement -> . function_call NEWLINE
    (98) func_body_statement -> . return NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (102) return -> . RETURN expression
    (153) return -> . RETURN error
    (154) return -> . return error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    CALL            shift and go to state 31
    RETURN          shift and go to state 198
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    func_body_statements           shift and go to state 185
    func_body_statement            shift and go to state 186
    empty                          shift and go to state 187
    declaration                    shift and go to state 188
    assignment                     shift and go to state 189
    convert                        shift and go to state 190
    digitize                       shift and go to state 191
    while                          shift and go to state 192
    until                          shift and go to state 193
    if                             shift and go to state 194
    command                        shift and go to state 195
    function_call                  shift and go to state 196
    return                         shift and go to state 197
    variant                        shift and go to state 16

state 149

    (149) function -> FUNC error NEWLINE . func_body_statements ENDFUNC
    (151) function -> FUNC error NEWLINE . func_body_statements error
    (86) func_body_statements -> . func_body_statements func_body_statement
    (87) func_body_statements -> . func_body_statement
    (88) func_body_statement -> . empty NEWLINE
    (89) func_body_statement -> . declaration NEWLINE
    (90) func_body_statement -> . assignment NEWLINE
    (91) func_body_statement -> . convert NEWLINE
    (92) func_body_statement -> . digitize NEWLINE
    (93) func_body_statement -> . while NEWLINE
    (94) func_body_statement -> . until NEWLINE
    (95) func_body_statement -> . if NEWLINE
    (96) func_body_statement -> . command NEWLINE
    (97) func_body_statement -> . function_call NEWLINE
    (98) func_body_statement -> . return NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (102) return -> . RETURN expression
    (153) return -> . RETURN error
    (154) return -> . return error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    CALL            shift and go to state 31
    RETURN          shift and go to state 198
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    func_body_statements           shift and go to state 199
    func_body_statement            shift and go to state 186
    empty                          shift and go to state 187
    declaration                    shift and go to state 188
    assignment                     shift and go to state 189
    convert                        shift and go to state 190
    digitize                       shift and go to state 191
    while                          shift and go to state 192
    until                          shift and go to state 193
    if                             shift and go to state 194
    command                        shift and go to state 195
    function_call                  shift and go to state 196
    return                         shift and go to state 197
    variant                        shift and go to state 16

state 150

    (110) varsize -> varsize error .

    error           reduce using rule 110 (varsize -> varsize error .)
    ASSIGNMENT      reduce using rule 110 (varsize -> varsize error .)
    NEWLINE         reduce using rule 110 (varsize -> varsize error .)
    PLUS            reduce using rule 110 (varsize -> varsize error .)
    VARIANT         reduce using rule 110 (varsize -> varsize error .)
    CONVERT         reduce using rule 110 (varsize -> varsize error .)
    DIGITIZE        reduce using rule 110 (varsize -> varsize error .)
    WHILE           reduce using rule 110 (varsize -> varsize error .)
    UNTIL           reduce using rule 110 (varsize -> varsize error .)
    IFLESS          reduce using rule 110 (varsize -> varsize error .)
    IFNLESS         reduce using rule 110 (varsize -> varsize error .)
    IFZERO          reduce using rule 110 (varsize -> varsize error .)
    IFNZERO         reduce using rule 110 (varsize -> varsize error .)
    IFHIGH          reduce using rule 110 (varsize -> varsize error .)
    IFNHIGH         reduce using rule 110 (varsize -> varsize error .)
    COMMAND         reduce using rule 110 (varsize -> varsize error .)
    FUNC            reduce using rule 110 (varsize -> varsize error .)
    CALL            reduce using rule 110 (varsize -> varsize error .)
    NAME            reduce using rule 110 (varsize -> varsize error .)
    PARAM           reduce using rule 110 (varsize -> varsize error .)
    COMMA           reduce using rule 110 (varsize -> varsize error .)
    RSQBRACKET      reduce using rule 110 (varsize -> varsize error .)


state 151

    (22) varsize -> LSQBRACKET decimal_expression . RSQBRACKET
    (23) varsize -> LSQBRACKET decimal_expression . COMMA decimal_expression RSQBRACKET
    (108) varsize -> LSQBRACKET decimal_expression . COMMA error RSQBRACKET
    (58) dec_math_expression -> decimal_expression . PLUS decimal_expression

    RSQBRACKET      shift and go to state 200
    COMMA           shift and go to state 201
    PLUS            shift and go to state 131


state 152

    (24) varsize -> LSQBRACKET RSQBRACKET .

    error           reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    ASSIGNMENT      reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    NEWLINE         reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    PLUS            reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    VARIANT         reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    CONVERT         reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    DIGITIZE        reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    WHILE           reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    UNTIL           reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    IFLESS          reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    IFNLESS         reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    IFZERO          reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    IFNZERO         reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    IFHIGH          reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    IFNHIGH         reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    COMMAND         reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    FUNC            reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    CALL            reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    NAME            reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    PARAM           reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    COMMA           reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    RSQBRACKET      reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)


state 153

    (106) varsize -> LSQBRACKET error . RSQBRACKET
    (107) varsize -> LSQBRACKET error . COMMA decimal_expression RSQBRACKET
    (109) varsize -> LSQBRACKET error . COMMA error RSQBRACKET

    RSQBRACKET      shift and go to state 202
    COMMA           shift and go to state 203


state 154

    (100) function_call -> CALL NAME expression .
    (54) math_expression -> expression . PLUS expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 100 (function_call -> CALL NAME expression .)
    VARIANT         reduce using rule 100 (function_call -> CALL NAME expression .)
    error           reduce using rule 100 (function_call -> CALL NAME expression .)
    CONVERT         reduce using rule 100 (function_call -> CALL NAME expression .)
    DIGITIZE        reduce using rule 100 (function_call -> CALL NAME expression .)
    WHILE           reduce using rule 100 (function_call -> CALL NAME expression .)
    UNTIL           reduce using rule 100 (function_call -> CALL NAME expression .)
    IFLESS          reduce using rule 100 (function_call -> CALL NAME expression .)
    IFNLESS         reduce using rule 100 (function_call -> CALL NAME expression .)
    IFZERO          reduce using rule 100 (function_call -> CALL NAME expression .)
    IFNZERO         reduce using rule 100 (function_call -> CALL NAME expression .)
    IFHIGH          reduce using rule 100 (function_call -> CALL NAME expression .)
    IFNHIGH         reduce using rule 100 (function_call -> CALL NAME expression .)
    COMMAND         reduce using rule 100 (function_call -> CALL NAME expression .)
    FUNC            reduce using rule 100 (function_call -> CALL NAME expression .)
    CALL            reduce using rule 100 (function_call -> CALL NAME expression .)
    NAME            reduce using rule 100 (function_call -> CALL NAME expression .)
    PARAM           reduce using rule 100 (function_call -> CALL NAME expression .)
    COMMA           reduce using rule 100 (function_call -> CALL NAME expression .)
    RSQBRACKET      reduce using rule 100 (function_call -> CALL NAME expression .)
    PLUS            shift and go to state 158

  ! PLUS            [ reduce using rule 100 (function_call -> CALL NAME expression .) ]


state 155

    (17) declaration -> VARIANT variant ASSIGNMENT initialization .

    NEWLINE         reduce using rule 17 (declaration -> VARIANT variant ASSIGNMENT initialization .)
    error           reduce using rule 17 (declaration -> VARIANT variant ASSIGNMENT initialization .)


state 156

    (104) declaration -> VARIANT variant ASSIGNMENT error .

    NEWLINE         reduce using rule 104 (declaration -> VARIANT variant ASSIGNMENT error .)
    error           reduce using rule 104 (declaration -> VARIANT variant ASSIGNMENT error .)


state 157

    (25) initialization -> LBRACE . init_lists RBRACE
    (26) init_lists -> . init_lists init_list
    (27) init_lists -> . init_list
    (28) init_list -> . LBRACE inits RBRACE
    (29) init_list -> . LBRACE RBRACE

    LBRACE          shift and go to state 204

    init_lists                     shift and go to state 205
    init_list                      shift and go to state 206

state 158

    (54) math_expression -> expression PLUS . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variant
    (41) expression -> . function_call
    (54) math_expression -> . expression PLUS expression
    (55) math_expression -> . MINUS expression
    (64) const -> . bool_const
    (65) const -> . decimal_const
    (66) const -> . string_const
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (68) bool_const -> . TRUE
    (69) bool_const -> . FALSE
    (67) decimal_const -> . DECIMAL
    (70) string_const -> . LETTERS

    MINUS           shift and go to state 114
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    DECIMAL         shift and go to state 82
    LETTERS         shift and go to state 100

    expression                     shift and go to state 207
    math_expression                shift and go to state 111
    const                          shift and go to state 112
    variant                        shift and go to state 108
    function_call                  shift and go to state 113
    bool_const                     shift and go to state 115
    decimal_const                  shift and go to state 116
    string_const                   shift and go to state 117

state 159

    (55) math_expression -> MINUS expression .
    (54) math_expression -> expression . PLUS expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 55 (math_expression -> MINUS expression .)
    VARIANT         reduce using rule 55 (math_expression -> MINUS expression .)
    error           reduce using rule 55 (math_expression -> MINUS expression .)
    CONVERT         reduce using rule 55 (math_expression -> MINUS expression .)
    DIGITIZE        reduce using rule 55 (math_expression -> MINUS expression .)
    WHILE           reduce using rule 55 (math_expression -> MINUS expression .)
    UNTIL           reduce using rule 55 (math_expression -> MINUS expression .)
    IFLESS          reduce using rule 55 (math_expression -> MINUS expression .)
    IFNLESS         reduce using rule 55 (math_expression -> MINUS expression .)
    IFZERO          reduce using rule 55 (math_expression -> MINUS expression .)
    IFNZERO         reduce using rule 55 (math_expression -> MINUS expression .)
    IFHIGH          reduce using rule 55 (math_expression -> MINUS expression .)
    IFNHIGH         reduce using rule 55 (math_expression -> MINUS expression .)
    COMMAND         reduce using rule 55 (math_expression -> MINUS expression .)
    FUNC            reduce using rule 55 (math_expression -> MINUS expression .)
    CALL            reduce using rule 55 (math_expression -> MINUS expression .)
    NAME            reduce using rule 55 (math_expression -> MINUS expression .)
    PARAM           reduce using rule 55 (math_expression -> MINUS expression .)
    COMMA           reduce using rule 55 (math_expression -> MINUS expression .)
    RSQBRACKET      reduce using rule 55 (math_expression -> MINUS expression .)
    PLUS            shift and go to state 158

  ! PLUS            [ reduce using rule 55 (math_expression -> MINUS expression .) ]


state 160

    (72) convert -> CONVERT type TO type . variant
    (113) convert -> CONVERT type TO type . error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    error           shift and go to state 209
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    variant                        shift and go to state 208

state 161

    (114) convert -> CONVERT type TO error .

    NEWLINE         reduce using rule 114 (convert -> CONVERT type TO error .)
    error           reduce using rule 114 (convert -> CONVERT type TO error .)


state 162

    (77) while -> WHILE bool_expression NEWLINE statements . ENDW
    (123) while -> WHILE bool_expression NEWLINE statements . error
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDW            shift and go to state 210
    error           shift and go to state 211
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 163

    (124) while -> WHILE bool_expression statements ENDW .

    NEWLINE         reduce using rule 124 (while -> WHILE bool_expression statements ENDW .)
    error           reduce using rule 124 (while -> WHILE bool_expression statements ENDW .)


state 164

    (60) bool_math_expression -> bool_expression PLUS bool_expression .
    (60) bool_math_expression -> bool_expression . PLUS bool_expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 60 (bool_math_expression -> bool_expression PLUS bool_expression .)
    VARIANT         reduce using rule 60 (bool_math_expression -> bool_expression PLUS bool_expression .)
    error           reduce using rule 60 (bool_math_expression -> bool_expression PLUS bool_expression .)
    CONVERT         reduce using rule 60 (bool_math_expression -> bool_expression PLUS bool_expression .)
    DIGITIZE        reduce using rule 60 (bool_math_expression -> bool_expression PLUS bool_expression .)
    WHILE           reduce using rule 60 (bool_math_expression -> bool_expression PLUS bool_expression .)
    UNTIL           reduce using rule 60 (bool_math_expression -> bool_expression PLUS bool_expression .)
    IFLESS          reduce using rule 60 (bool_math_expression -> bool_expression PLUS bool_expression .)
    IFNLESS         reduce using rule 60 (bool_math_expression -> bool_expression PLUS bool_expression .)
    IFZERO          reduce using rule 60 (bool_math_expression -> bool_expression PLUS bool_expression .)
    IFNZERO         reduce using rule 60 (bool_math_expression -> bool_expression PLUS bool_expression .)
    IFHIGH          reduce using rule 60 (bool_math_expression -> bool_expression PLUS bool_expression .)
    IFNHIGH         reduce using rule 60 (bool_math_expression -> bool_expression PLUS bool_expression .)
    COMMAND         reduce using rule 60 (bool_math_expression -> bool_expression PLUS bool_expression .)
    FUNC            reduce using rule 60 (bool_math_expression -> bool_expression PLUS bool_expression .)
    CALL            reduce using rule 60 (bool_math_expression -> bool_expression PLUS bool_expression .)
    NAME            reduce using rule 60 (bool_math_expression -> bool_expression PLUS bool_expression .)
    PARAM           reduce using rule 60 (bool_math_expression -> bool_expression PLUS bool_expression .)
    PLUS            shift and go to state 124

  ! PLUS            [ reduce using rule 60 (bool_math_expression -> bool_expression PLUS bool_expression .) ]


state 165

    (122) while -> WHILE error NEWLINE statements . ENDW
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDW            shift and go to state 212
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 166

    (78) until -> UNTIL bool_expression NEWLINE statements . ENDU
    (127) until -> UNTIL bool_expression NEWLINE statements . error
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDU            shift and go to state 213
    error           shift and go to state 214
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 167

    (128) until -> UNTIL bool_expression statements ENDU .

    NEWLINE         reduce using rule 128 (until -> UNTIL bool_expression statements ENDU .)
    error           reduce using rule 128 (until -> UNTIL bool_expression statements ENDU .)


state 168

    (126) until -> UNTIL error NEWLINE statements . ENDU
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDU            shift and go to state 215
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 169

    (79) if -> IFLESS decimal_expression COMMA decimal_expression . NEWLINE statements ENDIF
    (136) if -> IFLESS decimal_expression COMMA decimal_expression . NEWLINE statements error
    (142) if -> IFLESS decimal_expression COMMA decimal_expression . statements ENDIF
    (58) dec_math_expression -> decimal_expression . PLUS decimal_expression
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 216
    PLUS            shift and go to state 131
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

  ! NEWLINE         [ reduce using rule 15 (empty -> .) ]

    statements                     shift and go to state 217
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 170

    (58) dec_math_expression -> decimal_expression PLUS decimal_expression .
    (58) dec_math_expression -> decimal_expression . PLUS decimal_expression

  ! shift/reduce conflict for PLUS resolved as shift
    COMMA           reduce using rule 58 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    NEWLINE         reduce using rule 58 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    VARIANT         reduce using rule 58 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    error           reduce using rule 58 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    CONVERT         reduce using rule 58 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    DIGITIZE        reduce using rule 58 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    WHILE           reduce using rule 58 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    UNTIL           reduce using rule 58 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    IFLESS          reduce using rule 58 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    IFNLESS         reduce using rule 58 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    IFZERO          reduce using rule 58 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    IFNZERO         reduce using rule 58 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    IFHIGH          reduce using rule 58 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    IFNHIGH         reduce using rule 58 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    COMMAND         reduce using rule 58 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    FUNC            reduce using rule 58 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    CALL            reduce using rule 58 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    NAME            reduce using rule 58 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    PARAM           reduce using rule 58 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    RSQBRACKET      reduce using rule 58 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    PLUS            shift and go to state 131

  ! PLUS            [ reduce using rule 58 (dec_math_expression -> decimal_expression PLUS decimal_expression .) ]


state 171

    (130) if -> IFLESS error NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 218
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 172

    (80) if -> IFNLESS decimal_expression COMMA decimal_expression . NEWLINE statements ENDIF
    (137) if -> IFNLESS decimal_expression COMMA decimal_expression . NEWLINE statements error
    (143) if -> IFNLESS decimal_expression COMMA decimal_expression . statements ENDIF
    (58) dec_math_expression -> decimal_expression . PLUS decimal_expression
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 219
    PLUS            shift and go to state 131
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

  ! NEWLINE         [ reduce using rule 15 (empty -> .) ]

    statements                     shift and go to state 220
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 173

    (131) if -> IFNLESS error NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 221
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 174

    (81) if -> IFZERO decimal_expression NEWLINE statements . ENDIF
    (138) if -> IFZERO decimal_expression NEWLINE statements . error
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 222
    error           shift and go to state 223
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 175

    (144) if -> IFZERO decimal_expression statements ENDIF .

    NEWLINE         reduce using rule 144 (if -> IFZERO decimal_expression statements ENDIF .)
    error           reduce using rule 144 (if -> IFZERO decimal_expression statements ENDIF .)


state 176

    (132) if -> IFZERO error NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 224
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 177

    (82) if -> IFNZERO decimal_expression NEWLINE statements . ENDIF
    (139) if -> IFNZERO decimal_expression NEWLINE statements . error
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 225
    error           shift and go to state 226
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 178

    (145) if -> IFNZERO decimal_expression statements ENDIF .

    NEWLINE         reduce using rule 145 (if -> IFNZERO decimal_expression statements ENDIF .)
    error           reduce using rule 145 (if -> IFNZERO decimal_expression statements ENDIF .)


state 179

    (133) if -> IFNZERO error NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 227
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 180

    (83) if -> IFHIGH decimal_expression COMMA decimal_expression . NEWLINE statements ENDIF
    (140) if -> IFHIGH decimal_expression COMMA decimal_expression . NEWLINE statements error
    (146) if -> IFHIGH decimal_expression COMMA decimal_expression . statements ENDIF
    (58) dec_math_expression -> decimal_expression . PLUS decimal_expression
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 228
    PLUS            shift and go to state 131
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

  ! NEWLINE         [ reduce using rule 15 (empty -> .) ]

    statements                     shift and go to state 229
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 181

    (134) if -> IFHIGH error NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 230
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 182

    (84) if -> IFNHIGH decimal_expression COMMA decimal_expression . NEWLINE statements ENDIF
    (141) if -> IFNHIGH decimal_expression COMMA decimal_expression . NEWLINE statements error
    (147) if -> IFNHIGH decimal_expression COMMA decimal_expression . statements ENDIF
    (58) dec_math_expression -> decimal_expression . PLUS decimal_expression
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 231
    PLUS            shift and go to state 131
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

  ! NEWLINE         [ reduce using rule 15 (empty -> .) ]

    statements                     shift and go to state 232
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 183

    (135) if -> IFNHIGH error NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 233
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 184

    (62) string_math_expression -> string_expression PLUS string_expression .
    (62) string_math_expression -> string_expression . PLUS string_expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 62 (string_math_expression -> string_expression PLUS string_expression .)
    error           reduce using rule 62 (string_math_expression -> string_expression PLUS string_expression .)
    PLUS            shift and go to state 146

  ! PLUS            [ reduce using rule 62 (string_math_expression -> string_expression PLUS string_expression .) ]


state 185

    (99) function -> FUNC NAME NEWLINE func_body_statements . ENDFUNC
    (150) function -> FUNC NAME NEWLINE func_body_statements . error
    (86) func_body_statements -> func_body_statements . func_body_statement
    (88) func_body_statement -> . empty NEWLINE
    (89) func_body_statement -> . declaration NEWLINE
    (90) func_body_statement -> . assignment NEWLINE
    (91) func_body_statement -> . convert NEWLINE
    (92) func_body_statement -> . digitize NEWLINE
    (93) func_body_statement -> . while NEWLINE
    (94) func_body_statement -> . until NEWLINE
    (95) func_body_statement -> . if NEWLINE
    (96) func_body_statement -> . command NEWLINE
    (97) func_body_statement -> . function_call NEWLINE
    (98) func_body_statement -> . return NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (102) return -> . RETURN expression
    (153) return -> . RETURN error
    (154) return -> . return error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDFUNC         shift and go to state 234
    error           shift and go to state 235
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    CALL            shift and go to state 31
    RETURN          shift and go to state 198
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    func_body_statement            shift and go to state 236
    empty                          shift and go to state 187
    declaration                    shift and go to state 188
    assignment                     shift and go to state 189
    convert                        shift and go to state 190
    digitize                       shift and go to state 191
    while                          shift and go to state 192
    until                          shift and go to state 193
    if                             shift and go to state 194
    command                        shift and go to state 195
    function_call                  shift and go to state 196
    return                         shift and go to state 197
    variant                        shift and go to state 16

state 186

    (87) func_body_statements -> func_body_statement .

    ENDFUNC         reduce using rule 87 (func_body_statements -> func_body_statement .)
    error           reduce using rule 87 (func_body_statements -> func_body_statement .)
    VARIANT         reduce using rule 87 (func_body_statements -> func_body_statement .)
    CONVERT         reduce using rule 87 (func_body_statements -> func_body_statement .)
    DIGITIZE        reduce using rule 87 (func_body_statements -> func_body_statement .)
    WHILE           reduce using rule 87 (func_body_statements -> func_body_statement .)
    UNTIL           reduce using rule 87 (func_body_statements -> func_body_statement .)
    IFLESS          reduce using rule 87 (func_body_statements -> func_body_statement .)
    IFNLESS         reduce using rule 87 (func_body_statements -> func_body_statement .)
    IFZERO          reduce using rule 87 (func_body_statements -> func_body_statement .)
    IFNZERO         reduce using rule 87 (func_body_statements -> func_body_statement .)
    IFHIGH          reduce using rule 87 (func_body_statements -> func_body_statement .)
    IFNHIGH         reduce using rule 87 (func_body_statements -> func_body_statement .)
    COMMAND         reduce using rule 87 (func_body_statements -> func_body_statement .)
    CALL            reduce using rule 87 (func_body_statements -> func_body_statement .)
    RETURN          reduce using rule 87 (func_body_statements -> func_body_statement .)
    NAME            reduce using rule 87 (func_body_statements -> func_body_statement .)
    PARAM           reduce using rule 87 (func_body_statements -> func_body_statement .)
    NEWLINE         reduce using rule 87 (func_body_statements -> func_body_statement .)


state 187

    (88) func_body_statement -> empty . NEWLINE

    NEWLINE         shift and go to state 237


state 188

    (89) func_body_statement -> declaration . NEWLINE
    (105) declaration -> declaration . error

    NEWLINE         shift and go to state 238
    error           shift and go to state 36


state 189

    (90) func_body_statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 239


state 190

    (91) func_body_statement -> convert . NEWLINE
    (117) convert -> convert . error

    NEWLINE         shift and go to state 240
    error           shift and go to state 39


state 191

    (92) func_body_statement -> digitize . NEWLINE
    (119) digitize -> digitize . error

    NEWLINE         shift and go to state 241
    error           shift and go to state 41


state 192

    (93) func_body_statement -> while . NEWLINE
    (125) while -> while . error

    NEWLINE         shift and go to state 242
    error           shift and go to state 43


state 193

    (94) func_body_statement -> until . NEWLINE
    (129) until -> until . error

    NEWLINE         shift and go to state 243
    error           shift and go to state 45


state 194

    (95) func_body_statement -> if . NEWLINE
    (148) if -> if . error

    NEWLINE         shift and go to state 244
    error           shift and go to state 47


state 195

    (96) func_body_statement -> command . NEWLINE
    (121) command -> command . error

    NEWLINE         shift and go to state 245
    error           shift and go to state 49


state 196

    (97) func_body_statement -> function_call . NEWLINE

    NEWLINE         shift and go to state 246


state 197

    (98) func_body_statement -> return . NEWLINE
    (154) return -> return . error

    NEWLINE         shift and go to state 247
    error           shift and go to state 248


state 198

    (102) return -> RETURN . expression
    (153) return -> RETURN . error
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variant
    (41) expression -> . function_call
    (54) math_expression -> . expression PLUS expression
    (55) math_expression -> . MINUS expression
    (64) const -> . bool_const
    (65) const -> . decimal_const
    (66) const -> . string_const
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (68) bool_const -> . TRUE
    (69) bool_const -> . FALSE
    (67) decimal_const -> . DECIMAL
    (70) string_const -> . LETTERS

    error           shift and go to state 250
    MINUS           shift and go to state 114
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    DECIMAL         shift and go to state 82
    LETTERS         shift and go to state 100

    expression                     shift and go to state 249
    math_expression                shift and go to state 111
    const                          shift and go to state 112
    variant                        shift and go to state 108
    function_call                  shift and go to state 113
    bool_const                     shift and go to state 115
    decimal_const                  shift and go to state 116
    string_const                   shift and go to state 117

state 199

    (149) function -> FUNC error NEWLINE func_body_statements . ENDFUNC
    (151) function -> FUNC error NEWLINE func_body_statements . error
    (86) func_body_statements -> func_body_statements . func_body_statement
    (88) func_body_statement -> . empty NEWLINE
    (89) func_body_statement -> . declaration NEWLINE
    (90) func_body_statement -> . assignment NEWLINE
    (91) func_body_statement -> . convert NEWLINE
    (92) func_body_statement -> . digitize NEWLINE
    (93) func_body_statement -> . while NEWLINE
    (94) func_body_statement -> . until NEWLINE
    (95) func_body_statement -> . if NEWLINE
    (96) func_body_statement -> . command NEWLINE
    (97) func_body_statement -> . function_call NEWLINE
    (98) func_body_statement -> . return NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (102) return -> . RETURN expression
    (153) return -> . RETURN error
    (154) return -> . return error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDFUNC         shift and go to state 252
    error           shift and go to state 251
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    CALL            shift and go to state 31
    RETURN          shift and go to state 198
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    func_body_statement            shift and go to state 236
    empty                          shift and go to state 187
    declaration                    shift and go to state 188
    assignment                     shift and go to state 189
    convert                        shift and go to state 190
    digitize                       shift and go to state 191
    while                          shift and go to state 192
    until                          shift and go to state 193
    if                             shift and go to state 194
    command                        shift and go to state 195
    function_call                  shift and go to state 196
    return                         shift and go to state 197
    variant                        shift and go to state 16

state 200

    (22) varsize -> LSQBRACKET decimal_expression RSQBRACKET .

    error           reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    ASSIGNMENT      reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    NEWLINE         reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    PLUS            reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    VARIANT         reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    CONVERT         reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    DIGITIZE        reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    WHILE           reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    UNTIL           reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    IFLESS          reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    IFNLESS         reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    IFZERO          reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    IFNZERO         reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    IFHIGH          reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    IFNHIGH         reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    COMMAND         reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    FUNC            reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    CALL            reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    NAME            reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    PARAM           reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    COMMA           reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    RSQBRACKET      reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)


state 201

    (23) varsize -> LSQBRACKET decimal_expression COMMA . decimal_expression RSQBRACKET
    (108) varsize -> LSQBRACKET decimal_expression COMMA . error RSQBRACKET
    (42) decimal_expression -> . dec_math_expression
    (43) decimal_expression -> . decimal_const
    (44) decimal_expression -> . variant
    (45) decimal_expression -> . function_call
    (58) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (59) dec_math_expression -> . MINUS decimal_expression
    (67) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    error           shift and go to state 254
    MINUS           shift and go to state 81
    DECIMAL         shift and go to state 82
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    decimal_expression             shift and go to state 253
    dec_math_expression            shift and go to state 77
    decimal_const                  shift and go to state 78
    variant                        shift and go to state 79
    function_call                  shift and go to state 80

state 202

    (106) varsize -> LSQBRACKET error RSQBRACKET .

    error           reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)
    ASSIGNMENT      reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)
    NEWLINE         reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)
    PLUS            reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)
    VARIANT         reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)
    CONVERT         reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)
    DIGITIZE        reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)
    WHILE           reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)
    UNTIL           reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)
    IFLESS          reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)
    IFNLESS         reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)
    IFZERO          reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)
    IFNZERO         reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)
    IFHIGH          reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)
    IFNHIGH         reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)
    COMMAND         reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)
    FUNC            reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)
    CALL            reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)
    NAME            reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)
    PARAM           reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)
    COMMA           reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)
    RSQBRACKET      reduce using rule 106 (varsize -> LSQBRACKET error RSQBRACKET .)


state 203

    (107) varsize -> LSQBRACKET error COMMA . decimal_expression RSQBRACKET
    (109) varsize -> LSQBRACKET error COMMA . error RSQBRACKET
    (42) decimal_expression -> . dec_math_expression
    (43) decimal_expression -> . decimal_const
    (44) decimal_expression -> . variant
    (45) decimal_expression -> . function_call
    (58) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (59) dec_math_expression -> . MINUS decimal_expression
    (67) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME

    error           shift and go to state 255
    MINUS           shift and go to state 81
    DECIMAL         shift and go to state 82
    NAME            shift and go to state 30
    PARAM           shift and go to state 32
    CALL            shift and go to state 31

    decimal_expression             shift and go to state 256
    dec_math_expression            shift and go to state 77
    decimal_const                  shift and go to state 78
    variant                        shift and go to state 79
    function_call                  shift and go to state 80

state 204

    (28) init_list -> LBRACE . inits RBRACE
    (29) init_list -> LBRACE . RBRACE
    (30) inits -> . inits init
    (31) inits -> . init
    (32) init -> . const_expressions COMMA const_expression SEMICOLON
    (33) init -> . const_expression SEMICOLON
    (34) const_expressions -> . const_expressions COMMA const_expression
    (35) const_expressions -> . const_expression
    (36) const_expression -> . const_math_expression
    (37) const_expression -> . const
    (56) const_math_expression -> . const_expression PLUS const_expression
    (57) const_math_expression -> . MINUS const_expression
    (64) const -> . bool_const
    (65) const -> . decimal_const
    (66) const -> . string_const
    (68) bool_const -> . TRUE
    (69) bool_const -> . FALSE
    (67) decimal_const -> . DECIMAL
    (70) string_const -> . LETTERS

    RBRACE          shift and go to state 258
    MINUS           shift and go to state 264
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    DECIMAL         shift and go to state 82
    LETTERS         shift and go to state 100

    inits                          shift and go to state 257
    init                           shift and go to state 259
    const_expressions              shift and go to state 260
    const_expression               shift and go to state 261
    const_math_expression          shift and go to state 262
    const                          shift and go to state 263
    bool_const                     shift and go to state 115
    decimal_const                  shift and go to state 116
    string_const                   shift and go to state 117

state 205

    (25) initialization -> LBRACE init_lists . RBRACE
    (26) init_lists -> init_lists . init_list
    (28) init_list -> . LBRACE inits RBRACE
    (29) init_list -> . LBRACE RBRACE

    RBRACE          shift and go to state 265
    LBRACE          shift and go to state 204

    init_list                      shift and go to state 266

state 206

    (27) init_lists -> init_list .

    RBRACE          reduce using rule 27 (init_lists -> init_list .)
    LBRACE          reduce using rule 27 (init_lists -> init_list .)


state 207

    (54) math_expression -> expression PLUS expression .
    (54) math_expression -> expression . PLUS expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 54 (math_expression -> expression PLUS expression .)
    VARIANT         reduce using rule 54 (math_expression -> expression PLUS expression .)
    error           reduce using rule 54 (math_expression -> expression PLUS expression .)
    CONVERT         reduce using rule 54 (math_expression -> expression PLUS expression .)
    DIGITIZE        reduce using rule 54 (math_expression -> expression PLUS expression .)
    WHILE           reduce using rule 54 (math_expression -> expression PLUS expression .)
    UNTIL           reduce using rule 54 (math_expression -> expression PLUS expression .)
    IFLESS          reduce using rule 54 (math_expression -> expression PLUS expression .)
    IFNLESS         reduce using rule 54 (math_expression -> expression PLUS expression .)
    IFZERO          reduce using rule 54 (math_expression -> expression PLUS expression .)
    IFNZERO         reduce using rule 54 (math_expression -> expression PLUS expression .)
    IFHIGH          reduce using rule 54 (math_expression -> expression PLUS expression .)
    IFNHIGH         reduce using rule 54 (math_expression -> expression PLUS expression .)
    COMMAND         reduce using rule 54 (math_expression -> expression PLUS expression .)
    FUNC            reduce using rule 54 (math_expression -> expression PLUS expression .)
    CALL            reduce using rule 54 (math_expression -> expression PLUS expression .)
    NAME            reduce using rule 54 (math_expression -> expression PLUS expression .)
    PARAM           reduce using rule 54 (math_expression -> expression PLUS expression .)
    COMMA           reduce using rule 54 (math_expression -> expression PLUS expression .)
    RSQBRACKET      reduce using rule 54 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 158

  ! PLUS            [ reduce using rule 54 (math_expression -> expression PLUS expression .) ]


state 208

    (72) convert -> CONVERT type TO type variant .

    NEWLINE         reduce using rule 72 (convert -> CONVERT type TO type variant .)
    error           reduce using rule 72 (convert -> CONVERT type TO type variant .)


state 209

    (113) convert -> CONVERT type TO type error .

    NEWLINE         reduce using rule 113 (convert -> CONVERT type TO type error .)
    error           reduce using rule 113 (convert -> CONVERT type TO type error .)


state 210

    (77) while -> WHILE bool_expression NEWLINE statements ENDW .

    NEWLINE         reduce using rule 77 (while -> WHILE bool_expression NEWLINE statements ENDW .)
    error           reduce using rule 77 (while -> WHILE bool_expression NEWLINE statements ENDW .)


state 211

    (123) while -> WHILE bool_expression NEWLINE statements error .
    (112) assignment -> error . ASSIGNMENT expression

    NEWLINE         reduce using rule 123 (while -> WHILE bool_expression NEWLINE statements error .)
    error           reduce using rule 123 (while -> WHILE bool_expression NEWLINE statements error .)
    ASSIGNMENT      shift and go to state 56


state 212

    (122) while -> WHILE error NEWLINE statements ENDW .

    NEWLINE         reduce using rule 122 (while -> WHILE error NEWLINE statements ENDW .)
    error           reduce using rule 122 (while -> WHILE error NEWLINE statements ENDW .)


state 213

    (78) until -> UNTIL bool_expression NEWLINE statements ENDU .

    NEWLINE         reduce using rule 78 (until -> UNTIL bool_expression NEWLINE statements ENDU .)
    error           reduce using rule 78 (until -> UNTIL bool_expression NEWLINE statements ENDU .)


state 214

    (127) until -> UNTIL bool_expression NEWLINE statements error .
    (112) assignment -> error . ASSIGNMENT expression

    NEWLINE         reduce using rule 127 (until -> UNTIL bool_expression NEWLINE statements error .)
    error           reduce using rule 127 (until -> UNTIL bool_expression NEWLINE statements error .)
    ASSIGNMENT      shift and go to state 56


state 215

    (126) until -> UNTIL error NEWLINE statements ENDU .

    NEWLINE         reduce using rule 126 (until -> UNTIL error NEWLINE statements ENDU .)
    error           reduce using rule 126 (until -> UNTIL error NEWLINE statements ENDU .)


state 216

    (79) if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE . statements ENDIF
    (136) if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE . statements error
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statements                     shift and go to state 267
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 217

    (142) if -> IFLESS decimal_expression COMMA decimal_expression statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 268
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 218

    (130) if -> IFLESS error NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 130 (if -> IFLESS error NEWLINE statements ENDIF .)
    error           reduce using rule 130 (if -> IFLESS error NEWLINE statements ENDIF .)


state 219

    (80) if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE . statements ENDIF
    (137) if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE . statements error
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statements                     shift and go to state 269
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 220

    (143) if -> IFNLESS decimal_expression COMMA decimal_expression statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 270
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 221

    (131) if -> IFNLESS error NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 131 (if -> IFNLESS error NEWLINE statements ENDIF .)
    error           reduce using rule 131 (if -> IFNLESS error NEWLINE statements ENDIF .)


state 222

    (81) if -> IFZERO decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 81 (if -> IFZERO decimal_expression NEWLINE statements ENDIF .)
    error           reduce using rule 81 (if -> IFZERO decimal_expression NEWLINE statements ENDIF .)


state 223

    (138) if -> IFZERO decimal_expression NEWLINE statements error .
    (112) assignment -> error . ASSIGNMENT expression

    NEWLINE         reduce using rule 138 (if -> IFZERO decimal_expression NEWLINE statements error .)
    error           reduce using rule 138 (if -> IFZERO decimal_expression NEWLINE statements error .)
    ASSIGNMENT      shift and go to state 56


state 224

    (132) if -> IFZERO error NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 132 (if -> IFZERO error NEWLINE statements ENDIF .)
    error           reduce using rule 132 (if -> IFZERO error NEWLINE statements ENDIF .)


state 225

    (82) if -> IFNZERO decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 82 (if -> IFNZERO decimal_expression NEWLINE statements ENDIF .)
    error           reduce using rule 82 (if -> IFNZERO decimal_expression NEWLINE statements ENDIF .)


state 226

    (139) if -> IFNZERO decimal_expression NEWLINE statements error .
    (112) assignment -> error . ASSIGNMENT expression

    NEWLINE         reduce using rule 139 (if -> IFNZERO decimal_expression NEWLINE statements error .)
    error           reduce using rule 139 (if -> IFNZERO decimal_expression NEWLINE statements error .)
    ASSIGNMENT      shift and go to state 56


state 227

    (133) if -> IFNZERO error NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 133 (if -> IFNZERO error NEWLINE statements ENDIF .)
    error           reduce using rule 133 (if -> IFNZERO error NEWLINE statements ENDIF .)


state 228

    (83) if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE . statements ENDIF
    (140) if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE . statements error
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statements                     shift and go to state 271
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 229

    (146) if -> IFHIGH decimal_expression COMMA decimal_expression statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 272
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 230

    (134) if -> IFHIGH error NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 134 (if -> IFHIGH error NEWLINE statements ENDIF .)
    error           reduce using rule 134 (if -> IFHIGH error NEWLINE statements ENDIF .)


state 231

    (84) if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE . statements ENDIF
    (141) if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE . statements error
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statements                     shift and go to state 273
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 232

    (147) if -> IFNHIGH decimal_expression COMMA decimal_expression statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 274
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 233

    (135) if -> IFNHIGH error NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 135 (if -> IFNHIGH error NEWLINE statements ENDIF .)
    error           reduce using rule 135 (if -> IFNHIGH error NEWLINE statements ENDIF .)


state 234

    (99) function -> FUNC NAME NEWLINE func_body_statements ENDFUNC .

    NEWLINE         reduce using rule 99 (function -> FUNC NAME NEWLINE func_body_statements ENDFUNC .)
    error           reduce using rule 99 (function -> FUNC NAME NEWLINE func_body_statements ENDFUNC .)


state 235

    (150) function -> FUNC NAME NEWLINE func_body_statements error .
    (112) assignment -> error . ASSIGNMENT expression

    NEWLINE         reduce using rule 150 (function -> FUNC NAME NEWLINE func_body_statements error .)
    error           reduce using rule 150 (function -> FUNC NAME NEWLINE func_body_statements error .)
    ASSIGNMENT      shift and go to state 56


state 236

    (86) func_body_statements -> func_body_statements func_body_statement .

    ENDFUNC         reduce using rule 86 (func_body_statements -> func_body_statements func_body_statement .)
    error           reduce using rule 86 (func_body_statements -> func_body_statements func_body_statement .)
    VARIANT         reduce using rule 86 (func_body_statements -> func_body_statements func_body_statement .)
    CONVERT         reduce using rule 86 (func_body_statements -> func_body_statements func_body_statement .)
    DIGITIZE        reduce using rule 86 (func_body_statements -> func_body_statements func_body_statement .)
    WHILE           reduce using rule 86 (func_body_statements -> func_body_statements func_body_statement .)
    UNTIL           reduce using rule 86 (func_body_statements -> func_body_statements func_body_statement .)
    IFLESS          reduce using rule 86 (func_body_statements -> func_body_statements func_body_statement .)
    IFNLESS         reduce using rule 86 (func_body_statements -> func_body_statements func_body_statement .)
    IFZERO          reduce using rule 86 (func_body_statements -> func_body_statements func_body_statement .)
    IFNZERO         reduce using rule 86 (func_body_statements -> func_body_statements func_body_statement .)
    IFHIGH          reduce using rule 86 (func_body_statements -> func_body_statements func_body_statement .)
    IFNHIGH         reduce using rule 86 (func_body_statements -> func_body_statements func_body_statement .)
    COMMAND         reduce using rule 86 (func_body_statements -> func_body_statements func_body_statement .)
    CALL            reduce using rule 86 (func_body_statements -> func_body_statements func_body_statement .)
    RETURN          reduce using rule 86 (func_body_statements -> func_body_statements func_body_statement .)
    NAME            reduce using rule 86 (func_body_statements -> func_body_statements func_body_statement .)
    PARAM           reduce using rule 86 (func_body_statements -> func_body_statements func_body_statement .)
    NEWLINE         reduce using rule 86 (func_body_statements -> func_body_statements func_body_statement .)


state 237

    (88) func_body_statement -> empty NEWLINE .

    ENDFUNC         reduce using rule 88 (func_body_statement -> empty NEWLINE .)
    error           reduce using rule 88 (func_body_statement -> empty NEWLINE .)
    VARIANT         reduce using rule 88 (func_body_statement -> empty NEWLINE .)
    CONVERT         reduce using rule 88 (func_body_statement -> empty NEWLINE .)
    DIGITIZE        reduce using rule 88 (func_body_statement -> empty NEWLINE .)
    WHILE           reduce using rule 88 (func_body_statement -> empty NEWLINE .)
    UNTIL           reduce using rule 88 (func_body_statement -> empty NEWLINE .)
    IFLESS          reduce using rule 88 (func_body_statement -> empty NEWLINE .)
    IFNLESS         reduce using rule 88 (func_body_statement -> empty NEWLINE .)
    IFZERO          reduce using rule 88 (func_body_statement -> empty NEWLINE .)
    IFNZERO         reduce using rule 88 (func_body_statement -> empty NEWLINE .)
    IFHIGH          reduce using rule 88 (func_body_statement -> empty NEWLINE .)
    IFNHIGH         reduce using rule 88 (func_body_statement -> empty NEWLINE .)
    COMMAND         reduce using rule 88 (func_body_statement -> empty NEWLINE .)
    CALL            reduce using rule 88 (func_body_statement -> empty NEWLINE .)
    RETURN          reduce using rule 88 (func_body_statement -> empty NEWLINE .)
    NAME            reduce using rule 88 (func_body_statement -> empty NEWLINE .)
    PARAM           reduce using rule 88 (func_body_statement -> empty NEWLINE .)
    NEWLINE         reduce using rule 88 (func_body_statement -> empty NEWLINE .)


state 238

    (89) func_body_statement -> declaration NEWLINE .

    ENDFUNC         reduce using rule 89 (func_body_statement -> declaration NEWLINE .)
    error           reduce using rule 89 (func_body_statement -> declaration NEWLINE .)
    VARIANT         reduce using rule 89 (func_body_statement -> declaration NEWLINE .)
    CONVERT         reduce using rule 89 (func_body_statement -> declaration NEWLINE .)
    DIGITIZE        reduce using rule 89 (func_body_statement -> declaration NEWLINE .)
    WHILE           reduce using rule 89 (func_body_statement -> declaration NEWLINE .)
    UNTIL           reduce using rule 89 (func_body_statement -> declaration NEWLINE .)
    IFLESS          reduce using rule 89 (func_body_statement -> declaration NEWLINE .)
    IFNLESS         reduce using rule 89 (func_body_statement -> declaration NEWLINE .)
    IFZERO          reduce using rule 89 (func_body_statement -> declaration NEWLINE .)
    IFNZERO         reduce using rule 89 (func_body_statement -> declaration NEWLINE .)
    IFHIGH          reduce using rule 89 (func_body_statement -> declaration NEWLINE .)
    IFNHIGH         reduce using rule 89 (func_body_statement -> declaration NEWLINE .)
    COMMAND         reduce using rule 89 (func_body_statement -> declaration NEWLINE .)
    CALL            reduce using rule 89 (func_body_statement -> declaration NEWLINE .)
    RETURN          reduce using rule 89 (func_body_statement -> declaration NEWLINE .)
    NAME            reduce using rule 89 (func_body_statement -> declaration NEWLINE .)
    PARAM           reduce using rule 89 (func_body_statement -> declaration NEWLINE .)
    NEWLINE         reduce using rule 89 (func_body_statement -> declaration NEWLINE .)


state 239

    (90) func_body_statement -> assignment NEWLINE .

    ENDFUNC         reduce using rule 90 (func_body_statement -> assignment NEWLINE .)
    error           reduce using rule 90 (func_body_statement -> assignment NEWLINE .)
    VARIANT         reduce using rule 90 (func_body_statement -> assignment NEWLINE .)
    CONVERT         reduce using rule 90 (func_body_statement -> assignment NEWLINE .)
    DIGITIZE        reduce using rule 90 (func_body_statement -> assignment NEWLINE .)
    WHILE           reduce using rule 90 (func_body_statement -> assignment NEWLINE .)
    UNTIL           reduce using rule 90 (func_body_statement -> assignment NEWLINE .)
    IFLESS          reduce using rule 90 (func_body_statement -> assignment NEWLINE .)
    IFNLESS         reduce using rule 90 (func_body_statement -> assignment NEWLINE .)
    IFZERO          reduce using rule 90 (func_body_statement -> assignment NEWLINE .)
    IFNZERO         reduce using rule 90 (func_body_statement -> assignment NEWLINE .)
    IFHIGH          reduce using rule 90 (func_body_statement -> assignment NEWLINE .)
    IFNHIGH         reduce using rule 90 (func_body_statement -> assignment NEWLINE .)
    COMMAND         reduce using rule 90 (func_body_statement -> assignment NEWLINE .)
    CALL            reduce using rule 90 (func_body_statement -> assignment NEWLINE .)
    RETURN          reduce using rule 90 (func_body_statement -> assignment NEWLINE .)
    NAME            reduce using rule 90 (func_body_statement -> assignment NEWLINE .)
    PARAM           reduce using rule 90 (func_body_statement -> assignment NEWLINE .)
    NEWLINE         reduce using rule 90 (func_body_statement -> assignment NEWLINE .)


state 240

    (91) func_body_statement -> convert NEWLINE .

    ENDFUNC         reduce using rule 91 (func_body_statement -> convert NEWLINE .)
    error           reduce using rule 91 (func_body_statement -> convert NEWLINE .)
    VARIANT         reduce using rule 91 (func_body_statement -> convert NEWLINE .)
    CONVERT         reduce using rule 91 (func_body_statement -> convert NEWLINE .)
    DIGITIZE        reduce using rule 91 (func_body_statement -> convert NEWLINE .)
    WHILE           reduce using rule 91 (func_body_statement -> convert NEWLINE .)
    UNTIL           reduce using rule 91 (func_body_statement -> convert NEWLINE .)
    IFLESS          reduce using rule 91 (func_body_statement -> convert NEWLINE .)
    IFNLESS         reduce using rule 91 (func_body_statement -> convert NEWLINE .)
    IFZERO          reduce using rule 91 (func_body_statement -> convert NEWLINE .)
    IFNZERO         reduce using rule 91 (func_body_statement -> convert NEWLINE .)
    IFHIGH          reduce using rule 91 (func_body_statement -> convert NEWLINE .)
    IFNHIGH         reduce using rule 91 (func_body_statement -> convert NEWLINE .)
    COMMAND         reduce using rule 91 (func_body_statement -> convert NEWLINE .)
    CALL            reduce using rule 91 (func_body_statement -> convert NEWLINE .)
    RETURN          reduce using rule 91 (func_body_statement -> convert NEWLINE .)
    NAME            reduce using rule 91 (func_body_statement -> convert NEWLINE .)
    PARAM           reduce using rule 91 (func_body_statement -> convert NEWLINE .)
    NEWLINE         reduce using rule 91 (func_body_statement -> convert NEWLINE .)


state 241

    (92) func_body_statement -> digitize NEWLINE .

    ENDFUNC         reduce using rule 92 (func_body_statement -> digitize NEWLINE .)
    error           reduce using rule 92 (func_body_statement -> digitize NEWLINE .)
    VARIANT         reduce using rule 92 (func_body_statement -> digitize NEWLINE .)
    CONVERT         reduce using rule 92 (func_body_statement -> digitize NEWLINE .)
    DIGITIZE        reduce using rule 92 (func_body_statement -> digitize NEWLINE .)
    WHILE           reduce using rule 92 (func_body_statement -> digitize NEWLINE .)
    UNTIL           reduce using rule 92 (func_body_statement -> digitize NEWLINE .)
    IFLESS          reduce using rule 92 (func_body_statement -> digitize NEWLINE .)
    IFNLESS         reduce using rule 92 (func_body_statement -> digitize NEWLINE .)
    IFZERO          reduce using rule 92 (func_body_statement -> digitize NEWLINE .)
    IFNZERO         reduce using rule 92 (func_body_statement -> digitize NEWLINE .)
    IFHIGH          reduce using rule 92 (func_body_statement -> digitize NEWLINE .)
    IFNHIGH         reduce using rule 92 (func_body_statement -> digitize NEWLINE .)
    COMMAND         reduce using rule 92 (func_body_statement -> digitize NEWLINE .)
    CALL            reduce using rule 92 (func_body_statement -> digitize NEWLINE .)
    RETURN          reduce using rule 92 (func_body_statement -> digitize NEWLINE .)
    NAME            reduce using rule 92 (func_body_statement -> digitize NEWLINE .)
    PARAM           reduce using rule 92 (func_body_statement -> digitize NEWLINE .)
    NEWLINE         reduce using rule 92 (func_body_statement -> digitize NEWLINE .)


state 242

    (93) func_body_statement -> while NEWLINE .

    ENDFUNC         reduce using rule 93 (func_body_statement -> while NEWLINE .)
    error           reduce using rule 93 (func_body_statement -> while NEWLINE .)
    VARIANT         reduce using rule 93 (func_body_statement -> while NEWLINE .)
    CONVERT         reduce using rule 93 (func_body_statement -> while NEWLINE .)
    DIGITIZE        reduce using rule 93 (func_body_statement -> while NEWLINE .)
    WHILE           reduce using rule 93 (func_body_statement -> while NEWLINE .)
    UNTIL           reduce using rule 93 (func_body_statement -> while NEWLINE .)
    IFLESS          reduce using rule 93 (func_body_statement -> while NEWLINE .)
    IFNLESS         reduce using rule 93 (func_body_statement -> while NEWLINE .)
    IFZERO          reduce using rule 93 (func_body_statement -> while NEWLINE .)
    IFNZERO         reduce using rule 93 (func_body_statement -> while NEWLINE .)
    IFHIGH          reduce using rule 93 (func_body_statement -> while NEWLINE .)
    IFNHIGH         reduce using rule 93 (func_body_statement -> while NEWLINE .)
    COMMAND         reduce using rule 93 (func_body_statement -> while NEWLINE .)
    CALL            reduce using rule 93 (func_body_statement -> while NEWLINE .)
    RETURN          reduce using rule 93 (func_body_statement -> while NEWLINE .)
    NAME            reduce using rule 93 (func_body_statement -> while NEWLINE .)
    PARAM           reduce using rule 93 (func_body_statement -> while NEWLINE .)
    NEWLINE         reduce using rule 93 (func_body_statement -> while NEWLINE .)


state 243

    (94) func_body_statement -> until NEWLINE .

    ENDFUNC         reduce using rule 94 (func_body_statement -> until NEWLINE .)
    error           reduce using rule 94 (func_body_statement -> until NEWLINE .)
    VARIANT         reduce using rule 94 (func_body_statement -> until NEWLINE .)
    CONVERT         reduce using rule 94 (func_body_statement -> until NEWLINE .)
    DIGITIZE        reduce using rule 94 (func_body_statement -> until NEWLINE .)
    WHILE           reduce using rule 94 (func_body_statement -> until NEWLINE .)
    UNTIL           reduce using rule 94 (func_body_statement -> until NEWLINE .)
    IFLESS          reduce using rule 94 (func_body_statement -> until NEWLINE .)
    IFNLESS         reduce using rule 94 (func_body_statement -> until NEWLINE .)
    IFZERO          reduce using rule 94 (func_body_statement -> until NEWLINE .)
    IFNZERO         reduce using rule 94 (func_body_statement -> until NEWLINE .)
    IFHIGH          reduce using rule 94 (func_body_statement -> until NEWLINE .)
    IFNHIGH         reduce using rule 94 (func_body_statement -> until NEWLINE .)
    COMMAND         reduce using rule 94 (func_body_statement -> until NEWLINE .)
    CALL            reduce using rule 94 (func_body_statement -> until NEWLINE .)
    RETURN          reduce using rule 94 (func_body_statement -> until NEWLINE .)
    NAME            reduce using rule 94 (func_body_statement -> until NEWLINE .)
    PARAM           reduce using rule 94 (func_body_statement -> until NEWLINE .)
    NEWLINE         reduce using rule 94 (func_body_statement -> until NEWLINE .)


state 244

    (95) func_body_statement -> if NEWLINE .

    ENDFUNC         reduce using rule 95 (func_body_statement -> if NEWLINE .)
    error           reduce using rule 95 (func_body_statement -> if NEWLINE .)
    VARIANT         reduce using rule 95 (func_body_statement -> if NEWLINE .)
    CONVERT         reduce using rule 95 (func_body_statement -> if NEWLINE .)
    DIGITIZE        reduce using rule 95 (func_body_statement -> if NEWLINE .)
    WHILE           reduce using rule 95 (func_body_statement -> if NEWLINE .)
    UNTIL           reduce using rule 95 (func_body_statement -> if NEWLINE .)
    IFLESS          reduce using rule 95 (func_body_statement -> if NEWLINE .)
    IFNLESS         reduce using rule 95 (func_body_statement -> if NEWLINE .)
    IFZERO          reduce using rule 95 (func_body_statement -> if NEWLINE .)
    IFNZERO         reduce using rule 95 (func_body_statement -> if NEWLINE .)
    IFHIGH          reduce using rule 95 (func_body_statement -> if NEWLINE .)
    IFNHIGH         reduce using rule 95 (func_body_statement -> if NEWLINE .)
    COMMAND         reduce using rule 95 (func_body_statement -> if NEWLINE .)
    CALL            reduce using rule 95 (func_body_statement -> if NEWLINE .)
    RETURN          reduce using rule 95 (func_body_statement -> if NEWLINE .)
    NAME            reduce using rule 95 (func_body_statement -> if NEWLINE .)
    PARAM           reduce using rule 95 (func_body_statement -> if NEWLINE .)
    NEWLINE         reduce using rule 95 (func_body_statement -> if NEWLINE .)


state 245

    (96) func_body_statement -> command NEWLINE .

    ENDFUNC         reduce using rule 96 (func_body_statement -> command NEWLINE .)
    error           reduce using rule 96 (func_body_statement -> command NEWLINE .)
    VARIANT         reduce using rule 96 (func_body_statement -> command NEWLINE .)
    CONVERT         reduce using rule 96 (func_body_statement -> command NEWLINE .)
    DIGITIZE        reduce using rule 96 (func_body_statement -> command NEWLINE .)
    WHILE           reduce using rule 96 (func_body_statement -> command NEWLINE .)
    UNTIL           reduce using rule 96 (func_body_statement -> command NEWLINE .)
    IFLESS          reduce using rule 96 (func_body_statement -> command NEWLINE .)
    IFNLESS         reduce using rule 96 (func_body_statement -> command NEWLINE .)
    IFZERO          reduce using rule 96 (func_body_statement -> command NEWLINE .)
    IFNZERO         reduce using rule 96 (func_body_statement -> command NEWLINE .)
    IFHIGH          reduce using rule 96 (func_body_statement -> command NEWLINE .)
    IFNHIGH         reduce using rule 96 (func_body_statement -> command NEWLINE .)
    COMMAND         reduce using rule 96 (func_body_statement -> command NEWLINE .)
    CALL            reduce using rule 96 (func_body_statement -> command NEWLINE .)
    RETURN          reduce using rule 96 (func_body_statement -> command NEWLINE .)
    NAME            reduce using rule 96 (func_body_statement -> command NEWLINE .)
    PARAM           reduce using rule 96 (func_body_statement -> command NEWLINE .)
    NEWLINE         reduce using rule 96 (func_body_statement -> command NEWLINE .)


state 246

    (97) func_body_statement -> function_call NEWLINE .

    ENDFUNC         reduce using rule 97 (func_body_statement -> function_call NEWLINE .)
    error           reduce using rule 97 (func_body_statement -> function_call NEWLINE .)
    VARIANT         reduce using rule 97 (func_body_statement -> function_call NEWLINE .)
    CONVERT         reduce using rule 97 (func_body_statement -> function_call NEWLINE .)
    DIGITIZE        reduce using rule 97 (func_body_statement -> function_call NEWLINE .)
    WHILE           reduce using rule 97 (func_body_statement -> function_call NEWLINE .)
    UNTIL           reduce using rule 97 (func_body_statement -> function_call NEWLINE .)
    IFLESS          reduce using rule 97 (func_body_statement -> function_call NEWLINE .)
    IFNLESS         reduce using rule 97 (func_body_statement -> function_call NEWLINE .)
    IFZERO          reduce using rule 97 (func_body_statement -> function_call NEWLINE .)
    IFNZERO         reduce using rule 97 (func_body_statement -> function_call NEWLINE .)
    IFHIGH          reduce using rule 97 (func_body_statement -> function_call NEWLINE .)
    IFNHIGH         reduce using rule 97 (func_body_statement -> function_call NEWLINE .)
    COMMAND         reduce using rule 97 (func_body_statement -> function_call NEWLINE .)
    CALL            reduce using rule 97 (func_body_statement -> function_call NEWLINE .)
    RETURN          reduce using rule 97 (func_body_statement -> function_call NEWLINE .)
    NAME            reduce using rule 97 (func_body_statement -> function_call NEWLINE .)
    PARAM           reduce using rule 97 (func_body_statement -> function_call NEWLINE .)
    NEWLINE         reduce using rule 97 (func_body_statement -> function_call NEWLINE .)


state 247

    (98) func_body_statement -> return NEWLINE .

    ENDFUNC         reduce using rule 98 (func_body_statement -> return NEWLINE .)
    error           reduce using rule 98 (func_body_statement -> return NEWLINE .)
    VARIANT         reduce using rule 98 (func_body_statement -> return NEWLINE .)
    CONVERT         reduce using rule 98 (func_body_statement -> return NEWLINE .)
    DIGITIZE        reduce using rule 98 (func_body_statement -> return NEWLINE .)
    WHILE           reduce using rule 98 (func_body_statement -> return NEWLINE .)
    UNTIL           reduce using rule 98 (func_body_statement -> return NEWLINE .)
    IFLESS          reduce using rule 98 (func_body_statement -> return NEWLINE .)
    IFNLESS         reduce using rule 98 (func_body_statement -> return NEWLINE .)
    IFZERO          reduce using rule 98 (func_body_statement -> return NEWLINE .)
    IFNZERO         reduce using rule 98 (func_body_statement -> return NEWLINE .)
    IFHIGH          reduce using rule 98 (func_body_statement -> return NEWLINE .)
    IFNHIGH         reduce using rule 98 (func_body_statement -> return NEWLINE .)
    COMMAND         reduce using rule 98 (func_body_statement -> return NEWLINE .)
    CALL            reduce using rule 98 (func_body_statement -> return NEWLINE .)
    RETURN          reduce using rule 98 (func_body_statement -> return NEWLINE .)
    NAME            reduce using rule 98 (func_body_statement -> return NEWLINE .)
    PARAM           reduce using rule 98 (func_body_statement -> return NEWLINE .)
    NEWLINE         reduce using rule 98 (func_body_statement -> return NEWLINE .)


state 248

    (154) return -> return error .

    NEWLINE         reduce using rule 154 (return -> return error .)
    error           reduce using rule 154 (return -> return error .)


state 249

    (102) return -> RETURN expression .
    (54) math_expression -> expression . PLUS expression

    NEWLINE         reduce using rule 102 (return -> RETURN expression .)
    error           reduce using rule 102 (return -> RETURN expression .)
    PLUS            shift and go to state 158


state 250

    (153) return -> RETURN error .

    NEWLINE         reduce using rule 153 (return -> RETURN error .)
    error           reduce using rule 153 (return -> RETURN error .)


state 251

    (151) function -> FUNC error NEWLINE func_body_statements error .
    (112) assignment -> error . ASSIGNMENT expression

    NEWLINE         reduce using rule 151 (function -> FUNC error NEWLINE func_body_statements error .)
    error           reduce using rule 151 (function -> FUNC error NEWLINE func_body_statements error .)
    ASSIGNMENT      shift and go to state 56


state 252

    (149) function -> FUNC error NEWLINE func_body_statements ENDFUNC .

    NEWLINE         reduce using rule 149 (function -> FUNC error NEWLINE func_body_statements ENDFUNC .)
    error           reduce using rule 149 (function -> FUNC error NEWLINE func_body_statements ENDFUNC .)


state 253

    (23) varsize -> LSQBRACKET decimal_expression COMMA decimal_expression . RSQBRACKET
    (58) dec_math_expression -> decimal_expression . PLUS decimal_expression

    RSQBRACKET      shift and go to state 275
    PLUS            shift and go to state 131


state 254

    (108) varsize -> LSQBRACKET decimal_expression COMMA error . RSQBRACKET

    RSQBRACKET      shift and go to state 276


state 255

    (109) varsize -> LSQBRACKET error COMMA error . RSQBRACKET

    RSQBRACKET      shift and go to state 277


state 256

    (107) varsize -> LSQBRACKET error COMMA decimal_expression . RSQBRACKET
    (58) dec_math_expression -> decimal_expression . PLUS decimal_expression

    RSQBRACKET      shift and go to state 278
    PLUS            shift and go to state 131


state 257

    (28) init_list -> LBRACE inits . RBRACE
    (30) inits -> inits . init
    (32) init -> . const_expressions COMMA const_expression SEMICOLON
    (33) init -> . const_expression SEMICOLON
    (34) const_expressions -> . const_expressions COMMA const_expression
    (35) const_expressions -> . const_expression
    (36) const_expression -> . const_math_expression
    (37) const_expression -> . const
    (56) const_math_expression -> . const_expression PLUS const_expression
    (57) const_math_expression -> . MINUS const_expression
    (64) const -> . bool_const
    (65) const -> . decimal_const
    (66) const -> . string_const
    (68) bool_const -> . TRUE
    (69) bool_const -> . FALSE
    (67) decimal_const -> . DECIMAL
    (70) string_const -> . LETTERS

    RBRACE          shift and go to state 279
    MINUS           shift and go to state 264
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    DECIMAL         shift and go to state 82
    LETTERS         shift and go to state 100

    init                           shift and go to state 280
    const_expressions              shift and go to state 260
    const_expression               shift and go to state 261
    const_math_expression          shift and go to state 262
    const                          shift and go to state 263
    bool_const                     shift and go to state 115
    decimal_const                  shift and go to state 116
    string_const                   shift and go to state 117

state 258

    (29) init_list -> LBRACE RBRACE .

    RBRACE          reduce using rule 29 (init_list -> LBRACE RBRACE .)
    LBRACE          reduce using rule 29 (init_list -> LBRACE RBRACE .)


state 259

    (31) inits -> init .

    RBRACE          reduce using rule 31 (inits -> init .)
    MINUS           reduce using rule 31 (inits -> init .)
    TRUE            reduce using rule 31 (inits -> init .)
    FALSE           reduce using rule 31 (inits -> init .)
    DECIMAL         reduce using rule 31 (inits -> init .)
    LETTERS         reduce using rule 31 (inits -> init .)


state 260

    (32) init -> const_expressions . COMMA const_expression SEMICOLON
    (34) const_expressions -> const_expressions . COMMA const_expression

    COMMA           shift and go to state 281


state 261

    (33) init -> const_expression . SEMICOLON
    (35) const_expressions -> const_expression .
    (56) const_math_expression -> const_expression . PLUS const_expression

    SEMICOLON       shift and go to state 282
    COMMA           reduce using rule 35 (const_expressions -> const_expression .)
    PLUS            shift and go to state 283


state 262

    (36) const_expression -> const_math_expression .

    SEMICOLON       reduce using rule 36 (const_expression -> const_math_expression .)
    PLUS            reduce using rule 36 (const_expression -> const_math_expression .)
    COMMA           reduce using rule 36 (const_expression -> const_math_expression .)


state 263

    (37) const_expression -> const .

    SEMICOLON       reduce using rule 37 (const_expression -> const .)
    PLUS            reduce using rule 37 (const_expression -> const .)
    COMMA           reduce using rule 37 (const_expression -> const .)


state 264

    (57) const_math_expression -> MINUS . const_expression
    (36) const_expression -> . const_math_expression
    (37) const_expression -> . const
    (56) const_math_expression -> . const_expression PLUS const_expression
    (57) const_math_expression -> . MINUS const_expression
    (64) const -> . bool_const
    (65) const -> . decimal_const
    (66) const -> . string_const
    (68) bool_const -> . TRUE
    (69) bool_const -> . FALSE
    (67) decimal_const -> . DECIMAL
    (70) string_const -> . LETTERS

    MINUS           shift and go to state 264
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    DECIMAL         shift and go to state 82
    LETTERS         shift and go to state 100

    const_expression               shift and go to state 284
    const_math_expression          shift and go to state 262
    const                          shift and go to state 263
    bool_const                     shift and go to state 115
    decimal_const                  shift and go to state 116
    string_const                   shift and go to state 117

state 265

    (25) initialization -> LBRACE init_lists RBRACE .

    NEWLINE         reduce using rule 25 (initialization -> LBRACE init_lists RBRACE .)
    error           reduce using rule 25 (initialization -> LBRACE init_lists RBRACE .)


state 266

    (26) init_lists -> init_lists init_list .

    RBRACE          reduce using rule 26 (init_lists -> init_lists init_list .)
    LBRACE          reduce using rule 26 (init_lists -> init_lists init_list .)


state 267

    (79) if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements . ENDIF
    (136) if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements . error
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 285
    error           shift and go to state 286
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 268

    (142) if -> IFLESS decimal_expression COMMA decimal_expression statements ENDIF .

    NEWLINE         reduce using rule 142 (if -> IFLESS decimal_expression COMMA decimal_expression statements ENDIF .)
    error           reduce using rule 142 (if -> IFLESS decimal_expression COMMA decimal_expression statements ENDIF .)


state 269

    (80) if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements . ENDIF
    (137) if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements . error
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 287
    error           shift and go to state 288
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 270

    (143) if -> IFNLESS decimal_expression COMMA decimal_expression statements ENDIF .

    NEWLINE         reduce using rule 143 (if -> IFNLESS decimal_expression COMMA decimal_expression statements ENDIF .)
    error           reduce using rule 143 (if -> IFNLESS decimal_expression COMMA decimal_expression statements ENDIF .)


state 271

    (83) if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements . ENDIF
    (140) if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements . error
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 289
    error           shift and go to state 290
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 272

    (146) if -> IFHIGH decimal_expression COMMA decimal_expression statements ENDIF .

    NEWLINE         reduce using rule 146 (if -> IFHIGH decimal_expression COMMA decimal_expression statements ENDIF .)
    error           reduce using rule 146 (if -> IFHIGH decimal_expression COMMA decimal_expression statements ENDIF .)


state 273

    (84) if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements . ENDIF
    (141) if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements . error
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (103) declaration -> . VARIANT error
    (104) declaration -> . VARIANT variant ASSIGNMENT error
    (105) declaration -> . declaration error
    (71) assignment -> . variant ASSIGNMENT expression
    (111) assignment -> . variant ASSIGNMENT error
    (112) assignment -> . error ASSIGNMENT expression
    (72) convert -> . CONVERT type TO type variant
    (113) convert -> . CONVERT type TO type error
    (114) convert -> . CONVERT type TO error
    (115) convert -> . CONVERT type error
    (116) convert -> . CONVERT error
    (117) convert -> . convert error
    (73) digitize -> . DIGITIZE type variant
    (118) digitize -> . DIGITIZE error
    (119) digitize -> . digitize error
    (77) while -> . WHILE bool_expression NEWLINE statements ENDW
    (122) while -> . WHILE error NEWLINE statements ENDW
    (123) while -> . WHILE bool_expression NEWLINE statements error
    (124) while -> . WHILE bool_expression statements ENDW
    (125) while -> . while error
    (78) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (126) until -> . UNTIL error NEWLINE statements ENDU
    (127) until -> . UNTIL bool_expression NEWLINE statements error
    (128) until -> . UNTIL bool_expression statements ENDU
    (129) until -> . until error
    (79) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (130) if -> . IFLESS error NEWLINE statements ENDIF
    (131) if -> . IFNLESS error NEWLINE statements ENDIF
    (132) if -> . IFZERO error NEWLINE statements ENDIF
    (133) if -> . IFNZERO error NEWLINE statements ENDIF
    (134) if -> . IFHIGH error NEWLINE statements ENDIF
    (135) if -> . IFNHIGH error NEWLINE statements ENDIF
    (136) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (137) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (138) if -> . IFZERO decimal_expression NEWLINE statements error
    (139) if -> . IFNZERO decimal_expression NEWLINE statements error
    (140) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (142) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (143) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (144) if -> . IFZERO decimal_expression statements ENDIF
    (145) if -> . IFNZERO decimal_expression statements ENDIF
    (146) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . if error
    (85) command -> . COMMAND string_expression
    (120) command -> . COMMAND error
    (121) command -> . command error
    (99) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (149) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (150) function -> . FUNC NAME NEWLINE func_body_statements error
    (151) function -> . FUNC error NEWLINE func_body_statements error
    (152) function -> . function error
    (100) function_call -> . CALL NAME expression
    (101) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 291
    error           shift and go to state 292
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    COMMAND         shift and go to state 28
    FUNC            shift and go to state 29
    CALL            shift and go to state 31
    NAME            shift and go to state 30
    PARAM           shift and go to state 32

    statement                      shift and go to state 33
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 274

    (147) if -> IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF .

    NEWLINE         reduce using rule 147 (if -> IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF .)
    error           reduce using rule 147 (if -> IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF .)


state 275

    (23) varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .

    error           reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    ASSIGNMENT      reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    NEWLINE         reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    PLUS            reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    VARIANT         reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    CONVERT         reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    DIGITIZE        reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    WHILE           reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    UNTIL           reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    IFLESS          reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    IFNLESS         reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    IFZERO          reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    IFNZERO         reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    IFHIGH          reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    IFNHIGH         reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    COMMAND         reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    FUNC            reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    CALL            reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    NAME            reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    PARAM           reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    COMMA           reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    RSQBRACKET      reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)


state 276

    (108) varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .

    error           reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    ASSIGNMENT      reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    NEWLINE         reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    PLUS            reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    VARIANT         reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    CONVERT         reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    DIGITIZE        reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    WHILE           reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    UNTIL           reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    IFLESS          reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    IFNLESS         reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    IFZERO          reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    IFNZERO         reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    IFHIGH          reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    IFNHIGH         reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    COMMAND         reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    FUNC            reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    CALL            reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    NAME            reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    PARAM           reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    COMMA           reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    RSQBRACKET      reduce using rule 108 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)


state 277

    (109) varsize -> LSQBRACKET error COMMA error RSQBRACKET .

    error           reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    ASSIGNMENT      reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    NEWLINE         reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    PLUS            reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    VARIANT         reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    CONVERT         reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    DIGITIZE        reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    WHILE           reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    UNTIL           reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    IFLESS          reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    IFNLESS         reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    IFZERO          reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    IFNZERO         reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    IFHIGH          reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    IFNHIGH         reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    COMMAND         reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    FUNC            reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    CALL            reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    NAME            reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    PARAM           reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    COMMA           reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    RSQBRACKET      reduce using rule 109 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)


state 278

    (107) varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .

    error           reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    ASSIGNMENT      reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    NEWLINE         reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    PLUS            reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    VARIANT         reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    CONVERT         reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    DIGITIZE        reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    WHILE           reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    UNTIL           reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    IFLESS          reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    IFNLESS         reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    IFZERO          reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    IFNZERO         reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    IFHIGH          reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    IFNHIGH         reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    COMMAND         reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    FUNC            reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    CALL            reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    NAME            reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    PARAM           reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    COMMA           reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    RSQBRACKET      reduce using rule 107 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)


state 279

    (28) init_list -> LBRACE inits RBRACE .

    RBRACE          reduce using rule 28 (init_list -> LBRACE inits RBRACE .)
    LBRACE          reduce using rule 28 (init_list -> LBRACE inits RBRACE .)


state 280

    (30) inits -> inits init .

    RBRACE          reduce using rule 30 (inits -> inits init .)
    MINUS           reduce using rule 30 (inits -> inits init .)
    TRUE            reduce using rule 30 (inits -> inits init .)
    FALSE           reduce using rule 30 (inits -> inits init .)
    DECIMAL         reduce using rule 30 (inits -> inits init .)
    LETTERS         reduce using rule 30 (inits -> inits init .)


state 281

    (32) init -> const_expressions COMMA . const_expression SEMICOLON
    (34) const_expressions -> const_expressions COMMA . const_expression
    (36) const_expression -> . const_math_expression
    (37) const_expression -> . const
    (56) const_math_expression -> . const_expression PLUS const_expression
    (57) const_math_expression -> . MINUS const_expression
    (64) const -> . bool_const
    (65) const -> . decimal_const
    (66) const -> . string_const
    (68) bool_const -> . TRUE
    (69) bool_const -> . FALSE
    (67) decimal_const -> . DECIMAL
    (70) string_const -> . LETTERS

    MINUS           shift and go to state 264
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    DECIMAL         shift and go to state 82
    LETTERS         shift and go to state 100

    const_expression               shift and go to state 293
    const_math_expression          shift and go to state 262
    const                          shift and go to state 263
    bool_const                     shift and go to state 115
    decimal_const                  shift and go to state 116
    string_const                   shift and go to state 117

state 282

    (33) init -> const_expression SEMICOLON .

    RBRACE          reduce using rule 33 (init -> const_expression SEMICOLON .)
    MINUS           reduce using rule 33 (init -> const_expression SEMICOLON .)
    TRUE            reduce using rule 33 (init -> const_expression SEMICOLON .)
    FALSE           reduce using rule 33 (init -> const_expression SEMICOLON .)
    DECIMAL         reduce using rule 33 (init -> const_expression SEMICOLON .)
    LETTERS         reduce using rule 33 (init -> const_expression SEMICOLON .)


state 283

    (56) const_math_expression -> const_expression PLUS . const_expression
    (36) const_expression -> . const_math_expression
    (37) const_expression -> . const
    (56) const_math_expression -> . const_expression PLUS const_expression
    (57) const_math_expression -> . MINUS const_expression
    (64) const -> . bool_const
    (65) const -> . decimal_const
    (66) const -> . string_const
    (68) bool_const -> . TRUE
    (69) bool_const -> . FALSE
    (67) decimal_const -> . DECIMAL
    (70) string_const -> . LETTERS

    MINUS           shift and go to state 264
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    DECIMAL         shift and go to state 82
    LETTERS         shift and go to state 100

    const_expression               shift and go to state 294
    const_math_expression          shift and go to state 262
    const                          shift and go to state 263
    bool_const                     shift and go to state 115
    decimal_const                  shift and go to state 116
    string_const                   shift and go to state 117

state 284

    (57) const_math_expression -> MINUS const_expression .
    (56) const_math_expression -> const_expression . PLUS const_expression

  ! shift/reduce conflict for PLUS resolved as shift
    SEMICOLON       reduce using rule 57 (const_math_expression -> MINUS const_expression .)
    COMMA           reduce using rule 57 (const_math_expression -> MINUS const_expression .)
    PLUS            shift and go to state 283

  ! PLUS            [ reduce using rule 57 (const_math_expression -> MINUS const_expression .) ]


state 285

    (79) if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 79 (if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)
    error           reduce using rule 79 (if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)


state 286

    (136) if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error .
    (112) assignment -> error . ASSIGNMENT expression

    NEWLINE         reduce using rule 136 (if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error .)
    error           reduce using rule 136 (if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error .)
    ASSIGNMENT      shift and go to state 56


state 287

    (80) if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 80 (if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)
    error           reduce using rule 80 (if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)


state 288

    (137) if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error .
    (112) assignment -> error . ASSIGNMENT expression

    NEWLINE         reduce using rule 137 (if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error .)
    error           reduce using rule 137 (if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error .)
    ASSIGNMENT      shift and go to state 56


state 289

    (83) if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 83 (if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)
    error           reduce using rule 83 (if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)


state 290

    (140) if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error .
    (112) assignment -> error . ASSIGNMENT expression

    NEWLINE         reduce using rule 140 (if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error .)
    error           reduce using rule 140 (if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error .)
    ASSIGNMENT      shift and go to state 56


state 291

    (84) if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 84 (if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)
    error           reduce using rule 84 (if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)


state 292

    (141) if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error .
    (112) assignment -> error . ASSIGNMENT expression

    NEWLINE         reduce using rule 141 (if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error .)
    error           reduce using rule 141 (if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error .)
    ASSIGNMENT      shift and go to state 56


state 293

    (32) init -> const_expressions COMMA const_expression . SEMICOLON
    (34) const_expressions -> const_expressions COMMA const_expression .
    (56) const_math_expression -> const_expression . PLUS const_expression

    SEMICOLON       shift and go to state 295
    COMMA           reduce using rule 34 (const_expressions -> const_expressions COMMA const_expression .)
    PLUS            shift and go to state 283


state 294

    (56) const_math_expression -> const_expression PLUS const_expression .
    (56) const_math_expression -> const_expression . PLUS const_expression

  ! shift/reduce conflict for PLUS resolved as shift
    SEMICOLON       reduce using rule 56 (const_math_expression -> const_expression PLUS const_expression .)
    COMMA           reduce using rule 56 (const_math_expression -> const_expression PLUS const_expression .)
    PLUS            shift and go to state 283

  ! PLUS            [ reduce using rule 56 (const_math_expression -> const_expression PLUS const_expression .) ]


state 295

    (32) init -> const_expressions COMMA const_expression SEMICOLON .

    RBRACE          reduce using rule 32 (init -> const_expressions COMMA const_expression SEMICOLON .)
    MINUS           reduce using rule 32 (init -> const_expressions COMMA const_expression SEMICOLON .)
    TRUE            reduce using rule 32 (init -> const_expressions COMMA const_expression SEMICOLON .)
    FALSE           reduce using rule 32 (init -> const_expressions COMMA const_expression SEMICOLON .)
    DECIMAL         reduce using rule 32 (init -> const_expressions COMMA const_expression SEMICOLON .)
    LETTERS         reduce using rule 32 (init -> const_expressions COMMA const_expression SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 64 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 73 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 85 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 87 resolved as shift
WARNING: shift/reduce conflict for error in state 103 resolved as shift
WARNING: shift/reduce conflict for NAME in state 105 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 105 resolved as shift
WARNING: shift/reduce conflict for CALL in state 105 resolved as shift
WARNING: shift/reduce conflict for error in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 133 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 147 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 154 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 159 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 164 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 169 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 170 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 172 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 180 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 182 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 184 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 207 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 284 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 294 resolved as shift
