Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CALL
    COMMAND
    DIGITIZE
    ENDFUNC
    FUNC
    PARAM
    RETURN

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> empty NEWLINE
Rule 5     statement -> declaration NEWLINE
Rule 6     statement -> assignment NEWLINE
Rule 7     statement -> convert NEWLINE
Rule 8     statement -> while NEWLINE
Rule 9     statement -> until NEWLINE
Rule 10    statement -> if NEWLINE
Rule 11    statement -> statement_error NEWLINE
Rule 12    empty -> <empty>
Rule 13    declaration -> VARIANT variant
Rule 14    declaration -> VARIANT variant ASSIGNMENT initialization
Rule 15    declaration -> VARIANT error
Rule 16    declaration -> VARIANT variant ASSIGNMENT error
Rule 17    declaration -> declaration error
Rule 18    variant -> NAME
Rule 19    variant -> NAME varsize
Rule 20    varsize -> LSQBRACKET decimal_expression RSQBRACKET
Rule 21    varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET
Rule 22    varsize -> LSQBRACKET error RSQBRACKET
Rule 23    varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET
Rule 24    varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET
Rule 25    varsize -> LSQBRACKET error COMMA error RSQBRACKET
Rule 26    varsize -> varsize error
Rule 27    initialization -> LBRACE init_lists RBRACE
Rule 28    init_lists -> init_lists init_list
Rule 29    init_lists -> init_list
Rule 30    init_list -> LBRACE inits RBRACE
Rule 31    init_list -> LBRACE RBRACE
Rule 32    inits -> inits init
Rule 33    inits -> init
Rule 34    init -> const_expressions COMMA const_expression SEMICOLON
Rule 35    init -> const_expression SEMICOLON
Rule 36    const_expressions -> const_expressions COMMA const_expression
Rule 37    const_expressions -> const_expression
Rule 38    const_expression -> const_math_expression
Rule 39    const_expression -> const
Rule 40    expression -> math_expression
Rule 41    expression -> const
Rule 42    expression -> variant
Rule 43    decimal_expression -> dec_math_expression
Rule 44    decimal_expression -> decimal_const
Rule 45    decimal_expression -> variant
Rule 46    bool_expression -> bool_math_expression
Rule 47    bool_expression -> bool_const
Rule 48    bool_expression -> variant
Rule 49    math_expression -> expression PLUS expression
Rule 50    math_expression -> MINUS expression
Rule 51    const_math_expression -> const_expression PLUS const_expression
Rule 52    const_math_expression -> MINUS const_expression
Rule 53    dec_math_expression -> decimal_expression PLUS decimal_expression
Rule 54    dec_math_expression -> MINUS decimal_expression
Rule 55    bool_math_expression -> bool_expression PLUS bool_expression
Rule 56    bool_math_expression -> MINUS bool_expression
Rule 57    const -> TRUE
Rule 58    const -> FALSE
Rule 59    const -> DECIMAL
Rule 60    const -> LETTERS
Rule 61    decimal_const -> DECIMAL
Rule 62    bool_const -> TRUE
Rule 63    bool_const -> FALSE
Rule 64    assignment -> variant ASSIGNMENT expression
Rule 65    assignment -> variant ASSIGNMENT error
Rule 66    convert -> CONVERT type TO type variant
Rule 67    convert -> CONVERT type TO type error
Rule 68    convert -> CONVERT type TO error
Rule 69    convert -> CONVERT type error
Rule 70    convert -> CONVERT error
Rule 71    convert -> convert error
Rule 72    type -> BOOL
Rule 73    type -> DIGIT
Rule 74    type -> STRING
Rule 75    while -> WHILE bool_expression NEWLINE statements ENDW
Rule 76    until -> UNTIL bool_expression NEWLINE statements ENDU
Rule 77    if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
Rule 78    if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
Rule 79    if -> IFZERO decimal_expression NEWLINE statements ENDIF
Rule 80    if -> IFNZERO decimal_expression NEWLINE statements ENDIF
Rule 81    if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
Rule 82    if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
Rule 83    statement_error -> error
Rule 84    statement_error -> statement_error error

Terminals, with rules where they appear

ASSIGNMENT           : 14 16 64 65
BOOL                 : 72
CALL                 : 
COMMA                : 21 23 24 25 34 36 77 78 81 82
COMMAND              : 
CONVERT              : 66 67 68 69 70
DECIMAL              : 59 61
DIGIT                : 73
DIGITIZE             : 
ENDFUNC              : 
ENDIF                : 77 78 79 80 81 82
ENDU                 : 76
ENDW                 : 75
FALSE                : 58 63
FUNC                 : 
IFHIGH               : 81
IFLESS               : 77
IFNHIGH              : 82
IFNLESS              : 78
IFNZERO              : 80
IFZERO               : 79
LBRACE               : 27 30 31
LETTERS              : 60
LSQBRACKET           : 20 21 22 23 24 25
MINUS                : 50 52 54 56
NAME                 : 18 19
NEWLINE              : 4 5 6 7 8 9 10 11 75 76 77 78 79 80 81 82
PARAM                : 
PLUS                 : 49 51 53 55
RBRACE               : 27 30 31
RETURN               : 
RSQBRACKET           : 20 21 22 23 24 25
SEMICOLON            : 34 35
STRING               : 74
TO                   : 66 67 68
TRUE                 : 57 62
UNTIL                : 76
VARIANT              : 13 14 15 16
WHILE                : 75
error                : 15 16 17 22 23 24 25 25 26 65 67 68 69 70 71 83 84

Nonterminals, with rules where they appear

assignment           : 6
bool_const           : 47
bool_expression      : 55 55 56 75 76
bool_math_expression : 46
const                : 39 41
const_expression     : 34 35 36 37 51 51 52
const_expressions    : 34 36
const_math_expression : 38
convert              : 7 71
dec_math_expression  : 43
decimal_const        : 44
decimal_expression   : 20 21 21 23 24 53 53 54 77 77 78 78 79 80 81 81 82 82
declaration          : 5 17
empty                : 4
expression           : 49 49 50 64
if                   : 10
init                 : 32 33
init_list            : 28 29
init_lists           : 27 28
initialization       : 14
inits                : 30 32
math_expression      : 40
program              : 0
statement            : 2 3
statement_error      : 11 84
statements           : 1 2 75 76 77 78 79 80 81 82
type                 : 66 66 67 67 68 69
until                : 9
variant              : 13 14 16 42 45 48 64 65 66
varsize              : 19 26
while                : 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . until NEWLINE
    (10) statement -> . if NEWLINE
    (11) statement -> . statement_error NEWLINE
    (12) empty -> .
    (13) declaration -> . VARIANT variant
    (14) declaration -> . VARIANT variant ASSIGNMENT initialization
    (15) declaration -> . VARIANT error
    (16) declaration -> . VARIANT variant ASSIGNMENT error
    (17) declaration -> . declaration error
    (64) assignment -> . variant ASSIGNMENT expression
    (65) assignment -> . variant ASSIGNMENT error
    (66) convert -> . CONVERT type TO type variant
    (67) convert -> . CONVERT type TO type error
    (68) convert -> . CONVERT type TO error
    (69) convert -> . CONVERT type error
    (70) convert -> . CONVERT error
    (71) convert -> . convert error
    (75) while -> . WHILE bool_expression NEWLINE statements ENDW
    (76) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (77) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (83) statement_error -> . error
    (84) statement_error -> . statement_error error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    NEWLINE         reduce using rule 12 (empty -> .)
    VARIANT         shift and go to state 12
    CONVERT         shift and go to state 15
    WHILE           shift and go to state 16
    UNTIL           shift and go to state 17
    IFLESS          shift and go to state 18
    IFNLESS         shift and go to state 19
    IFZERO          shift and go to state 20
    IFNZERO         shift and go to state 21
    IFHIGH          shift and go to state 22
    IFNHIGH         shift and go to state 23
    error           shift and go to state 14
    NAME            shift and go to state 24

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    while                          shift and go to state 8
    until                          shift and go to state 9
    if                             shift and go to state 10
    statement_error                shift and go to state 11
    variant                        shift and go to state 13

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . until NEWLINE
    (10) statement -> . if NEWLINE
    (11) statement -> . statement_error NEWLINE
    (12) empty -> .
    (13) declaration -> . VARIANT variant
    (14) declaration -> . VARIANT variant ASSIGNMENT initialization
    (15) declaration -> . VARIANT error
    (16) declaration -> . VARIANT variant ASSIGNMENT error
    (17) declaration -> . declaration error
    (64) assignment -> . variant ASSIGNMENT expression
    (65) assignment -> . variant ASSIGNMENT error
    (66) convert -> . CONVERT type TO type variant
    (67) convert -> . CONVERT type TO type error
    (68) convert -> . CONVERT type TO error
    (69) convert -> . CONVERT type error
    (70) convert -> . CONVERT error
    (71) convert -> . convert error
    (75) while -> . WHILE bool_expression NEWLINE statements ENDW
    (76) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (77) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (83) statement_error -> . error
    (84) statement_error -> . statement_error error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    $end            reduce using rule 1 (program -> statements .)
    NEWLINE         reduce using rule 12 (empty -> .)
    VARIANT         shift and go to state 12
    CONVERT         shift and go to state 15
    WHILE           shift and go to state 16
    UNTIL           shift and go to state 17
    IFLESS          shift and go to state 18
    IFNLESS         shift and go to state 19
    IFZERO          shift and go to state 20
    IFNZERO         shift and go to state 21
    IFHIGH          shift and go to state 22
    IFNHIGH         shift and go to state 23
    error           shift and go to state 14
    NAME            shift and go to state 24

    statement                      shift and go to state 25
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    while                          shift and go to state 8
    until                          shift and go to state 9
    if                             shift and go to state 10
    statement_error                shift and go to state 11
    variant                        shift and go to state 13

state 3

    (3) statements -> statement .

    VARIANT         reduce using rule 3 (statements -> statement .)
    CONVERT         reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    UNTIL           reduce using rule 3 (statements -> statement .)
    IFLESS          reduce using rule 3 (statements -> statement .)
    IFNLESS         reduce using rule 3 (statements -> statement .)
    IFZERO          reduce using rule 3 (statements -> statement .)
    IFNZERO         reduce using rule 3 (statements -> statement .)
    IFHIGH          reduce using rule 3 (statements -> statement .)
    IFNHIGH         reduce using rule 3 (statements -> statement .)
    error           reduce using rule 3 (statements -> statement .)
    NAME            reduce using rule 3 (statements -> statement .)
    NEWLINE         reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    ENDW            reduce using rule 3 (statements -> statement .)
    ENDU            reduce using rule 3 (statements -> statement .)
    ENDIF           reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> empty . NEWLINE

    NEWLINE         shift and go to state 26


state 5

    (5) statement -> declaration . NEWLINE
    (17) declaration -> declaration . error

    NEWLINE         shift and go to state 27
    error           shift and go to state 28


state 6

    (6) statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 29


state 7

    (7) statement -> convert . NEWLINE
    (71) convert -> convert . error

    NEWLINE         shift and go to state 30
    error           shift and go to state 31


state 8

    (8) statement -> while . NEWLINE

    NEWLINE         shift and go to state 32


state 9

    (9) statement -> until . NEWLINE

    NEWLINE         shift and go to state 33


state 10

    (10) statement -> if . NEWLINE

    NEWLINE         shift and go to state 34


state 11

    (11) statement -> statement_error . NEWLINE
    (84) statement_error -> statement_error . error

    NEWLINE         shift and go to state 35
    error           shift and go to state 36


state 12

    (13) declaration -> VARIANT . variant
    (14) declaration -> VARIANT . variant ASSIGNMENT initialization
    (15) declaration -> VARIANT . error
    (16) declaration -> VARIANT . variant ASSIGNMENT error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    error           shift and go to state 38
    NAME            shift and go to state 24

    variant                        shift and go to state 37

state 13

    (64) assignment -> variant . ASSIGNMENT expression
    (65) assignment -> variant . ASSIGNMENT error

    ASSIGNMENT      shift and go to state 39


state 14

    (83) statement_error -> error .

    NEWLINE         reduce using rule 83 (statement_error -> error .)
    error           reduce using rule 83 (statement_error -> error .)


state 15

    (66) convert -> CONVERT . type TO type variant
    (67) convert -> CONVERT . type TO type error
    (68) convert -> CONVERT . type TO error
    (69) convert -> CONVERT . type error
    (70) convert -> CONVERT . error
    (72) type -> . BOOL
    (73) type -> . DIGIT
    (74) type -> . STRING

    error           shift and go to state 41
    BOOL            shift and go to state 42
    DIGIT           shift and go to state 43
    STRING          shift and go to state 44

    type                           shift and go to state 40

state 16

    (75) while -> WHILE . bool_expression NEWLINE statements ENDW
    (46) bool_expression -> . bool_math_expression
    (47) bool_expression -> . bool_const
    (48) bool_expression -> . variant
    (55) bool_math_expression -> . bool_expression PLUS bool_expression
    (56) bool_math_expression -> . MINUS bool_expression
    (62) bool_const -> . TRUE
    (63) bool_const -> . FALSE
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    MINUS           shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NAME            shift and go to state 24

    bool_expression                shift and go to state 45
    bool_math_expression           shift and go to state 46
    bool_const                     shift and go to state 47
    variant                        shift and go to state 48

state 17

    (76) until -> UNTIL . bool_expression NEWLINE statements ENDU
    (46) bool_expression -> . bool_math_expression
    (47) bool_expression -> . bool_const
    (48) bool_expression -> . variant
    (55) bool_math_expression -> . bool_expression PLUS bool_expression
    (56) bool_math_expression -> . MINUS bool_expression
    (62) bool_const -> . TRUE
    (63) bool_const -> . FALSE
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    MINUS           shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NAME            shift and go to state 24

    bool_expression                shift and go to state 52
    bool_math_expression           shift and go to state 46
    bool_const                     shift and go to state 47
    variant                        shift and go to state 48

state 18

    (77) if -> IFLESS . decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (53) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (54) dec_math_expression -> . MINUS decimal_expression
    (61) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    MINUS           shift and go to state 57
    DECIMAL         shift and go to state 58
    NAME            shift and go to state 24

    decimal_expression             shift and go to state 53
    dec_math_expression            shift and go to state 54
    decimal_const                  shift and go to state 55
    variant                        shift and go to state 56

state 19

    (78) if -> IFNLESS . decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (53) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (54) dec_math_expression -> . MINUS decimal_expression
    (61) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    MINUS           shift and go to state 57
    DECIMAL         shift and go to state 58
    NAME            shift and go to state 24

    decimal_expression             shift and go to state 59
    dec_math_expression            shift and go to state 54
    decimal_const                  shift and go to state 55
    variant                        shift and go to state 56

state 20

    (79) if -> IFZERO . decimal_expression NEWLINE statements ENDIF
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (53) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (54) dec_math_expression -> . MINUS decimal_expression
    (61) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    MINUS           shift and go to state 57
    DECIMAL         shift and go to state 58
    NAME            shift and go to state 24

    decimal_expression             shift and go to state 60
    dec_math_expression            shift and go to state 54
    decimal_const                  shift and go to state 55
    variant                        shift and go to state 56

state 21

    (80) if -> IFNZERO . decimal_expression NEWLINE statements ENDIF
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (53) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (54) dec_math_expression -> . MINUS decimal_expression
    (61) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    MINUS           shift and go to state 57
    DECIMAL         shift and go to state 58
    NAME            shift and go to state 24

    decimal_expression             shift and go to state 61
    dec_math_expression            shift and go to state 54
    decimal_const                  shift and go to state 55
    variant                        shift and go to state 56

state 22

    (81) if -> IFHIGH . decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (53) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (54) dec_math_expression -> . MINUS decimal_expression
    (61) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    MINUS           shift and go to state 57
    DECIMAL         shift and go to state 58
    NAME            shift and go to state 24

    decimal_expression             shift and go to state 62
    dec_math_expression            shift and go to state 54
    decimal_const                  shift and go to state 55
    variant                        shift and go to state 56

state 23

    (82) if -> IFNHIGH . decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (53) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (54) dec_math_expression -> . MINUS decimal_expression
    (61) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    MINUS           shift and go to state 57
    DECIMAL         shift and go to state 58
    NAME            shift and go to state 24

    decimal_expression             shift and go to state 63
    dec_math_expression            shift and go to state 54
    decimal_const                  shift and go to state 55
    variant                        shift and go to state 56

state 24

    (18) variant -> NAME .
    (19) variant -> NAME . varsize
    (20) varsize -> . LSQBRACKET decimal_expression RSQBRACKET
    (21) varsize -> . LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET
    (22) varsize -> . LSQBRACKET error RSQBRACKET
    (23) varsize -> . LSQBRACKET error COMMA decimal_expression RSQBRACKET
    (24) varsize -> . LSQBRACKET decimal_expression COMMA error RSQBRACKET
    (25) varsize -> . LSQBRACKET error COMMA error RSQBRACKET
    (26) varsize -> . varsize error

    ASSIGNMENT      reduce using rule 18 (variant -> NAME .)
    NEWLINE         reduce using rule 18 (variant -> NAME .)
    error           reduce using rule 18 (variant -> NAME .)
    PLUS            reduce using rule 18 (variant -> NAME .)
    COMMA           reduce using rule 18 (variant -> NAME .)
    RSQBRACKET      reduce using rule 18 (variant -> NAME .)
    LSQBRACKET      shift and go to state 65

    varsize                        shift and go to state 64

state 25

    (2) statements -> statements statement .

    VARIANT         reduce using rule 2 (statements -> statements statement .)
    CONVERT         reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    UNTIL           reduce using rule 2 (statements -> statements statement .)
    IFLESS          reduce using rule 2 (statements -> statements statement .)
    IFNLESS         reduce using rule 2 (statements -> statements statement .)
    IFZERO          reduce using rule 2 (statements -> statements statement .)
    IFNZERO         reduce using rule 2 (statements -> statements statement .)
    IFHIGH          reduce using rule 2 (statements -> statements statement .)
    IFNHIGH         reduce using rule 2 (statements -> statements statement .)
    error           reduce using rule 2 (statements -> statements statement .)
    NAME            reduce using rule 2 (statements -> statements statement .)
    NEWLINE         reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    ENDW            reduce using rule 2 (statements -> statements statement .)
    ENDU            reduce using rule 2 (statements -> statements statement .)
    ENDIF           reduce using rule 2 (statements -> statements statement .)


state 26

    (4) statement -> empty NEWLINE .

    VARIANT         reduce using rule 4 (statement -> empty NEWLINE .)
    CONVERT         reduce using rule 4 (statement -> empty NEWLINE .)
    WHILE           reduce using rule 4 (statement -> empty NEWLINE .)
    UNTIL           reduce using rule 4 (statement -> empty NEWLINE .)
    IFLESS          reduce using rule 4 (statement -> empty NEWLINE .)
    IFNLESS         reduce using rule 4 (statement -> empty NEWLINE .)
    IFZERO          reduce using rule 4 (statement -> empty NEWLINE .)
    IFNZERO         reduce using rule 4 (statement -> empty NEWLINE .)
    IFHIGH          reduce using rule 4 (statement -> empty NEWLINE .)
    IFNHIGH         reduce using rule 4 (statement -> empty NEWLINE .)
    error           reduce using rule 4 (statement -> empty NEWLINE .)
    NAME            reduce using rule 4 (statement -> empty NEWLINE .)
    NEWLINE         reduce using rule 4 (statement -> empty NEWLINE .)
    $end            reduce using rule 4 (statement -> empty NEWLINE .)
    ENDW            reduce using rule 4 (statement -> empty NEWLINE .)
    ENDU            reduce using rule 4 (statement -> empty NEWLINE .)
    ENDIF           reduce using rule 4 (statement -> empty NEWLINE .)


state 27

    (5) statement -> declaration NEWLINE .

    VARIANT         reduce using rule 5 (statement -> declaration NEWLINE .)
    CONVERT         reduce using rule 5 (statement -> declaration NEWLINE .)
    WHILE           reduce using rule 5 (statement -> declaration NEWLINE .)
    UNTIL           reduce using rule 5 (statement -> declaration NEWLINE .)
    IFLESS          reduce using rule 5 (statement -> declaration NEWLINE .)
    IFNLESS         reduce using rule 5 (statement -> declaration NEWLINE .)
    IFZERO          reduce using rule 5 (statement -> declaration NEWLINE .)
    IFNZERO         reduce using rule 5 (statement -> declaration NEWLINE .)
    IFHIGH          reduce using rule 5 (statement -> declaration NEWLINE .)
    IFNHIGH         reduce using rule 5 (statement -> declaration NEWLINE .)
    error           reduce using rule 5 (statement -> declaration NEWLINE .)
    NAME            reduce using rule 5 (statement -> declaration NEWLINE .)
    NEWLINE         reduce using rule 5 (statement -> declaration NEWLINE .)
    $end            reduce using rule 5 (statement -> declaration NEWLINE .)
    ENDW            reduce using rule 5 (statement -> declaration NEWLINE .)
    ENDU            reduce using rule 5 (statement -> declaration NEWLINE .)
    ENDIF           reduce using rule 5 (statement -> declaration NEWLINE .)


state 28

    (17) declaration -> declaration error .

    NEWLINE         reduce using rule 17 (declaration -> declaration error .)
    error           reduce using rule 17 (declaration -> declaration error .)


state 29

    (6) statement -> assignment NEWLINE .

    VARIANT         reduce using rule 6 (statement -> assignment NEWLINE .)
    CONVERT         reduce using rule 6 (statement -> assignment NEWLINE .)
    WHILE           reduce using rule 6 (statement -> assignment NEWLINE .)
    UNTIL           reduce using rule 6 (statement -> assignment NEWLINE .)
    IFLESS          reduce using rule 6 (statement -> assignment NEWLINE .)
    IFNLESS         reduce using rule 6 (statement -> assignment NEWLINE .)
    IFZERO          reduce using rule 6 (statement -> assignment NEWLINE .)
    IFNZERO         reduce using rule 6 (statement -> assignment NEWLINE .)
    IFHIGH          reduce using rule 6 (statement -> assignment NEWLINE .)
    IFNHIGH         reduce using rule 6 (statement -> assignment NEWLINE .)
    error           reduce using rule 6 (statement -> assignment NEWLINE .)
    NAME            reduce using rule 6 (statement -> assignment NEWLINE .)
    NEWLINE         reduce using rule 6 (statement -> assignment NEWLINE .)
    $end            reduce using rule 6 (statement -> assignment NEWLINE .)
    ENDW            reduce using rule 6 (statement -> assignment NEWLINE .)
    ENDU            reduce using rule 6 (statement -> assignment NEWLINE .)
    ENDIF           reduce using rule 6 (statement -> assignment NEWLINE .)


state 30

    (7) statement -> convert NEWLINE .

    VARIANT         reduce using rule 7 (statement -> convert NEWLINE .)
    CONVERT         reduce using rule 7 (statement -> convert NEWLINE .)
    WHILE           reduce using rule 7 (statement -> convert NEWLINE .)
    UNTIL           reduce using rule 7 (statement -> convert NEWLINE .)
    IFLESS          reduce using rule 7 (statement -> convert NEWLINE .)
    IFNLESS         reduce using rule 7 (statement -> convert NEWLINE .)
    IFZERO          reduce using rule 7 (statement -> convert NEWLINE .)
    IFNZERO         reduce using rule 7 (statement -> convert NEWLINE .)
    IFHIGH          reduce using rule 7 (statement -> convert NEWLINE .)
    IFNHIGH         reduce using rule 7 (statement -> convert NEWLINE .)
    error           reduce using rule 7 (statement -> convert NEWLINE .)
    NAME            reduce using rule 7 (statement -> convert NEWLINE .)
    NEWLINE         reduce using rule 7 (statement -> convert NEWLINE .)
    $end            reduce using rule 7 (statement -> convert NEWLINE .)
    ENDW            reduce using rule 7 (statement -> convert NEWLINE .)
    ENDU            reduce using rule 7 (statement -> convert NEWLINE .)
    ENDIF           reduce using rule 7 (statement -> convert NEWLINE .)


state 31

    (71) convert -> convert error .

    NEWLINE         reduce using rule 71 (convert -> convert error .)
    error           reduce using rule 71 (convert -> convert error .)


state 32

    (8) statement -> while NEWLINE .

    VARIANT         reduce using rule 8 (statement -> while NEWLINE .)
    CONVERT         reduce using rule 8 (statement -> while NEWLINE .)
    WHILE           reduce using rule 8 (statement -> while NEWLINE .)
    UNTIL           reduce using rule 8 (statement -> while NEWLINE .)
    IFLESS          reduce using rule 8 (statement -> while NEWLINE .)
    IFNLESS         reduce using rule 8 (statement -> while NEWLINE .)
    IFZERO          reduce using rule 8 (statement -> while NEWLINE .)
    IFNZERO         reduce using rule 8 (statement -> while NEWLINE .)
    IFHIGH          reduce using rule 8 (statement -> while NEWLINE .)
    IFNHIGH         reduce using rule 8 (statement -> while NEWLINE .)
    error           reduce using rule 8 (statement -> while NEWLINE .)
    NAME            reduce using rule 8 (statement -> while NEWLINE .)
    NEWLINE         reduce using rule 8 (statement -> while NEWLINE .)
    $end            reduce using rule 8 (statement -> while NEWLINE .)
    ENDW            reduce using rule 8 (statement -> while NEWLINE .)
    ENDU            reduce using rule 8 (statement -> while NEWLINE .)
    ENDIF           reduce using rule 8 (statement -> while NEWLINE .)


state 33

    (9) statement -> until NEWLINE .

    VARIANT         reduce using rule 9 (statement -> until NEWLINE .)
    CONVERT         reduce using rule 9 (statement -> until NEWLINE .)
    WHILE           reduce using rule 9 (statement -> until NEWLINE .)
    UNTIL           reduce using rule 9 (statement -> until NEWLINE .)
    IFLESS          reduce using rule 9 (statement -> until NEWLINE .)
    IFNLESS         reduce using rule 9 (statement -> until NEWLINE .)
    IFZERO          reduce using rule 9 (statement -> until NEWLINE .)
    IFNZERO         reduce using rule 9 (statement -> until NEWLINE .)
    IFHIGH          reduce using rule 9 (statement -> until NEWLINE .)
    IFNHIGH         reduce using rule 9 (statement -> until NEWLINE .)
    error           reduce using rule 9 (statement -> until NEWLINE .)
    NAME            reduce using rule 9 (statement -> until NEWLINE .)
    NEWLINE         reduce using rule 9 (statement -> until NEWLINE .)
    $end            reduce using rule 9 (statement -> until NEWLINE .)
    ENDW            reduce using rule 9 (statement -> until NEWLINE .)
    ENDU            reduce using rule 9 (statement -> until NEWLINE .)
    ENDIF           reduce using rule 9 (statement -> until NEWLINE .)


state 34

    (10) statement -> if NEWLINE .

    VARIANT         reduce using rule 10 (statement -> if NEWLINE .)
    CONVERT         reduce using rule 10 (statement -> if NEWLINE .)
    WHILE           reduce using rule 10 (statement -> if NEWLINE .)
    UNTIL           reduce using rule 10 (statement -> if NEWLINE .)
    IFLESS          reduce using rule 10 (statement -> if NEWLINE .)
    IFNLESS         reduce using rule 10 (statement -> if NEWLINE .)
    IFZERO          reduce using rule 10 (statement -> if NEWLINE .)
    IFNZERO         reduce using rule 10 (statement -> if NEWLINE .)
    IFHIGH          reduce using rule 10 (statement -> if NEWLINE .)
    IFNHIGH         reduce using rule 10 (statement -> if NEWLINE .)
    error           reduce using rule 10 (statement -> if NEWLINE .)
    NAME            reduce using rule 10 (statement -> if NEWLINE .)
    NEWLINE         reduce using rule 10 (statement -> if NEWLINE .)
    $end            reduce using rule 10 (statement -> if NEWLINE .)
    ENDW            reduce using rule 10 (statement -> if NEWLINE .)
    ENDU            reduce using rule 10 (statement -> if NEWLINE .)
    ENDIF           reduce using rule 10 (statement -> if NEWLINE .)


state 35

    (11) statement -> statement_error NEWLINE .

    VARIANT         reduce using rule 11 (statement -> statement_error NEWLINE .)
    CONVERT         reduce using rule 11 (statement -> statement_error NEWLINE .)
    WHILE           reduce using rule 11 (statement -> statement_error NEWLINE .)
    UNTIL           reduce using rule 11 (statement -> statement_error NEWLINE .)
    IFLESS          reduce using rule 11 (statement -> statement_error NEWLINE .)
    IFNLESS         reduce using rule 11 (statement -> statement_error NEWLINE .)
    IFZERO          reduce using rule 11 (statement -> statement_error NEWLINE .)
    IFNZERO         reduce using rule 11 (statement -> statement_error NEWLINE .)
    IFHIGH          reduce using rule 11 (statement -> statement_error NEWLINE .)
    IFNHIGH         reduce using rule 11 (statement -> statement_error NEWLINE .)
    error           reduce using rule 11 (statement -> statement_error NEWLINE .)
    NAME            reduce using rule 11 (statement -> statement_error NEWLINE .)
    NEWLINE         reduce using rule 11 (statement -> statement_error NEWLINE .)
    $end            reduce using rule 11 (statement -> statement_error NEWLINE .)
    ENDW            reduce using rule 11 (statement -> statement_error NEWLINE .)
    ENDU            reduce using rule 11 (statement -> statement_error NEWLINE .)
    ENDIF           reduce using rule 11 (statement -> statement_error NEWLINE .)


state 36

    (84) statement_error -> statement_error error .

    NEWLINE         reduce using rule 84 (statement_error -> statement_error error .)
    error           reduce using rule 84 (statement_error -> statement_error error .)


state 37

    (13) declaration -> VARIANT variant .
    (14) declaration -> VARIANT variant . ASSIGNMENT initialization
    (16) declaration -> VARIANT variant . ASSIGNMENT error

    NEWLINE         reduce using rule 13 (declaration -> VARIANT variant .)
    error           reduce using rule 13 (declaration -> VARIANT variant .)
    ASSIGNMENT      shift and go to state 66


state 38

    (15) declaration -> VARIANT error .

    NEWLINE         reduce using rule 15 (declaration -> VARIANT error .)
    error           reduce using rule 15 (declaration -> VARIANT error .)


state 39

    (64) assignment -> variant ASSIGNMENT . expression
    (65) assignment -> variant ASSIGNMENT . error
    (40) expression -> . math_expression
    (41) expression -> . const
    (42) expression -> . variant
    (49) math_expression -> . expression PLUS expression
    (50) math_expression -> . MINUS expression
    (57) const -> . TRUE
    (58) const -> . FALSE
    (59) const -> . DECIMAL
    (60) const -> . LETTERS
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    error           shift and go to state 69
    MINUS           shift and go to state 72
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    DECIMAL         shift and go to state 75
    LETTERS         shift and go to state 76
    NAME            shift and go to state 24

    variant                        shift and go to state 67
    expression                     shift and go to state 68
    math_expression                shift and go to state 70
    const                          shift and go to state 71

state 40

    (66) convert -> CONVERT type . TO type variant
    (67) convert -> CONVERT type . TO type error
    (68) convert -> CONVERT type . TO error
    (69) convert -> CONVERT type . error

    TO              shift and go to state 77
    error           shift and go to state 78


state 41

    (70) convert -> CONVERT error .

    NEWLINE         reduce using rule 70 (convert -> CONVERT error .)
    error           reduce using rule 70 (convert -> CONVERT error .)


state 42

    (72) type -> BOOL .

    TO              reduce using rule 72 (type -> BOOL .)
    error           reduce using rule 72 (type -> BOOL .)
    NAME            reduce using rule 72 (type -> BOOL .)


state 43

    (73) type -> DIGIT .

    TO              reduce using rule 73 (type -> DIGIT .)
    error           reduce using rule 73 (type -> DIGIT .)
    NAME            reduce using rule 73 (type -> DIGIT .)


state 44

    (74) type -> STRING .

    TO              reduce using rule 74 (type -> STRING .)
    error           reduce using rule 74 (type -> STRING .)
    NAME            reduce using rule 74 (type -> STRING .)


state 45

    (75) while -> WHILE bool_expression . NEWLINE statements ENDW
    (55) bool_math_expression -> bool_expression . PLUS bool_expression

    NEWLINE         shift and go to state 79
    PLUS            shift and go to state 80


state 46

    (46) bool_expression -> bool_math_expression .

    NEWLINE         reduce using rule 46 (bool_expression -> bool_math_expression .)
    PLUS            reduce using rule 46 (bool_expression -> bool_math_expression .)


state 47

    (47) bool_expression -> bool_const .

    NEWLINE         reduce using rule 47 (bool_expression -> bool_const .)
    PLUS            reduce using rule 47 (bool_expression -> bool_const .)


state 48

    (48) bool_expression -> variant .

    NEWLINE         reduce using rule 48 (bool_expression -> variant .)
    PLUS            reduce using rule 48 (bool_expression -> variant .)


state 49

    (56) bool_math_expression -> MINUS . bool_expression
    (46) bool_expression -> . bool_math_expression
    (47) bool_expression -> . bool_const
    (48) bool_expression -> . variant
    (55) bool_math_expression -> . bool_expression PLUS bool_expression
    (56) bool_math_expression -> . MINUS bool_expression
    (62) bool_const -> . TRUE
    (63) bool_const -> . FALSE
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    MINUS           shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NAME            shift and go to state 24

    bool_expression                shift and go to state 81
    bool_math_expression           shift and go to state 46
    bool_const                     shift and go to state 47
    variant                        shift and go to state 48

state 50

    (62) bool_const -> TRUE .

    NEWLINE         reduce using rule 62 (bool_const -> TRUE .)
    PLUS            reduce using rule 62 (bool_const -> TRUE .)


state 51

    (63) bool_const -> FALSE .

    NEWLINE         reduce using rule 63 (bool_const -> FALSE .)
    PLUS            reduce using rule 63 (bool_const -> FALSE .)


state 52

    (76) until -> UNTIL bool_expression . NEWLINE statements ENDU
    (55) bool_math_expression -> bool_expression . PLUS bool_expression

    NEWLINE         shift and go to state 82
    PLUS            shift and go to state 80


state 53

    (77) if -> IFLESS decimal_expression . COMMA decimal_expression NEWLINE statements ENDIF
    (53) dec_math_expression -> decimal_expression . PLUS decimal_expression

    COMMA           shift and go to state 83
    PLUS            shift and go to state 84


state 54

    (43) decimal_expression -> dec_math_expression .

    COMMA           reduce using rule 43 (decimal_expression -> dec_math_expression .)
    PLUS            reduce using rule 43 (decimal_expression -> dec_math_expression .)
    NEWLINE         reduce using rule 43 (decimal_expression -> dec_math_expression .)
    RSQBRACKET      reduce using rule 43 (decimal_expression -> dec_math_expression .)


state 55

    (44) decimal_expression -> decimal_const .

    COMMA           reduce using rule 44 (decimal_expression -> decimal_const .)
    PLUS            reduce using rule 44 (decimal_expression -> decimal_const .)
    NEWLINE         reduce using rule 44 (decimal_expression -> decimal_const .)
    RSQBRACKET      reduce using rule 44 (decimal_expression -> decimal_const .)


state 56

    (45) decimal_expression -> variant .

    COMMA           reduce using rule 45 (decimal_expression -> variant .)
    PLUS            reduce using rule 45 (decimal_expression -> variant .)
    NEWLINE         reduce using rule 45 (decimal_expression -> variant .)
    RSQBRACKET      reduce using rule 45 (decimal_expression -> variant .)


state 57

    (54) dec_math_expression -> MINUS . decimal_expression
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (53) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (54) dec_math_expression -> . MINUS decimal_expression
    (61) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    MINUS           shift and go to state 57
    DECIMAL         shift and go to state 58
    NAME            shift and go to state 24

    decimal_expression             shift and go to state 85
    dec_math_expression            shift and go to state 54
    decimal_const                  shift and go to state 55
    variant                        shift and go to state 56

state 58

    (61) decimal_const -> DECIMAL .

    COMMA           reduce using rule 61 (decimal_const -> DECIMAL .)
    PLUS            reduce using rule 61 (decimal_const -> DECIMAL .)
    NEWLINE         reduce using rule 61 (decimal_const -> DECIMAL .)
    RSQBRACKET      reduce using rule 61 (decimal_const -> DECIMAL .)


state 59

    (78) if -> IFNLESS decimal_expression . COMMA decimal_expression NEWLINE statements ENDIF
    (53) dec_math_expression -> decimal_expression . PLUS decimal_expression

    COMMA           shift and go to state 86
    PLUS            shift and go to state 84


state 60

    (79) if -> IFZERO decimal_expression . NEWLINE statements ENDIF
    (53) dec_math_expression -> decimal_expression . PLUS decimal_expression

    NEWLINE         shift and go to state 87
    PLUS            shift and go to state 84


state 61

    (80) if -> IFNZERO decimal_expression . NEWLINE statements ENDIF
    (53) dec_math_expression -> decimal_expression . PLUS decimal_expression

    NEWLINE         shift and go to state 88
    PLUS            shift and go to state 84


state 62

    (81) if -> IFHIGH decimal_expression . COMMA decimal_expression NEWLINE statements ENDIF
    (53) dec_math_expression -> decimal_expression . PLUS decimal_expression

    COMMA           shift and go to state 89
    PLUS            shift and go to state 84


state 63

    (82) if -> IFNHIGH decimal_expression . COMMA decimal_expression NEWLINE statements ENDIF
    (53) dec_math_expression -> decimal_expression . PLUS decimal_expression

    COMMA           shift and go to state 90
    PLUS            shift and go to state 84


state 64

    (19) variant -> NAME varsize .
    (26) varsize -> varsize . error

  ! shift/reduce conflict for error resolved as shift
    ASSIGNMENT      reduce using rule 19 (variant -> NAME varsize .)
    NEWLINE         reduce using rule 19 (variant -> NAME varsize .)
    PLUS            reduce using rule 19 (variant -> NAME varsize .)
    COMMA           reduce using rule 19 (variant -> NAME varsize .)
    RSQBRACKET      reduce using rule 19 (variant -> NAME varsize .)
    error           shift and go to state 91

  ! error           [ reduce using rule 19 (variant -> NAME varsize .) ]


state 65

    (20) varsize -> LSQBRACKET . decimal_expression RSQBRACKET
    (21) varsize -> LSQBRACKET . decimal_expression COMMA decimal_expression RSQBRACKET
    (22) varsize -> LSQBRACKET . error RSQBRACKET
    (23) varsize -> LSQBRACKET . error COMMA decimal_expression RSQBRACKET
    (24) varsize -> LSQBRACKET . decimal_expression COMMA error RSQBRACKET
    (25) varsize -> LSQBRACKET . error COMMA error RSQBRACKET
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (53) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (54) dec_math_expression -> . MINUS decimal_expression
    (61) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    error           shift and go to state 93
    MINUS           shift and go to state 57
    DECIMAL         shift and go to state 58
    NAME            shift and go to state 24

    decimal_expression             shift and go to state 92
    dec_math_expression            shift and go to state 54
    decimal_const                  shift and go to state 55
    variant                        shift and go to state 56

state 66

    (14) declaration -> VARIANT variant ASSIGNMENT . initialization
    (16) declaration -> VARIANT variant ASSIGNMENT . error
    (27) initialization -> . LBRACE init_lists RBRACE

    error           shift and go to state 95
    LBRACE          shift and go to state 96

    initialization                 shift and go to state 94

state 67

    (42) expression -> variant .

    PLUS            reduce using rule 42 (expression -> variant .)
    NEWLINE         reduce using rule 42 (expression -> variant .)


state 68

    (64) assignment -> variant ASSIGNMENT expression .
    (49) math_expression -> expression . PLUS expression

    NEWLINE         reduce using rule 64 (assignment -> variant ASSIGNMENT expression .)
    PLUS            shift and go to state 97


state 69

    (65) assignment -> variant ASSIGNMENT error .

    NEWLINE         reduce using rule 65 (assignment -> variant ASSIGNMENT error .)


state 70

    (40) expression -> math_expression .

    PLUS            reduce using rule 40 (expression -> math_expression .)
    NEWLINE         reduce using rule 40 (expression -> math_expression .)


state 71

    (41) expression -> const .

    PLUS            reduce using rule 41 (expression -> const .)
    NEWLINE         reduce using rule 41 (expression -> const .)


state 72

    (50) math_expression -> MINUS . expression
    (40) expression -> . math_expression
    (41) expression -> . const
    (42) expression -> . variant
    (49) math_expression -> . expression PLUS expression
    (50) math_expression -> . MINUS expression
    (57) const -> . TRUE
    (58) const -> . FALSE
    (59) const -> . DECIMAL
    (60) const -> . LETTERS
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    MINUS           shift and go to state 72
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    DECIMAL         shift and go to state 75
    LETTERS         shift and go to state 76
    NAME            shift and go to state 24

    expression                     shift and go to state 98
    math_expression                shift and go to state 70
    const                          shift and go to state 71
    variant                        shift and go to state 67

state 73

    (57) const -> TRUE .

    PLUS            reduce using rule 57 (const -> TRUE .)
    NEWLINE         reduce using rule 57 (const -> TRUE .)
    SEMICOLON       reduce using rule 57 (const -> TRUE .)
    COMMA           reduce using rule 57 (const -> TRUE .)


state 74

    (58) const -> FALSE .

    PLUS            reduce using rule 58 (const -> FALSE .)
    NEWLINE         reduce using rule 58 (const -> FALSE .)
    SEMICOLON       reduce using rule 58 (const -> FALSE .)
    COMMA           reduce using rule 58 (const -> FALSE .)


state 75

    (59) const -> DECIMAL .

    PLUS            reduce using rule 59 (const -> DECIMAL .)
    NEWLINE         reduce using rule 59 (const -> DECIMAL .)
    SEMICOLON       reduce using rule 59 (const -> DECIMAL .)
    COMMA           reduce using rule 59 (const -> DECIMAL .)


state 76

    (60) const -> LETTERS .

    PLUS            reduce using rule 60 (const -> LETTERS .)
    NEWLINE         reduce using rule 60 (const -> LETTERS .)
    SEMICOLON       reduce using rule 60 (const -> LETTERS .)
    COMMA           reduce using rule 60 (const -> LETTERS .)


state 77

    (66) convert -> CONVERT type TO . type variant
    (67) convert -> CONVERT type TO . type error
    (68) convert -> CONVERT type TO . error
    (72) type -> . BOOL
    (73) type -> . DIGIT
    (74) type -> . STRING

    error           shift and go to state 100
    BOOL            shift and go to state 42
    DIGIT           shift and go to state 43
    STRING          shift and go to state 44

    type                           shift and go to state 99

state 78

    (69) convert -> CONVERT type error .

    NEWLINE         reduce using rule 69 (convert -> CONVERT type error .)
    error           reduce using rule 69 (convert -> CONVERT type error .)


state 79

    (75) while -> WHILE bool_expression NEWLINE . statements ENDW
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . until NEWLINE
    (10) statement -> . if NEWLINE
    (11) statement -> . statement_error NEWLINE
    (12) empty -> .
    (13) declaration -> . VARIANT variant
    (14) declaration -> . VARIANT variant ASSIGNMENT initialization
    (15) declaration -> . VARIANT error
    (16) declaration -> . VARIANT variant ASSIGNMENT error
    (17) declaration -> . declaration error
    (64) assignment -> . variant ASSIGNMENT expression
    (65) assignment -> . variant ASSIGNMENT error
    (66) convert -> . CONVERT type TO type variant
    (67) convert -> . CONVERT type TO type error
    (68) convert -> . CONVERT type TO error
    (69) convert -> . CONVERT type error
    (70) convert -> . CONVERT error
    (71) convert -> . convert error
    (75) while -> . WHILE bool_expression NEWLINE statements ENDW
    (76) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (77) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (83) statement_error -> . error
    (84) statement_error -> . statement_error error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    NEWLINE         reduce using rule 12 (empty -> .)
    VARIANT         shift and go to state 12
    CONVERT         shift and go to state 15
    WHILE           shift and go to state 16
    UNTIL           shift and go to state 17
    IFLESS          shift and go to state 18
    IFNLESS         shift and go to state 19
    IFZERO          shift and go to state 20
    IFNZERO         shift and go to state 21
    IFHIGH          shift and go to state 22
    IFNHIGH         shift and go to state 23
    error           shift and go to state 14
    NAME            shift and go to state 24

    statements                     shift and go to state 101
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    while                          shift and go to state 8
    until                          shift and go to state 9
    if                             shift and go to state 10
    statement_error                shift and go to state 11
    variant                        shift and go to state 13

state 80

    (55) bool_math_expression -> bool_expression PLUS . bool_expression
    (46) bool_expression -> . bool_math_expression
    (47) bool_expression -> . bool_const
    (48) bool_expression -> . variant
    (55) bool_math_expression -> . bool_expression PLUS bool_expression
    (56) bool_math_expression -> . MINUS bool_expression
    (62) bool_const -> . TRUE
    (63) bool_const -> . FALSE
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    MINUS           shift and go to state 49
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51
    NAME            shift and go to state 24

    bool_expression                shift and go to state 102
    bool_math_expression           shift and go to state 46
    bool_const                     shift and go to state 47
    variant                        shift and go to state 48

state 81

    (56) bool_math_expression -> MINUS bool_expression .
    (55) bool_math_expression -> bool_expression . PLUS bool_expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 56 (bool_math_expression -> MINUS bool_expression .)
    PLUS            shift and go to state 80

  ! PLUS            [ reduce using rule 56 (bool_math_expression -> MINUS bool_expression .) ]


state 82

    (76) until -> UNTIL bool_expression NEWLINE . statements ENDU
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . until NEWLINE
    (10) statement -> . if NEWLINE
    (11) statement -> . statement_error NEWLINE
    (12) empty -> .
    (13) declaration -> . VARIANT variant
    (14) declaration -> . VARIANT variant ASSIGNMENT initialization
    (15) declaration -> . VARIANT error
    (16) declaration -> . VARIANT variant ASSIGNMENT error
    (17) declaration -> . declaration error
    (64) assignment -> . variant ASSIGNMENT expression
    (65) assignment -> . variant ASSIGNMENT error
    (66) convert -> . CONVERT type TO type variant
    (67) convert -> . CONVERT type TO type error
    (68) convert -> . CONVERT type TO error
    (69) convert -> . CONVERT type error
    (70) convert -> . CONVERT error
    (71) convert -> . convert error
    (75) while -> . WHILE bool_expression NEWLINE statements ENDW
    (76) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (77) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (83) statement_error -> . error
    (84) statement_error -> . statement_error error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    NEWLINE         reduce using rule 12 (empty -> .)
    VARIANT         shift and go to state 12
    CONVERT         shift and go to state 15
    WHILE           shift and go to state 16
    UNTIL           shift and go to state 17
    IFLESS          shift and go to state 18
    IFNLESS         shift and go to state 19
    IFZERO          shift and go to state 20
    IFNZERO         shift and go to state 21
    IFHIGH          shift and go to state 22
    IFNHIGH         shift and go to state 23
    error           shift and go to state 14
    NAME            shift and go to state 24

    statements                     shift and go to state 103
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    while                          shift and go to state 8
    until                          shift and go to state 9
    if                             shift and go to state 10
    statement_error                shift and go to state 11
    variant                        shift and go to state 13

state 83

    (77) if -> IFLESS decimal_expression COMMA . decimal_expression NEWLINE statements ENDIF
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (53) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (54) dec_math_expression -> . MINUS decimal_expression
    (61) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    MINUS           shift and go to state 57
    DECIMAL         shift and go to state 58
    NAME            shift and go to state 24

    decimal_expression             shift and go to state 104
    dec_math_expression            shift and go to state 54
    decimal_const                  shift and go to state 55
    variant                        shift and go to state 56

state 84

    (53) dec_math_expression -> decimal_expression PLUS . decimal_expression
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (53) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (54) dec_math_expression -> . MINUS decimal_expression
    (61) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    MINUS           shift and go to state 57
    DECIMAL         shift and go to state 58
    NAME            shift and go to state 24

    decimal_expression             shift and go to state 105
    dec_math_expression            shift and go to state 54
    decimal_const                  shift and go to state 55
    variant                        shift and go to state 56

state 85

    (54) dec_math_expression -> MINUS decimal_expression .
    (53) dec_math_expression -> decimal_expression . PLUS decimal_expression

  ! shift/reduce conflict for PLUS resolved as shift
    COMMA           reduce using rule 54 (dec_math_expression -> MINUS decimal_expression .)
    NEWLINE         reduce using rule 54 (dec_math_expression -> MINUS decimal_expression .)
    RSQBRACKET      reduce using rule 54 (dec_math_expression -> MINUS decimal_expression .)
    PLUS            shift and go to state 84

  ! PLUS            [ reduce using rule 54 (dec_math_expression -> MINUS decimal_expression .) ]


state 86

    (78) if -> IFNLESS decimal_expression COMMA . decimal_expression NEWLINE statements ENDIF
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (53) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (54) dec_math_expression -> . MINUS decimal_expression
    (61) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    MINUS           shift and go to state 57
    DECIMAL         shift and go to state 58
    NAME            shift and go to state 24

    decimal_expression             shift and go to state 106
    dec_math_expression            shift and go to state 54
    decimal_const                  shift and go to state 55
    variant                        shift and go to state 56

state 87

    (79) if -> IFZERO decimal_expression NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . until NEWLINE
    (10) statement -> . if NEWLINE
    (11) statement -> . statement_error NEWLINE
    (12) empty -> .
    (13) declaration -> . VARIANT variant
    (14) declaration -> . VARIANT variant ASSIGNMENT initialization
    (15) declaration -> . VARIANT error
    (16) declaration -> . VARIANT variant ASSIGNMENT error
    (17) declaration -> . declaration error
    (64) assignment -> . variant ASSIGNMENT expression
    (65) assignment -> . variant ASSIGNMENT error
    (66) convert -> . CONVERT type TO type variant
    (67) convert -> . CONVERT type TO type error
    (68) convert -> . CONVERT type TO error
    (69) convert -> . CONVERT type error
    (70) convert -> . CONVERT error
    (71) convert -> . convert error
    (75) while -> . WHILE bool_expression NEWLINE statements ENDW
    (76) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (77) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (83) statement_error -> . error
    (84) statement_error -> . statement_error error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    NEWLINE         reduce using rule 12 (empty -> .)
    VARIANT         shift and go to state 12
    CONVERT         shift and go to state 15
    WHILE           shift and go to state 16
    UNTIL           shift and go to state 17
    IFLESS          shift and go to state 18
    IFNLESS         shift and go to state 19
    IFZERO          shift and go to state 20
    IFNZERO         shift and go to state 21
    IFHIGH          shift and go to state 22
    IFNHIGH         shift and go to state 23
    error           shift and go to state 14
    NAME            shift and go to state 24

    statements                     shift and go to state 107
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    while                          shift and go to state 8
    until                          shift and go to state 9
    if                             shift and go to state 10
    statement_error                shift and go to state 11
    variant                        shift and go to state 13

state 88

    (80) if -> IFNZERO decimal_expression NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . until NEWLINE
    (10) statement -> . if NEWLINE
    (11) statement -> . statement_error NEWLINE
    (12) empty -> .
    (13) declaration -> . VARIANT variant
    (14) declaration -> . VARIANT variant ASSIGNMENT initialization
    (15) declaration -> . VARIANT error
    (16) declaration -> . VARIANT variant ASSIGNMENT error
    (17) declaration -> . declaration error
    (64) assignment -> . variant ASSIGNMENT expression
    (65) assignment -> . variant ASSIGNMENT error
    (66) convert -> . CONVERT type TO type variant
    (67) convert -> . CONVERT type TO type error
    (68) convert -> . CONVERT type TO error
    (69) convert -> . CONVERT type error
    (70) convert -> . CONVERT error
    (71) convert -> . convert error
    (75) while -> . WHILE bool_expression NEWLINE statements ENDW
    (76) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (77) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (83) statement_error -> . error
    (84) statement_error -> . statement_error error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    NEWLINE         reduce using rule 12 (empty -> .)
    VARIANT         shift and go to state 12
    CONVERT         shift and go to state 15
    WHILE           shift and go to state 16
    UNTIL           shift and go to state 17
    IFLESS          shift and go to state 18
    IFNLESS         shift and go to state 19
    IFZERO          shift and go to state 20
    IFNZERO         shift and go to state 21
    IFHIGH          shift and go to state 22
    IFNHIGH         shift and go to state 23
    error           shift and go to state 14
    NAME            shift and go to state 24

    statements                     shift and go to state 108
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    while                          shift and go to state 8
    until                          shift and go to state 9
    if                             shift and go to state 10
    statement_error                shift and go to state 11
    variant                        shift and go to state 13

state 89

    (81) if -> IFHIGH decimal_expression COMMA . decimal_expression NEWLINE statements ENDIF
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (53) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (54) dec_math_expression -> . MINUS decimal_expression
    (61) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    MINUS           shift and go to state 57
    DECIMAL         shift and go to state 58
    NAME            shift and go to state 24

    decimal_expression             shift and go to state 109
    dec_math_expression            shift and go to state 54
    decimal_const                  shift and go to state 55
    variant                        shift and go to state 56

state 90

    (82) if -> IFNHIGH decimal_expression COMMA . decimal_expression NEWLINE statements ENDIF
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (53) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (54) dec_math_expression -> . MINUS decimal_expression
    (61) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    MINUS           shift and go to state 57
    DECIMAL         shift and go to state 58
    NAME            shift and go to state 24

    decimal_expression             shift and go to state 110
    dec_math_expression            shift and go to state 54
    decimal_const                  shift and go to state 55
    variant                        shift and go to state 56

state 91

    (26) varsize -> varsize error .

    error           reduce using rule 26 (varsize -> varsize error .)
    ASSIGNMENT      reduce using rule 26 (varsize -> varsize error .)
    NEWLINE         reduce using rule 26 (varsize -> varsize error .)
    PLUS            reduce using rule 26 (varsize -> varsize error .)
    COMMA           reduce using rule 26 (varsize -> varsize error .)
    RSQBRACKET      reduce using rule 26 (varsize -> varsize error .)


state 92

    (20) varsize -> LSQBRACKET decimal_expression . RSQBRACKET
    (21) varsize -> LSQBRACKET decimal_expression . COMMA decimal_expression RSQBRACKET
    (24) varsize -> LSQBRACKET decimal_expression . COMMA error RSQBRACKET
    (53) dec_math_expression -> decimal_expression . PLUS decimal_expression

    RSQBRACKET      shift and go to state 111
    COMMA           shift and go to state 112
    PLUS            shift and go to state 84


state 93

    (22) varsize -> LSQBRACKET error . RSQBRACKET
    (23) varsize -> LSQBRACKET error . COMMA decimal_expression RSQBRACKET
    (25) varsize -> LSQBRACKET error . COMMA error RSQBRACKET

    RSQBRACKET      shift and go to state 113
    COMMA           shift and go to state 114


state 94

    (14) declaration -> VARIANT variant ASSIGNMENT initialization .

    NEWLINE         reduce using rule 14 (declaration -> VARIANT variant ASSIGNMENT initialization .)
    error           reduce using rule 14 (declaration -> VARIANT variant ASSIGNMENT initialization .)


state 95

    (16) declaration -> VARIANT variant ASSIGNMENT error .

    NEWLINE         reduce using rule 16 (declaration -> VARIANT variant ASSIGNMENT error .)
    error           reduce using rule 16 (declaration -> VARIANT variant ASSIGNMENT error .)


state 96

    (27) initialization -> LBRACE . init_lists RBRACE
    (28) init_lists -> . init_lists init_list
    (29) init_lists -> . init_list
    (30) init_list -> . LBRACE inits RBRACE
    (31) init_list -> . LBRACE RBRACE

    LBRACE          shift and go to state 115

    init_lists                     shift and go to state 116
    init_list                      shift and go to state 117

state 97

    (49) math_expression -> expression PLUS . expression
    (40) expression -> . math_expression
    (41) expression -> . const
    (42) expression -> . variant
    (49) math_expression -> . expression PLUS expression
    (50) math_expression -> . MINUS expression
    (57) const -> . TRUE
    (58) const -> . FALSE
    (59) const -> . DECIMAL
    (60) const -> . LETTERS
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    MINUS           shift and go to state 72
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    DECIMAL         shift and go to state 75
    LETTERS         shift and go to state 76
    NAME            shift and go to state 24

    expression                     shift and go to state 118
    math_expression                shift and go to state 70
    const                          shift and go to state 71
    variant                        shift and go to state 67

state 98

    (50) math_expression -> MINUS expression .
    (49) math_expression -> expression . PLUS expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 50 (math_expression -> MINUS expression .)
    PLUS            shift and go to state 97

  ! PLUS            [ reduce using rule 50 (math_expression -> MINUS expression .) ]


state 99

    (66) convert -> CONVERT type TO type . variant
    (67) convert -> CONVERT type TO type . error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    error           shift and go to state 120
    NAME            shift and go to state 24

    variant                        shift and go to state 119

state 100

    (68) convert -> CONVERT type TO error .

    NEWLINE         reduce using rule 68 (convert -> CONVERT type TO error .)
    error           reduce using rule 68 (convert -> CONVERT type TO error .)


state 101

    (75) while -> WHILE bool_expression NEWLINE statements . ENDW
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . until NEWLINE
    (10) statement -> . if NEWLINE
    (11) statement -> . statement_error NEWLINE
    (12) empty -> .
    (13) declaration -> . VARIANT variant
    (14) declaration -> . VARIANT variant ASSIGNMENT initialization
    (15) declaration -> . VARIANT error
    (16) declaration -> . VARIANT variant ASSIGNMENT error
    (17) declaration -> . declaration error
    (64) assignment -> . variant ASSIGNMENT expression
    (65) assignment -> . variant ASSIGNMENT error
    (66) convert -> . CONVERT type TO type variant
    (67) convert -> . CONVERT type TO type error
    (68) convert -> . CONVERT type TO error
    (69) convert -> . CONVERT type error
    (70) convert -> . CONVERT error
    (71) convert -> . convert error
    (75) while -> . WHILE bool_expression NEWLINE statements ENDW
    (76) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (77) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (83) statement_error -> . error
    (84) statement_error -> . statement_error error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    ENDW            shift and go to state 121
    NEWLINE         reduce using rule 12 (empty -> .)
    VARIANT         shift and go to state 12
    CONVERT         shift and go to state 15
    WHILE           shift and go to state 16
    UNTIL           shift and go to state 17
    IFLESS          shift and go to state 18
    IFNLESS         shift and go to state 19
    IFZERO          shift and go to state 20
    IFNZERO         shift and go to state 21
    IFHIGH          shift and go to state 22
    IFNHIGH         shift and go to state 23
    error           shift and go to state 14
    NAME            shift and go to state 24

    statement                      shift and go to state 25
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    while                          shift and go to state 8
    until                          shift and go to state 9
    if                             shift and go to state 10
    statement_error                shift and go to state 11
    variant                        shift and go to state 13

state 102

    (55) bool_math_expression -> bool_expression PLUS bool_expression .
    (55) bool_math_expression -> bool_expression . PLUS bool_expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 55 (bool_math_expression -> bool_expression PLUS bool_expression .)
    PLUS            shift and go to state 80

  ! PLUS            [ reduce using rule 55 (bool_math_expression -> bool_expression PLUS bool_expression .) ]


state 103

    (76) until -> UNTIL bool_expression NEWLINE statements . ENDU
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . until NEWLINE
    (10) statement -> . if NEWLINE
    (11) statement -> . statement_error NEWLINE
    (12) empty -> .
    (13) declaration -> . VARIANT variant
    (14) declaration -> . VARIANT variant ASSIGNMENT initialization
    (15) declaration -> . VARIANT error
    (16) declaration -> . VARIANT variant ASSIGNMENT error
    (17) declaration -> . declaration error
    (64) assignment -> . variant ASSIGNMENT expression
    (65) assignment -> . variant ASSIGNMENT error
    (66) convert -> . CONVERT type TO type variant
    (67) convert -> . CONVERT type TO type error
    (68) convert -> . CONVERT type TO error
    (69) convert -> . CONVERT type error
    (70) convert -> . CONVERT error
    (71) convert -> . convert error
    (75) while -> . WHILE bool_expression NEWLINE statements ENDW
    (76) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (77) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (83) statement_error -> . error
    (84) statement_error -> . statement_error error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    ENDU            shift and go to state 122
    NEWLINE         reduce using rule 12 (empty -> .)
    VARIANT         shift and go to state 12
    CONVERT         shift and go to state 15
    WHILE           shift and go to state 16
    UNTIL           shift and go to state 17
    IFLESS          shift and go to state 18
    IFNLESS         shift and go to state 19
    IFZERO          shift and go to state 20
    IFNZERO         shift and go to state 21
    IFHIGH          shift and go to state 22
    IFNHIGH         shift and go to state 23
    error           shift and go to state 14
    NAME            shift and go to state 24

    statement                      shift and go to state 25
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    while                          shift and go to state 8
    until                          shift and go to state 9
    if                             shift and go to state 10
    statement_error                shift and go to state 11
    variant                        shift and go to state 13

state 104

    (77) if -> IFLESS decimal_expression COMMA decimal_expression . NEWLINE statements ENDIF
    (53) dec_math_expression -> decimal_expression . PLUS decimal_expression

    NEWLINE         shift and go to state 123
    PLUS            shift and go to state 84


state 105

    (53) dec_math_expression -> decimal_expression PLUS decimal_expression .
    (53) dec_math_expression -> decimal_expression . PLUS decimal_expression

  ! shift/reduce conflict for PLUS resolved as shift
    COMMA           reduce using rule 53 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    NEWLINE         reduce using rule 53 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    RSQBRACKET      reduce using rule 53 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    PLUS            shift and go to state 84

  ! PLUS            [ reduce using rule 53 (dec_math_expression -> decimal_expression PLUS decimal_expression .) ]


state 106

    (78) if -> IFNLESS decimal_expression COMMA decimal_expression . NEWLINE statements ENDIF
    (53) dec_math_expression -> decimal_expression . PLUS decimal_expression

    NEWLINE         shift and go to state 124
    PLUS            shift and go to state 84


state 107

    (79) if -> IFZERO decimal_expression NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . until NEWLINE
    (10) statement -> . if NEWLINE
    (11) statement -> . statement_error NEWLINE
    (12) empty -> .
    (13) declaration -> . VARIANT variant
    (14) declaration -> . VARIANT variant ASSIGNMENT initialization
    (15) declaration -> . VARIANT error
    (16) declaration -> . VARIANT variant ASSIGNMENT error
    (17) declaration -> . declaration error
    (64) assignment -> . variant ASSIGNMENT expression
    (65) assignment -> . variant ASSIGNMENT error
    (66) convert -> . CONVERT type TO type variant
    (67) convert -> . CONVERT type TO type error
    (68) convert -> . CONVERT type TO error
    (69) convert -> . CONVERT type error
    (70) convert -> . CONVERT error
    (71) convert -> . convert error
    (75) while -> . WHILE bool_expression NEWLINE statements ENDW
    (76) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (77) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (83) statement_error -> . error
    (84) statement_error -> . statement_error error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    ENDIF           shift and go to state 125
    NEWLINE         reduce using rule 12 (empty -> .)
    VARIANT         shift and go to state 12
    CONVERT         shift and go to state 15
    WHILE           shift and go to state 16
    UNTIL           shift and go to state 17
    IFLESS          shift and go to state 18
    IFNLESS         shift and go to state 19
    IFZERO          shift and go to state 20
    IFNZERO         shift and go to state 21
    IFHIGH          shift and go to state 22
    IFNHIGH         shift and go to state 23
    error           shift and go to state 14
    NAME            shift and go to state 24

    statement                      shift and go to state 25
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    while                          shift and go to state 8
    until                          shift and go to state 9
    if                             shift and go to state 10
    statement_error                shift and go to state 11
    variant                        shift and go to state 13

state 108

    (80) if -> IFNZERO decimal_expression NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . until NEWLINE
    (10) statement -> . if NEWLINE
    (11) statement -> . statement_error NEWLINE
    (12) empty -> .
    (13) declaration -> . VARIANT variant
    (14) declaration -> . VARIANT variant ASSIGNMENT initialization
    (15) declaration -> . VARIANT error
    (16) declaration -> . VARIANT variant ASSIGNMENT error
    (17) declaration -> . declaration error
    (64) assignment -> . variant ASSIGNMENT expression
    (65) assignment -> . variant ASSIGNMENT error
    (66) convert -> . CONVERT type TO type variant
    (67) convert -> . CONVERT type TO type error
    (68) convert -> . CONVERT type TO error
    (69) convert -> . CONVERT type error
    (70) convert -> . CONVERT error
    (71) convert -> . convert error
    (75) while -> . WHILE bool_expression NEWLINE statements ENDW
    (76) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (77) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (83) statement_error -> . error
    (84) statement_error -> . statement_error error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    ENDIF           shift and go to state 126
    NEWLINE         reduce using rule 12 (empty -> .)
    VARIANT         shift and go to state 12
    CONVERT         shift and go to state 15
    WHILE           shift and go to state 16
    UNTIL           shift and go to state 17
    IFLESS          shift and go to state 18
    IFNLESS         shift and go to state 19
    IFZERO          shift and go to state 20
    IFNZERO         shift and go to state 21
    IFHIGH          shift and go to state 22
    IFNHIGH         shift and go to state 23
    error           shift and go to state 14
    NAME            shift and go to state 24

    statement                      shift and go to state 25
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    while                          shift and go to state 8
    until                          shift and go to state 9
    if                             shift and go to state 10
    statement_error                shift and go to state 11
    variant                        shift and go to state 13

state 109

    (81) if -> IFHIGH decimal_expression COMMA decimal_expression . NEWLINE statements ENDIF
    (53) dec_math_expression -> decimal_expression . PLUS decimal_expression

    NEWLINE         shift and go to state 127
    PLUS            shift and go to state 84


state 110

    (82) if -> IFNHIGH decimal_expression COMMA decimal_expression . NEWLINE statements ENDIF
    (53) dec_math_expression -> decimal_expression . PLUS decimal_expression

    NEWLINE         shift and go to state 128
    PLUS            shift and go to state 84


state 111

    (20) varsize -> LSQBRACKET decimal_expression RSQBRACKET .

    error           reduce using rule 20 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    ASSIGNMENT      reduce using rule 20 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    NEWLINE         reduce using rule 20 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    PLUS            reduce using rule 20 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    COMMA           reduce using rule 20 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    RSQBRACKET      reduce using rule 20 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)


state 112

    (21) varsize -> LSQBRACKET decimal_expression COMMA . decimal_expression RSQBRACKET
    (24) varsize -> LSQBRACKET decimal_expression COMMA . error RSQBRACKET
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (53) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (54) dec_math_expression -> . MINUS decimal_expression
    (61) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    error           shift and go to state 130
    MINUS           shift and go to state 57
    DECIMAL         shift and go to state 58
    NAME            shift and go to state 24

    decimal_expression             shift and go to state 129
    dec_math_expression            shift and go to state 54
    decimal_const                  shift and go to state 55
    variant                        shift and go to state 56

state 113

    (22) varsize -> LSQBRACKET error RSQBRACKET .

    error           reduce using rule 22 (varsize -> LSQBRACKET error RSQBRACKET .)
    ASSIGNMENT      reduce using rule 22 (varsize -> LSQBRACKET error RSQBRACKET .)
    NEWLINE         reduce using rule 22 (varsize -> LSQBRACKET error RSQBRACKET .)
    PLUS            reduce using rule 22 (varsize -> LSQBRACKET error RSQBRACKET .)
    COMMA           reduce using rule 22 (varsize -> LSQBRACKET error RSQBRACKET .)
    RSQBRACKET      reduce using rule 22 (varsize -> LSQBRACKET error RSQBRACKET .)


state 114

    (23) varsize -> LSQBRACKET error COMMA . decimal_expression RSQBRACKET
    (25) varsize -> LSQBRACKET error COMMA . error RSQBRACKET
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (53) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (54) dec_math_expression -> . MINUS decimal_expression
    (61) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    error           shift and go to state 131
    MINUS           shift and go to state 57
    DECIMAL         shift and go to state 58
    NAME            shift and go to state 24

    decimal_expression             shift and go to state 132
    dec_math_expression            shift and go to state 54
    decimal_const                  shift and go to state 55
    variant                        shift and go to state 56

state 115

    (30) init_list -> LBRACE . inits RBRACE
    (31) init_list -> LBRACE . RBRACE
    (32) inits -> . inits init
    (33) inits -> . init
    (34) init -> . const_expressions COMMA const_expression SEMICOLON
    (35) init -> . const_expression SEMICOLON
    (36) const_expressions -> . const_expressions COMMA const_expression
    (37) const_expressions -> . const_expression
    (38) const_expression -> . const_math_expression
    (39) const_expression -> . const
    (51) const_math_expression -> . const_expression PLUS const_expression
    (52) const_math_expression -> . MINUS const_expression
    (57) const -> . TRUE
    (58) const -> . FALSE
    (59) const -> . DECIMAL
    (60) const -> . LETTERS

    RBRACE          shift and go to state 134
    MINUS           shift and go to state 140
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    DECIMAL         shift and go to state 75
    LETTERS         shift and go to state 76

    inits                          shift and go to state 133
    init                           shift and go to state 135
    const_expressions              shift and go to state 136
    const_expression               shift and go to state 137
    const_math_expression          shift and go to state 138
    const                          shift and go to state 139

state 116

    (27) initialization -> LBRACE init_lists . RBRACE
    (28) init_lists -> init_lists . init_list
    (30) init_list -> . LBRACE inits RBRACE
    (31) init_list -> . LBRACE RBRACE

    RBRACE          shift and go to state 141
    LBRACE          shift and go to state 115

    init_list                      shift and go to state 142

state 117

    (29) init_lists -> init_list .

    RBRACE          reduce using rule 29 (init_lists -> init_list .)
    LBRACE          reduce using rule 29 (init_lists -> init_list .)


state 118

    (49) math_expression -> expression PLUS expression .
    (49) math_expression -> expression . PLUS expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 49 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 97

  ! PLUS            [ reduce using rule 49 (math_expression -> expression PLUS expression .) ]


state 119

    (66) convert -> CONVERT type TO type variant .

    NEWLINE         reduce using rule 66 (convert -> CONVERT type TO type variant .)
    error           reduce using rule 66 (convert -> CONVERT type TO type variant .)


state 120

    (67) convert -> CONVERT type TO type error .

    NEWLINE         reduce using rule 67 (convert -> CONVERT type TO type error .)
    error           reduce using rule 67 (convert -> CONVERT type TO type error .)


state 121

    (75) while -> WHILE bool_expression NEWLINE statements ENDW .

    NEWLINE         reduce using rule 75 (while -> WHILE bool_expression NEWLINE statements ENDW .)


state 122

    (76) until -> UNTIL bool_expression NEWLINE statements ENDU .

    NEWLINE         reduce using rule 76 (until -> UNTIL bool_expression NEWLINE statements ENDU .)


state 123

    (77) if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . until NEWLINE
    (10) statement -> . if NEWLINE
    (11) statement -> . statement_error NEWLINE
    (12) empty -> .
    (13) declaration -> . VARIANT variant
    (14) declaration -> . VARIANT variant ASSIGNMENT initialization
    (15) declaration -> . VARIANT error
    (16) declaration -> . VARIANT variant ASSIGNMENT error
    (17) declaration -> . declaration error
    (64) assignment -> . variant ASSIGNMENT expression
    (65) assignment -> . variant ASSIGNMENT error
    (66) convert -> . CONVERT type TO type variant
    (67) convert -> . CONVERT type TO type error
    (68) convert -> . CONVERT type TO error
    (69) convert -> . CONVERT type error
    (70) convert -> . CONVERT error
    (71) convert -> . convert error
    (75) while -> . WHILE bool_expression NEWLINE statements ENDW
    (76) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (77) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (83) statement_error -> . error
    (84) statement_error -> . statement_error error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    NEWLINE         reduce using rule 12 (empty -> .)
    VARIANT         shift and go to state 12
    CONVERT         shift and go to state 15
    WHILE           shift and go to state 16
    UNTIL           shift and go to state 17
    IFLESS          shift and go to state 18
    IFNLESS         shift and go to state 19
    IFZERO          shift and go to state 20
    IFNZERO         shift and go to state 21
    IFHIGH          shift and go to state 22
    IFNHIGH         shift and go to state 23
    error           shift and go to state 14
    NAME            shift and go to state 24

    statements                     shift and go to state 143
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    while                          shift and go to state 8
    until                          shift and go to state 9
    if                             shift and go to state 10
    statement_error                shift and go to state 11
    variant                        shift and go to state 13

state 124

    (78) if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . until NEWLINE
    (10) statement -> . if NEWLINE
    (11) statement -> . statement_error NEWLINE
    (12) empty -> .
    (13) declaration -> . VARIANT variant
    (14) declaration -> . VARIANT variant ASSIGNMENT initialization
    (15) declaration -> . VARIANT error
    (16) declaration -> . VARIANT variant ASSIGNMENT error
    (17) declaration -> . declaration error
    (64) assignment -> . variant ASSIGNMENT expression
    (65) assignment -> . variant ASSIGNMENT error
    (66) convert -> . CONVERT type TO type variant
    (67) convert -> . CONVERT type TO type error
    (68) convert -> . CONVERT type TO error
    (69) convert -> . CONVERT type error
    (70) convert -> . CONVERT error
    (71) convert -> . convert error
    (75) while -> . WHILE bool_expression NEWLINE statements ENDW
    (76) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (77) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (83) statement_error -> . error
    (84) statement_error -> . statement_error error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    NEWLINE         reduce using rule 12 (empty -> .)
    VARIANT         shift and go to state 12
    CONVERT         shift and go to state 15
    WHILE           shift and go to state 16
    UNTIL           shift and go to state 17
    IFLESS          shift and go to state 18
    IFNLESS         shift and go to state 19
    IFZERO          shift and go to state 20
    IFNZERO         shift and go to state 21
    IFHIGH          shift and go to state 22
    IFNHIGH         shift and go to state 23
    error           shift and go to state 14
    NAME            shift and go to state 24

    statements                     shift and go to state 144
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    while                          shift and go to state 8
    until                          shift and go to state 9
    if                             shift and go to state 10
    statement_error                shift and go to state 11
    variant                        shift and go to state 13

state 125

    (79) if -> IFZERO decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 79 (if -> IFZERO decimal_expression NEWLINE statements ENDIF .)


state 126

    (80) if -> IFNZERO decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 80 (if -> IFNZERO decimal_expression NEWLINE statements ENDIF .)


state 127

    (81) if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . until NEWLINE
    (10) statement -> . if NEWLINE
    (11) statement -> . statement_error NEWLINE
    (12) empty -> .
    (13) declaration -> . VARIANT variant
    (14) declaration -> . VARIANT variant ASSIGNMENT initialization
    (15) declaration -> . VARIANT error
    (16) declaration -> . VARIANT variant ASSIGNMENT error
    (17) declaration -> . declaration error
    (64) assignment -> . variant ASSIGNMENT expression
    (65) assignment -> . variant ASSIGNMENT error
    (66) convert -> . CONVERT type TO type variant
    (67) convert -> . CONVERT type TO type error
    (68) convert -> . CONVERT type TO error
    (69) convert -> . CONVERT type error
    (70) convert -> . CONVERT error
    (71) convert -> . convert error
    (75) while -> . WHILE bool_expression NEWLINE statements ENDW
    (76) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (77) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (83) statement_error -> . error
    (84) statement_error -> . statement_error error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    NEWLINE         reduce using rule 12 (empty -> .)
    VARIANT         shift and go to state 12
    CONVERT         shift and go to state 15
    WHILE           shift and go to state 16
    UNTIL           shift and go to state 17
    IFLESS          shift and go to state 18
    IFNLESS         shift and go to state 19
    IFZERO          shift and go to state 20
    IFNZERO         shift and go to state 21
    IFHIGH          shift and go to state 22
    IFNHIGH         shift and go to state 23
    error           shift and go to state 14
    NAME            shift and go to state 24

    statements                     shift and go to state 145
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    while                          shift and go to state 8
    until                          shift and go to state 9
    if                             shift and go to state 10
    statement_error                shift and go to state 11
    variant                        shift and go to state 13

state 128

    (82) if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . until NEWLINE
    (10) statement -> . if NEWLINE
    (11) statement -> . statement_error NEWLINE
    (12) empty -> .
    (13) declaration -> . VARIANT variant
    (14) declaration -> . VARIANT variant ASSIGNMENT initialization
    (15) declaration -> . VARIANT error
    (16) declaration -> . VARIANT variant ASSIGNMENT error
    (17) declaration -> . declaration error
    (64) assignment -> . variant ASSIGNMENT expression
    (65) assignment -> . variant ASSIGNMENT error
    (66) convert -> . CONVERT type TO type variant
    (67) convert -> . CONVERT type TO type error
    (68) convert -> . CONVERT type TO error
    (69) convert -> . CONVERT type error
    (70) convert -> . CONVERT error
    (71) convert -> . convert error
    (75) while -> . WHILE bool_expression NEWLINE statements ENDW
    (76) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (77) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (83) statement_error -> . error
    (84) statement_error -> . statement_error error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    NEWLINE         reduce using rule 12 (empty -> .)
    VARIANT         shift and go to state 12
    CONVERT         shift and go to state 15
    WHILE           shift and go to state 16
    UNTIL           shift and go to state 17
    IFLESS          shift and go to state 18
    IFNLESS         shift and go to state 19
    IFZERO          shift and go to state 20
    IFNZERO         shift and go to state 21
    IFHIGH          shift and go to state 22
    IFNHIGH         shift and go to state 23
    error           shift and go to state 14
    NAME            shift and go to state 24

    statements                     shift and go to state 146
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    while                          shift and go to state 8
    until                          shift and go to state 9
    if                             shift and go to state 10
    statement_error                shift and go to state 11
    variant                        shift and go to state 13

state 129

    (21) varsize -> LSQBRACKET decimal_expression COMMA decimal_expression . RSQBRACKET
    (53) dec_math_expression -> decimal_expression . PLUS decimal_expression

    RSQBRACKET      shift and go to state 147
    PLUS            shift and go to state 84


state 130

    (24) varsize -> LSQBRACKET decimal_expression COMMA error . RSQBRACKET

    RSQBRACKET      shift and go to state 148


state 131

    (25) varsize -> LSQBRACKET error COMMA error . RSQBRACKET

    RSQBRACKET      shift and go to state 149


state 132

    (23) varsize -> LSQBRACKET error COMMA decimal_expression . RSQBRACKET
    (53) dec_math_expression -> decimal_expression . PLUS decimal_expression

    RSQBRACKET      shift and go to state 150
    PLUS            shift and go to state 84


state 133

    (30) init_list -> LBRACE inits . RBRACE
    (32) inits -> inits . init
    (34) init -> . const_expressions COMMA const_expression SEMICOLON
    (35) init -> . const_expression SEMICOLON
    (36) const_expressions -> . const_expressions COMMA const_expression
    (37) const_expressions -> . const_expression
    (38) const_expression -> . const_math_expression
    (39) const_expression -> . const
    (51) const_math_expression -> . const_expression PLUS const_expression
    (52) const_math_expression -> . MINUS const_expression
    (57) const -> . TRUE
    (58) const -> . FALSE
    (59) const -> . DECIMAL
    (60) const -> . LETTERS

    RBRACE          shift and go to state 151
    MINUS           shift and go to state 140
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    DECIMAL         shift and go to state 75
    LETTERS         shift and go to state 76

    init                           shift and go to state 152
    const_expressions              shift and go to state 136
    const_expression               shift and go to state 137
    const_math_expression          shift and go to state 138
    const                          shift and go to state 139

state 134

    (31) init_list -> LBRACE RBRACE .

    RBRACE          reduce using rule 31 (init_list -> LBRACE RBRACE .)
    LBRACE          reduce using rule 31 (init_list -> LBRACE RBRACE .)


state 135

    (33) inits -> init .

    RBRACE          reduce using rule 33 (inits -> init .)
    MINUS           reduce using rule 33 (inits -> init .)
    TRUE            reduce using rule 33 (inits -> init .)
    FALSE           reduce using rule 33 (inits -> init .)
    DECIMAL         reduce using rule 33 (inits -> init .)
    LETTERS         reduce using rule 33 (inits -> init .)


state 136

    (34) init -> const_expressions . COMMA const_expression SEMICOLON
    (36) const_expressions -> const_expressions . COMMA const_expression

    COMMA           shift and go to state 153


state 137

    (35) init -> const_expression . SEMICOLON
    (37) const_expressions -> const_expression .
    (51) const_math_expression -> const_expression . PLUS const_expression

    SEMICOLON       shift and go to state 154
    COMMA           reduce using rule 37 (const_expressions -> const_expression .)
    PLUS            shift and go to state 155


state 138

    (38) const_expression -> const_math_expression .

    SEMICOLON       reduce using rule 38 (const_expression -> const_math_expression .)
    PLUS            reduce using rule 38 (const_expression -> const_math_expression .)
    COMMA           reduce using rule 38 (const_expression -> const_math_expression .)


state 139

    (39) const_expression -> const .

    SEMICOLON       reduce using rule 39 (const_expression -> const .)
    PLUS            reduce using rule 39 (const_expression -> const .)
    COMMA           reduce using rule 39 (const_expression -> const .)


state 140

    (52) const_math_expression -> MINUS . const_expression
    (38) const_expression -> . const_math_expression
    (39) const_expression -> . const
    (51) const_math_expression -> . const_expression PLUS const_expression
    (52) const_math_expression -> . MINUS const_expression
    (57) const -> . TRUE
    (58) const -> . FALSE
    (59) const -> . DECIMAL
    (60) const -> . LETTERS

    MINUS           shift and go to state 140
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    DECIMAL         shift and go to state 75
    LETTERS         shift and go to state 76

    const_expression               shift and go to state 156
    const_math_expression          shift and go to state 138
    const                          shift and go to state 139

state 141

    (27) initialization -> LBRACE init_lists RBRACE .

    NEWLINE         reduce using rule 27 (initialization -> LBRACE init_lists RBRACE .)
    error           reduce using rule 27 (initialization -> LBRACE init_lists RBRACE .)


state 142

    (28) init_lists -> init_lists init_list .

    RBRACE          reduce using rule 28 (init_lists -> init_lists init_list .)
    LBRACE          reduce using rule 28 (init_lists -> init_lists init_list .)


state 143

    (77) if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . until NEWLINE
    (10) statement -> . if NEWLINE
    (11) statement -> . statement_error NEWLINE
    (12) empty -> .
    (13) declaration -> . VARIANT variant
    (14) declaration -> . VARIANT variant ASSIGNMENT initialization
    (15) declaration -> . VARIANT error
    (16) declaration -> . VARIANT variant ASSIGNMENT error
    (17) declaration -> . declaration error
    (64) assignment -> . variant ASSIGNMENT expression
    (65) assignment -> . variant ASSIGNMENT error
    (66) convert -> . CONVERT type TO type variant
    (67) convert -> . CONVERT type TO type error
    (68) convert -> . CONVERT type TO error
    (69) convert -> . CONVERT type error
    (70) convert -> . CONVERT error
    (71) convert -> . convert error
    (75) while -> . WHILE bool_expression NEWLINE statements ENDW
    (76) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (77) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (83) statement_error -> . error
    (84) statement_error -> . statement_error error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    ENDIF           shift and go to state 157
    NEWLINE         reduce using rule 12 (empty -> .)
    VARIANT         shift and go to state 12
    CONVERT         shift and go to state 15
    WHILE           shift and go to state 16
    UNTIL           shift and go to state 17
    IFLESS          shift and go to state 18
    IFNLESS         shift and go to state 19
    IFZERO          shift and go to state 20
    IFNZERO         shift and go to state 21
    IFHIGH          shift and go to state 22
    IFNHIGH         shift and go to state 23
    error           shift and go to state 14
    NAME            shift and go to state 24

    statement                      shift and go to state 25
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    while                          shift and go to state 8
    until                          shift and go to state 9
    if                             shift and go to state 10
    statement_error                shift and go to state 11
    variant                        shift and go to state 13

state 144

    (78) if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . until NEWLINE
    (10) statement -> . if NEWLINE
    (11) statement -> . statement_error NEWLINE
    (12) empty -> .
    (13) declaration -> . VARIANT variant
    (14) declaration -> . VARIANT variant ASSIGNMENT initialization
    (15) declaration -> . VARIANT error
    (16) declaration -> . VARIANT variant ASSIGNMENT error
    (17) declaration -> . declaration error
    (64) assignment -> . variant ASSIGNMENT expression
    (65) assignment -> . variant ASSIGNMENT error
    (66) convert -> . CONVERT type TO type variant
    (67) convert -> . CONVERT type TO type error
    (68) convert -> . CONVERT type TO error
    (69) convert -> . CONVERT type error
    (70) convert -> . CONVERT error
    (71) convert -> . convert error
    (75) while -> . WHILE bool_expression NEWLINE statements ENDW
    (76) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (77) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (83) statement_error -> . error
    (84) statement_error -> . statement_error error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    ENDIF           shift and go to state 158
    NEWLINE         reduce using rule 12 (empty -> .)
    VARIANT         shift and go to state 12
    CONVERT         shift and go to state 15
    WHILE           shift and go to state 16
    UNTIL           shift and go to state 17
    IFLESS          shift and go to state 18
    IFNLESS         shift and go to state 19
    IFZERO          shift and go to state 20
    IFNZERO         shift and go to state 21
    IFHIGH          shift and go to state 22
    IFNHIGH         shift and go to state 23
    error           shift and go to state 14
    NAME            shift and go to state 24

    statement                      shift and go to state 25
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    while                          shift and go to state 8
    until                          shift and go to state 9
    if                             shift and go to state 10
    statement_error                shift and go to state 11
    variant                        shift and go to state 13

state 145

    (81) if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . until NEWLINE
    (10) statement -> . if NEWLINE
    (11) statement -> . statement_error NEWLINE
    (12) empty -> .
    (13) declaration -> . VARIANT variant
    (14) declaration -> . VARIANT variant ASSIGNMENT initialization
    (15) declaration -> . VARIANT error
    (16) declaration -> . VARIANT variant ASSIGNMENT error
    (17) declaration -> . declaration error
    (64) assignment -> . variant ASSIGNMENT expression
    (65) assignment -> . variant ASSIGNMENT error
    (66) convert -> . CONVERT type TO type variant
    (67) convert -> . CONVERT type TO type error
    (68) convert -> . CONVERT type TO error
    (69) convert -> . CONVERT type error
    (70) convert -> . CONVERT error
    (71) convert -> . convert error
    (75) while -> . WHILE bool_expression NEWLINE statements ENDW
    (76) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (77) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (83) statement_error -> . error
    (84) statement_error -> . statement_error error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    ENDIF           shift and go to state 159
    NEWLINE         reduce using rule 12 (empty -> .)
    VARIANT         shift and go to state 12
    CONVERT         shift and go to state 15
    WHILE           shift and go to state 16
    UNTIL           shift and go to state 17
    IFLESS          shift and go to state 18
    IFNLESS         shift and go to state 19
    IFZERO          shift and go to state 20
    IFNZERO         shift and go to state 21
    IFHIGH          shift and go to state 22
    IFNHIGH         shift and go to state 23
    error           shift and go to state 14
    NAME            shift and go to state 24

    statement                      shift and go to state 25
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    while                          shift and go to state 8
    until                          shift and go to state 9
    if                             shift and go to state 10
    statement_error                shift and go to state 11
    variant                        shift and go to state 13

state 146

    (82) if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . while NEWLINE
    (9) statement -> . until NEWLINE
    (10) statement -> . if NEWLINE
    (11) statement -> . statement_error NEWLINE
    (12) empty -> .
    (13) declaration -> . VARIANT variant
    (14) declaration -> . VARIANT variant ASSIGNMENT initialization
    (15) declaration -> . VARIANT error
    (16) declaration -> . VARIANT variant ASSIGNMENT error
    (17) declaration -> . declaration error
    (64) assignment -> . variant ASSIGNMENT expression
    (65) assignment -> . variant ASSIGNMENT error
    (66) convert -> . CONVERT type TO type variant
    (67) convert -> . CONVERT type TO type error
    (68) convert -> . CONVERT type TO error
    (69) convert -> . CONVERT type error
    (70) convert -> . CONVERT error
    (71) convert -> . convert error
    (75) while -> . WHILE bool_expression NEWLINE statements ENDW
    (76) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (77) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (80) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (83) statement_error -> . error
    (84) statement_error -> . statement_error error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize

    ENDIF           shift and go to state 160
    NEWLINE         reduce using rule 12 (empty -> .)
    VARIANT         shift and go to state 12
    CONVERT         shift and go to state 15
    WHILE           shift and go to state 16
    UNTIL           shift and go to state 17
    IFLESS          shift and go to state 18
    IFNLESS         shift and go to state 19
    IFZERO          shift and go to state 20
    IFNZERO         shift and go to state 21
    IFHIGH          shift and go to state 22
    IFNHIGH         shift and go to state 23
    error           shift and go to state 14
    NAME            shift and go to state 24

    statement                      shift and go to state 25
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    while                          shift and go to state 8
    until                          shift and go to state 9
    if                             shift and go to state 10
    statement_error                shift and go to state 11
    variant                        shift and go to state 13

state 147

    (21) varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .

    error           reduce using rule 21 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    ASSIGNMENT      reduce using rule 21 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    NEWLINE         reduce using rule 21 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    PLUS            reduce using rule 21 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    COMMA           reduce using rule 21 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    RSQBRACKET      reduce using rule 21 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)


state 148

    (24) varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .

    error           reduce using rule 24 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    ASSIGNMENT      reduce using rule 24 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    NEWLINE         reduce using rule 24 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    PLUS            reduce using rule 24 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    COMMA           reduce using rule 24 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    RSQBRACKET      reduce using rule 24 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)


state 149

    (25) varsize -> LSQBRACKET error COMMA error RSQBRACKET .

    error           reduce using rule 25 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    ASSIGNMENT      reduce using rule 25 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    NEWLINE         reduce using rule 25 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    PLUS            reduce using rule 25 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    COMMA           reduce using rule 25 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    RSQBRACKET      reduce using rule 25 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)


state 150

    (23) varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .

    error           reduce using rule 23 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    ASSIGNMENT      reduce using rule 23 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    NEWLINE         reduce using rule 23 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    PLUS            reduce using rule 23 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    COMMA           reduce using rule 23 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    RSQBRACKET      reduce using rule 23 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)


state 151

    (30) init_list -> LBRACE inits RBRACE .

    RBRACE          reduce using rule 30 (init_list -> LBRACE inits RBRACE .)
    LBRACE          reduce using rule 30 (init_list -> LBRACE inits RBRACE .)


state 152

    (32) inits -> inits init .

    RBRACE          reduce using rule 32 (inits -> inits init .)
    MINUS           reduce using rule 32 (inits -> inits init .)
    TRUE            reduce using rule 32 (inits -> inits init .)
    FALSE           reduce using rule 32 (inits -> inits init .)
    DECIMAL         reduce using rule 32 (inits -> inits init .)
    LETTERS         reduce using rule 32 (inits -> inits init .)


state 153

    (34) init -> const_expressions COMMA . const_expression SEMICOLON
    (36) const_expressions -> const_expressions COMMA . const_expression
    (38) const_expression -> . const_math_expression
    (39) const_expression -> . const
    (51) const_math_expression -> . const_expression PLUS const_expression
    (52) const_math_expression -> . MINUS const_expression
    (57) const -> . TRUE
    (58) const -> . FALSE
    (59) const -> . DECIMAL
    (60) const -> . LETTERS

    MINUS           shift and go to state 140
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    DECIMAL         shift and go to state 75
    LETTERS         shift and go to state 76

    const_expression               shift and go to state 161
    const_math_expression          shift and go to state 138
    const                          shift and go to state 139

state 154

    (35) init -> const_expression SEMICOLON .

    RBRACE          reduce using rule 35 (init -> const_expression SEMICOLON .)
    MINUS           reduce using rule 35 (init -> const_expression SEMICOLON .)
    TRUE            reduce using rule 35 (init -> const_expression SEMICOLON .)
    FALSE           reduce using rule 35 (init -> const_expression SEMICOLON .)
    DECIMAL         reduce using rule 35 (init -> const_expression SEMICOLON .)
    LETTERS         reduce using rule 35 (init -> const_expression SEMICOLON .)


state 155

    (51) const_math_expression -> const_expression PLUS . const_expression
    (38) const_expression -> . const_math_expression
    (39) const_expression -> . const
    (51) const_math_expression -> . const_expression PLUS const_expression
    (52) const_math_expression -> . MINUS const_expression
    (57) const -> . TRUE
    (58) const -> . FALSE
    (59) const -> . DECIMAL
    (60) const -> . LETTERS

    MINUS           shift and go to state 140
    TRUE            shift and go to state 73
    FALSE           shift and go to state 74
    DECIMAL         shift and go to state 75
    LETTERS         shift and go to state 76

    const_expression               shift and go to state 162
    const_math_expression          shift and go to state 138
    const                          shift and go to state 139

state 156

    (52) const_math_expression -> MINUS const_expression .
    (51) const_math_expression -> const_expression . PLUS const_expression

  ! shift/reduce conflict for PLUS resolved as shift
    SEMICOLON       reduce using rule 52 (const_math_expression -> MINUS const_expression .)
    COMMA           reduce using rule 52 (const_math_expression -> MINUS const_expression .)
    PLUS            shift and go to state 155

  ! PLUS            [ reduce using rule 52 (const_math_expression -> MINUS const_expression .) ]


state 157

    (77) if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 77 (if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)


state 158

    (78) if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 78 (if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)


state 159

    (81) if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 81 (if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)


state 160

    (82) if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 82 (if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)


state 161

    (34) init -> const_expressions COMMA const_expression . SEMICOLON
    (36) const_expressions -> const_expressions COMMA const_expression .
    (51) const_math_expression -> const_expression . PLUS const_expression

    SEMICOLON       shift and go to state 163
    COMMA           reduce using rule 36 (const_expressions -> const_expressions COMMA const_expression .)
    PLUS            shift and go to state 155


state 162

    (51) const_math_expression -> const_expression PLUS const_expression .
    (51) const_math_expression -> const_expression . PLUS const_expression

  ! shift/reduce conflict for PLUS resolved as shift
    SEMICOLON       reduce using rule 51 (const_math_expression -> const_expression PLUS const_expression .)
    COMMA           reduce using rule 51 (const_math_expression -> const_expression PLUS const_expression .)
    PLUS            shift and go to state 155

  ! PLUS            [ reduce using rule 51 (const_math_expression -> const_expression PLUS const_expression .) ]


state 163

    (34) init -> const_expressions COMMA const_expression SEMICOLON .

    RBRACE          reduce using rule 34 (init -> const_expressions COMMA const_expression SEMICOLON .)
    MINUS           reduce using rule 34 (init -> const_expressions COMMA const_expression SEMICOLON .)
    TRUE            reduce using rule 34 (init -> const_expressions COMMA const_expression SEMICOLON .)
    FALSE           reduce using rule 34 (init -> const_expressions COMMA const_expression SEMICOLON .)
    DECIMAL         reduce using rule 34 (init -> const_expressions COMMA const_expression SEMICOLON .)
    LETTERS         reduce using rule 34 (init -> const_expressions COMMA const_expression SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for error in state 64 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 81 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 156 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 162 resolved as shift
