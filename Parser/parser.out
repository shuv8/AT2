Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> empty NEWLINE
Rule 5     statement -> declaration NEWLINE
Rule 6     statement -> assignment NEWLINE
Rule 7     statement -> convert NEWLINE
Rule 8     statement -> digitize NEWLINE
Rule 9     statement -> while NEWLINE
Rule 10    statement -> until NEWLINE
Rule 11    statement -> if NEWLINE
Rule 12    statement -> command NEWLINE
Rule 13    statement -> function NEWLINE
Rule 14    statement -> function_call NEWLINE
Rule 15    empty -> <empty>
Rule 16    declaration -> VARIANT variant
Rule 17    declaration -> VARIANT variant ASSIGNMENT initialization
Rule 18    variant -> NAME
Rule 19    variant -> NAME varsize
Rule 20    variant -> PARAM
Rule 21    variant -> PARAM varsize
Rule 22    varsize -> LSQBRACKET decimal_expression RSQBRACKET
Rule 23    varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET
Rule 24    varsize -> LSQBRACKET RSQBRACKET
Rule 25    initialization -> LBRACE init_lists RBRACE
Rule 26    init_lists -> init_lists init_list
Rule 27    init_lists -> init_list
Rule 28    init_list -> LBRACE inits RBRACE
Rule 29    init_list -> LBRACE RBRACE
Rule 30    inits -> inits init
Rule 31    inits -> init
Rule 32    init -> const_expressions COMMA const_expression SEMICOLON
Rule 33    init -> const_expression SEMICOLON
Rule 34    const_expressions -> const_expressions COMMA const_expression
Rule 35    const_expressions -> const_expression
Rule 36    const_expression -> const_math_expression
Rule 37    const_expression -> const
Rule 38    expression -> math_expression
Rule 39    expression -> const
Rule 40    expression -> variant
Rule 41    expression -> function_call
Rule 42    expression -> command
Rule 43    decimal_expression -> dec_math_expression
Rule 44    decimal_expression -> decimal_const
Rule 45    decimal_expression -> variant
Rule 46    decimal_expression -> function_call
Rule 47    bool_expression -> bool_math_expression
Rule 48    bool_expression -> bool_const
Rule 49    bool_expression -> variant
Rule 50    bool_expression -> function_call
Rule 51    string_expression -> string_math_expression
Rule 52    string_expression -> string_const
Rule 53    string_expression -> variant
Rule 54    string_expression -> function_call
Rule 55    math_expression -> expression PLUS expression
Rule 56    math_expression -> MINUS expression
Rule 57    const_math_expression -> const_expression PLUS const_expression
Rule 58    const_math_expression -> MINUS const_expression
Rule 59    dec_math_expression -> decimal_expression PLUS decimal_expression
Rule 60    dec_math_expression -> MINUS decimal_expression
Rule 61    bool_math_expression -> bool_expression PLUS bool_expression
Rule 62    bool_math_expression -> MINUS bool_expression
Rule 63    string_math_expression -> string_expression PLUS string_expression
Rule 64    string_math_expression -> MINUS string_expression
Rule 65    const -> bool_const
Rule 66    const -> decimal_const
Rule 67    const -> string_const
Rule 68    decimal_const -> DECIMAL
Rule 69    bool_const -> TRUE
Rule 70    bool_const -> FALSE
Rule 71    string_const -> LETTERS
Rule 72    assignment -> variant ASSIGNMENT expression
Rule 73    convert -> CONVERT type TO type variant
Rule 74    digitize -> DIGITIZE type variant
Rule 75    type -> BOOL
Rule 76    type -> DIGIT
Rule 77    type -> STRING
Rule 78    while -> WHILE bool_expression NEWLINE statements ENDW
Rule 79    until -> UNTIL bool_expression NEWLINE statements ENDU
Rule 80    if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
Rule 81    if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
Rule 82    if -> IFZERO decimal_expression NEWLINE statements ENDIF
Rule 83    if -> IFNZERO decimal_expression NEWLINE statements ENDIF
Rule 84    if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
Rule 85    if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
Rule 86    if -> IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
Rule 87    command -> COMMAND string_expression
Rule 88    func_body_statements -> func_body_statements func_body_statement
Rule 89    func_body_statements -> func_body_statement
Rule 90    func_body_statement -> empty NEWLINE
Rule 91    func_body_statement -> declaration NEWLINE
Rule 92    func_body_statement -> assignment NEWLINE
Rule 93    func_body_statement -> convert NEWLINE
Rule 94    func_body_statement -> digitize NEWLINE
Rule 95    func_body_statement -> while NEWLINE
Rule 96    func_body_statement -> until NEWLINE
Rule 97    func_body_statement -> if NEWLINE
Rule 98    func_body_statement -> command NEWLINE
Rule 99    func_body_statement -> function_call NEWLINE
Rule 100   func_body_statement -> return NEWLINE
Rule 101   function -> FUNC NAME NEWLINE func_body_statements ENDFUNC
Rule 102   function_call -> CALL NAME expression
Rule 103   function_call -> CALL NAME
Rule 104   return -> RETURN expression
Rule 105   declaration -> VARIANT error
Rule 106   declaration -> VARIANT variant ASSIGNMENT error
Rule 107   declaration -> declaration error
Rule 108   varsize -> LSQBRACKET error RSQBRACKET
Rule 109   varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET
Rule 110   varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET
Rule 111   varsize -> LSQBRACKET error COMMA error RSQBRACKET
Rule 112   varsize -> varsize error
Rule 113   assignment -> variant ASSIGNMENT error
Rule 114   assignment -> error ASSIGNMENT expression
Rule 115   convert -> CONVERT type TO type error
Rule 116   convert -> CONVERT type TO error
Rule 117   convert -> CONVERT type error
Rule 118   convert -> CONVERT error
Rule 119   convert -> convert error
Rule 120   digitize -> DIGITIZE error
Rule 121   digitize -> digitize error
Rule 122   command -> COMMAND error
Rule 123   command -> command error
Rule 124   while -> WHILE error NEWLINE statements ENDW
Rule 125   while -> WHILE bool_expression NEWLINE statements error
Rule 126   while -> WHILE bool_expression statements ENDW
Rule 127   while -> while error
Rule 128   until -> UNTIL error NEWLINE statements ENDU
Rule 129   until -> UNTIL bool_expression NEWLINE statements error
Rule 130   until -> UNTIL bool_expression statements ENDU
Rule 131   until -> until error
Rule 132   if -> IFLESS error NEWLINE statements ENDIF
Rule 133   if -> IFNLESS error NEWLINE statements ENDIF
Rule 134   if -> IFZERO error NEWLINE statements ENDIF
Rule 135   if -> IFNZERO error NEWLINE statements ENDIF
Rule 136   if -> IFHIGH error NEWLINE statements ENDIF
Rule 137   if -> IFNHIGH error NEWLINE statements ENDIF
Rule 138   if -> IFEQUAL error NEWLINE statements ENDIF
Rule 139   if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
Rule 140   if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
Rule 141   if -> IFZERO decimal_expression NEWLINE statements error
Rule 142   if -> IFNZERO decimal_expression NEWLINE statements error
Rule 143   if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
Rule 144   if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
Rule 145   if -> IFEQUAL string_expression COMMA string_expression NEWLINE statements error
Rule 146   if -> IFLESS decimal_expression COMMA decimal_expression statements ENDIF
Rule 147   if -> IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
Rule 148   if -> IFZERO decimal_expression statements ENDIF
Rule 149   if -> IFNZERO decimal_expression statements ENDIF
Rule 150   if -> IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
Rule 151   if -> IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
Rule 152   if -> IFEQUAL string_expression COMMA string_expression statements ENDIF
Rule 153   if -> if error
Rule 154   function -> FUNC error NEWLINE func_body_statements ENDFUNC
Rule 155   function -> FUNC NAME NEWLINE func_body_statements error
Rule 156   function -> FUNC error NEWLINE func_body_statements error
Rule 157   function -> function error
Rule 158   return -> RETURN error
Rule 159   return -> return error

Terminals, with rules where they appear

ASSIGNMENT           : 17 72 106 113 114
BOOL                 : 75
CALL                 : 102 103
COMMA                : 23 32 34 80 81 84 85 86 109 110 111 139 140 143 144 145 146 147 150 151 152
COMMAND              : 87 122
CONVERT              : 73 115 116 117 118
DECIMAL              : 68
DIGIT                : 76
DIGITIZE             : 74 120
ENDFUNC              : 101 154
ENDIF                : 80 81 82 83 84 85 86 132 133 134 135 136 137 138 146 147 148 149 150 151 152
ENDU                 : 79 128 130
ENDW                 : 78 124 126
FALSE                : 70
FUNC                 : 101 154 155 156
IFEQUAL              : 86 138 145 152
IFHIGH               : 84 136 143 150
IFLESS               : 80 132 139 146
IFNHIGH              : 85 137 144 151
IFNLESS              : 81 133 140 147
IFNZERO              : 83 135 142 149
IFZERO               : 82 134 141 148
LBRACE               : 25 28 29
LETTERS              : 71
LSQBRACKET           : 22 23 24 108 109 110 111
MINUS                : 56 58 60 62 64
NAME                 : 18 19 101 102 103 155
NEWLINE              : 4 5 6 7 8 9 10 11 12 13 14 78 79 80 81 82 83 84 85 86 90 91 92 93 94 95 96 97 98 99 100 101 124 125 128 129 132 133 134 135 136 137 138 139 140 141 142 143 144 145 154 155 156
PARAM                : 20 21
PLUS                 : 55 57 59 61 63
RBRACE               : 25 28 29
RETURN               : 104 158
RSQBRACKET           : 22 23 24 108 109 110 111
SEMICOLON            : 32 33
STRING               : 77
TO                   : 73 115 116
TRUE                 : 69
UNTIL                : 79 128 129 130
VARIANT              : 16 17 105 106
WHILE                : 78 124 125 126
error                : 105 106 107 108 109 110 111 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 127 128 129 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 153 154 155 156 156 157 158 159

Nonterminals, with rules where they appear

assignment           : 6 92
bool_const           : 48 65
bool_expression      : 61 61 62 78 79 125 126 129 130
bool_math_expression : 47
command              : 12 42 98 123
const                : 37 39
const_expression     : 32 33 34 35 57 57 58
const_expressions    : 32 34
const_math_expression : 36
convert              : 7 93 119
dec_math_expression  : 43
decimal_const        : 44 66
decimal_expression   : 22 23 23 59 59 60 80 80 81 81 82 83 84 84 85 85 109 110 139 139 140 140 141 142 143 143 144 144 146 146 147 147 148 149 150 150 151 151
declaration          : 5 91 107
digitize             : 8 94 121
empty                : 4 90
expression           : 55 55 56 72 102 104 114
func_body_statement  : 88 89
func_body_statements : 88 101 154 155 156
function             : 13 157
function_call        : 14 41 46 50 54 99
if                   : 11 97 153
init                 : 30 31
init_list            : 26 27
init_lists           : 25 26
initialization       : 17
inits                : 28 30
math_expression      : 38
program              : 0
return               : 100 159
statement            : 2 3
statements           : 1 2 78 79 80 81 82 83 84 85 86 124 125 126 128 129 130 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152
string_const         : 52 67
string_expression    : 63 63 64 86 86 87 145 145 152 152
string_math_expression : 51
type                 : 73 73 74 115 115 116 117
until                : 10 96 131
variant              : 16 17 40 45 49 53 72 73 74 106 113
varsize              : 19 21 112
while                : 9 95 127

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    $end            reduce using rule 1 (program -> statements .)
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 3

    (3) statements -> statement .

    VARIANT         reduce using rule 3 (statements -> statement .)
    error           reduce using rule 3 (statements -> statement .)
    CONVERT         reduce using rule 3 (statements -> statement .)
    DIGITIZE        reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    UNTIL           reduce using rule 3 (statements -> statement .)
    IFLESS          reduce using rule 3 (statements -> statement .)
    IFNLESS         reduce using rule 3 (statements -> statement .)
    IFZERO          reduce using rule 3 (statements -> statement .)
    IFNZERO         reduce using rule 3 (statements -> statement .)
    IFHIGH          reduce using rule 3 (statements -> statement .)
    IFNHIGH         reduce using rule 3 (statements -> statement .)
    IFEQUAL         reduce using rule 3 (statements -> statement .)
    COMMAND         reduce using rule 3 (statements -> statement .)
    FUNC            reduce using rule 3 (statements -> statement .)
    CALL            reduce using rule 3 (statements -> statement .)
    NAME            reduce using rule 3 (statements -> statement .)
    PARAM           reduce using rule 3 (statements -> statement .)
    NEWLINE         reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    ENDW            reduce using rule 3 (statements -> statement .)
    ENDU            reduce using rule 3 (statements -> statement .)
    ENDIF           reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> empty . NEWLINE

    NEWLINE         shift and go to state 35


state 5

    (5) statement -> declaration . NEWLINE
    (107) declaration -> declaration . error

    NEWLINE         shift and go to state 36
    error           shift and go to state 37


state 6

    (6) statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 38


state 7

    (7) statement -> convert . NEWLINE
    (119) convert -> convert . error

    NEWLINE         shift and go to state 39
    error           shift and go to state 40


state 8

    (8) statement -> digitize . NEWLINE
    (121) digitize -> digitize . error

    NEWLINE         shift and go to state 41
    error           shift and go to state 42


state 9

    (9) statement -> while . NEWLINE
    (127) while -> while . error

    NEWLINE         shift and go to state 43
    error           shift and go to state 44


state 10

    (10) statement -> until . NEWLINE
    (131) until -> until . error

    NEWLINE         shift and go to state 45
    error           shift and go to state 46


state 11

    (11) statement -> if . NEWLINE
    (153) if -> if . error

    NEWLINE         shift and go to state 47
    error           shift and go to state 48


state 12

    (12) statement -> command . NEWLINE
    (123) command -> command . error

    NEWLINE         shift and go to state 49
    error           shift and go to state 50


state 13

    (13) statement -> function . NEWLINE
    (157) function -> function . error

    NEWLINE         shift and go to state 51
    error           shift and go to state 52


state 14

    (14) statement -> function_call . NEWLINE

    NEWLINE         shift and go to state 53


state 15

    (16) declaration -> VARIANT . variant
    (17) declaration -> VARIANT . variant ASSIGNMENT initialization
    (105) declaration -> VARIANT . error
    (106) declaration -> VARIANT . variant ASSIGNMENT error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    error           shift and go to state 55
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    variant                        shift and go to state 54

state 16

    (72) assignment -> variant . ASSIGNMENT expression
    (113) assignment -> variant . ASSIGNMENT error

    ASSIGNMENT      shift and go to state 56


state 17

    (114) assignment -> error . ASSIGNMENT expression

    ASSIGNMENT      shift and go to state 57


state 18

    (73) convert -> CONVERT . type TO type variant
    (115) convert -> CONVERT . type TO type error
    (116) convert -> CONVERT . type TO error
    (117) convert -> CONVERT . type error
    (118) convert -> CONVERT . error
    (75) type -> . BOOL
    (76) type -> . DIGIT
    (77) type -> . STRING

    error           shift and go to state 59
    BOOL            shift and go to state 60
    DIGIT           shift and go to state 61
    STRING          shift and go to state 62

    type                           shift and go to state 58

state 19

    (74) digitize -> DIGITIZE . type variant
    (120) digitize -> DIGITIZE . error
    (75) type -> . BOOL
    (76) type -> . DIGIT
    (77) type -> . STRING

    error           shift and go to state 64
    BOOL            shift and go to state 60
    DIGIT           shift and go to state 61
    STRING          shift and go to state 62

    type                           shift and go to state 63

state 20

    (78) while -> WHILE . bool_expression NEWLINE statements ENDW
    (124) while -> WHILE . error NEWLINE statements ENDW
    (125) while -> WHILE . bool_expression NEWLINE statements error
    (126) while -> WHILE . bool_expression statements ENDW
    (47) bool_expression -> . bool_math_expression
    (48) bool_expression -> . bool_const
    (49) bool_expression -> . variant
    (50) bool_expression -> . function_call
    (61) bool_math_expression -> . bool_expression PLUS bool_expression
    (62) bool_math_expression -> . MINUS bool_expression
    (69) bool_const -> . TRUE
    (70) bool_const -> . FALSE
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    error           shift and go to state 66
    MINUS           shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    bool_expression                shift and go to state 65
    bool_math_expression           shift and go to state 67
    bool_const                     shift and go to state 68
    variant                        shift and go to state 69
    function_call                  shift and go to state 70

state 21

    (79) until -> UNTIL . bool_expression NEWLINE statements ENDU
    (128) until -> UNTIL . error NEWLINE statements ENDU
    (129) until -> UNTIL . bool_expression NEWLINE statements error
    (130) until -> UNTIL . bool_expression statements ENDU
    (47) bool_expression -> . bool_math_expression
    (48) bool_expression -> . bool_const
    (49) bool_expression -> . variant
    (50) bool_expression -> . function_call
    (61) bool_math_expression -> . bool_expression PLUS bool_expression
    (62) bool_math_expression -> . MINUS bool_expression
    (69) bool_const -> . TRUE
    (70) bool_const -> . FALSE
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    error           shift and go to state 75
    MINUS           shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    bool_expression                shift and go to state 74
    bool_math_expression           shift and go to state 67
    bool_const                     shift and go to state 68
    variant                        shift and go to state 69
    function_call                  shift and go to state 70

state 22

    (80) if -> IFLESS . decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (132) if -> IFLESS . error NEWLINE statements ENDIF
    (139) if -> IFLESS . decimal_expression COMMA decimal_expression NEWLINE statements error
    (146) if -> IFLESS . decimal_expression COMMA decimal_expression statements ENDIF
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (46) decimal_expression -> . function_call
    (59) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (60) dec_math_expression -> . MINUS decimal_expression
    (68) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    error           shift and go to state 77
    MINUS           shift and go to state 82
    DECIMAL         shift and go to state 83
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    decimal_expression             shift and go to state 76
    dec_math_expression            shift and go to state 78
    decimal_const                  shift and go to state 79
    variant                        shift and go to state 80
    function_call                  shift and go to state 81

state 23

    (81) if -> IFNLESS . decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (133) if -> IFNLESS . error NEWLINE statements ENDIF
    (140) if -> IFNLESS . decimal_expression COMMA decimal_expression NEWLINE statements error
    (147) if -> IFNLESS . decimal_expression COMMA decimal_expression statements ENDIF
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (46) decimal_expression -> . function_call
    (59) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (60) dec_math_expression -> . MINUS decimal_expression
    (68) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    error           shift and go to state 85
    MINUS           shift and go to state 82
    DECIMAL         shift and go to state 83
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    decimal_expression             shift and go to state 84
    dec_math_expression            shift and go to state 78
    decimal_const                  shift and go to state 79
    variant                        shift and go to state 80
    function_call                  shift and go to state 81

state 24

    (82) if -> IFZERO . decimal_expression NEWLINE statements ENDIF
    (134) if -> IFZERO . error NEWLINE statements ENDIF
    (141) if -> IFZERO . decimal_expression NEWLINE statements error
    (148) if -> IFZERO . decimal_expression statements ENDIF
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (46) decimal_expression -> . function_call
    (59) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (60) dec_math_expression -> . MINUS decimal_expression
    (68) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    error           shift and go to state 87
    MINUS           shift and go to state 82
    DECIMAL         shift and go to state 83
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    decimal_expression             shift and go to state 86
    dec_math_expression            shift and go to state 78
    decimal_const                  shift and go to state 79
    variant                        shift and go to state 80
    function_call                  shift and go to state 81

state 25

    (83) if -> IFNZERO . decimal_expression NEWLINE statements ENDIF
    (135) if -> IFNZERO . error NEWLINE statements ENDIF
    (142) if -> IFNZERO . decimal_expression NEWLINE statements error
    (149) if -> IFNZERO . decimal_expression statements ENDIF
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (46) decimal_expression -> . function_call
    (59) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (60) dec_math_expression -> . MINUS decimal_expression
    (68) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    error           shift and go to state 89
    MINUS           shift and go to state 82
    DECIMAL         shift and go to state 83
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    decimal_expression             shift and go to state 88
    dec_math_expression            shift and go to state 78
    decimal_const                  shift and go to state 79
    variant                        shift and go to state 80
    function_call                  shift and go to state 81

state 26

    (84) if -> IFHIGH . decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (136) if -> IFHIGH . error NEWLINE statements ENDIF
    (143) if -> IFHIGH . decimal_expression COMMA decimal_expression NEWLINE statements error
    (150) if -> IFHIGH . decimal_expression COMMA decimal_expression statements ENDIF
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (46) decimal_expression -> . function_call
    (59) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (60) dec_math_expression -> . MINUS decimal_expression
    (68) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    error           shift and go to state 91
    MINUS           shift and go to state 82
    DECIMAL         shift and go to state 83
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    decimal_expression             shift and go to state 90
    dec_math_expression            shift and go to state 78
    decimal_const                  shift and go to state 79
    variant                        shift and go to state 80
    function_call                  shift and go to state 81

state 27

    (85) if -> IFNHIGH . decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (137) if -> IFNHIGH . error NEWLINE statements ENDIF
    (144) if -> IFNHIGH . decimal_expression COMMA decimal_expression NEWLINE statements error
    (151) if -> IFNHIGH . decimal_expression COMMA decimal_expression statements ENDIF
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (46) decimal_expression -> . function_call
    (59) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (60) dec_math_expression -> . MINUS decimal_expression
    (68) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    error           shift and go to state 93
    MINUS           shift and go to state 82
    DECIMAL         shift and go to state 83
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    decimal_expression             shift and go to state 92
    dec_math_expression            shift and go to state 78
    decimal_const                  shift and go to state 79
    variant                        shift and go to state 80
    function_call                  shift and go to state 81

state 28

    (86) if -> IFEQUAL . string_expression COMMA string_expression NEWLINE statements ENDIF
    (138) if -> IFEQUAL . error NEWLINE statements ENDIF
    (145) if -> IFEQUAL . string_expression COMMA string_expression NEWLINE statements error
    (152) if -> IFEQUAL . string_expression COMMA string_expression statements ENDIF
    (51) string_expression -> . string_math_expression
    (52) string_expression -> . string_const
    (53) string_expression -> . variant
    (54) string_expression -> . function_call
    (63) string_math_expression -> . string_expression PLUS string_expression
    (64) string_math_expression -> . MINUS string_expression
    (71) string_const -> . LETTERS
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    error           shift and go to state 95
    MINUS           shift and go to state 100
    LETTERS         shift and go to state 101
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    string_expression              shift and go to state 94
    string_math_expression         shift and go to state 96
    string_const                   shift and go to state 97
    variant                        shift and go to state 98
    function_call                  shift and go to state 99

state 29

    (87) command -> COMMAND . string_expression
    (122) command -> COMMAND . error
    (51) string_expression -> . string_math_expression
    (52) string_expression -> . string_const
    (53) string_expression -> . variant
    (54) string_expression -> . function_call
    (63) string_math_expression -> . string_expression PLUS string_expression
    (64) string_math_expression -> . MINUS string_expression
    (71) string_const -> . LETTERS
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    error           shift and go to state 103
    MINUS           shift and go to state 100
    LETTERS         shift and go to state 101
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    string_expression              shift and go to state 102
    string_math_expression         shift and go to state 96
    string_const                   shift and go to state 97
    variant                        shift and go to state 98
    function_call                  shift and go to state 99

state 30

    (101) function -> FUNC . NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> FUNC . error NEWLINE func_body_statements ENDFUNC
    (155) function -> FUNC . NAME NEWLINE func_body_statements error
    (156) function -> FUNC . error NEWLINE func_body_statements error

    NAME            shift and go to state 104
    error           shift and go to state 105


state 31

    (18) variant -> NAME .
    (19) variant -> NAME . varsize
    (22) varsize -> . LSQBRACKET decimal_expression RSQBRACKET
    (23) varsize -> . LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET
    (24) varsize -> . LSQBRACKET RSQBRACKET
    (108) varsize -> . LSQBRACKET error RSQBRACKET
    (109) varsize -> . LSQBRACKET error COMMA decimal_expression RSQBRACKET
    (110) varsize -> . LSQBRACKET decimal_expression COMMA error RSQBRACKET
    (111) varsize -> . LSQBRACKET error COMMA error RSQBRACKET
    (112) varsize -> . varsize error

    ASSIGNMENT      reduce using rule 18 (variant -> NAME .)
    NEWLINE         reduce using rule 18 (variant -> NAME .)
    error           reduce using rule 18 (variant -> NAME .)
    PLUS            reduce using rule 18 (variant -> NAME .)
    VARIANT         reduce using rule 18 (variant -> NAME .)
    CONVERT         reduce using rule 18 (variant -> NAME .)
    DIGITIZE        reduce using rule 18 (variant -> NAME .)
    WHILE           reduce using rule 18 (variant -> NAME .)
    UNTIL           reduce using rule 18 (variant -> NAME .)
    IFLESS          reduce using rule 18 (variant -> NAME .)
    IFNLESS         reduce using rule 18 (variant -> NAME .)
    IFZERO          reduce using rule 18 (variant -> NAME .)
    IFNZERO         reduce using rule 18 (variant -> NAME .)
    IFHIGH          reduce using rule 18 (variant -> NAME .)
    IFNHIGH         reduce using rule 18 (variant -> NAME .)
    IFEQUAL         reduce using rule 18 (variant -> NAME .)
    COMMAND         reduce using rule 18 (variant -> NAME .)
    FUNC            reduce using rule 18 (variant -> NAME .)
    CALL            reduce using rule 18 (variant -> NAME .)
    NAME            reduce using rule 18 (variant -> NAME .)
    PARAM           reduce using rule 18 (variant -> NAME .)
    COMMA           reduce using rule 18 (variant -> NAME .)
    RSQBRACKET      reduce using rule 18 (variant -> NAME .)
    LSQBRACKET      shift and go to state 107

    varsize                        shift and go to state 106

state 32

    (102) function_call -> CALL . NAME expression
    (103) function_call -> CALL . NAME

    NAME            shift and go to state 108


state 33

    (20) variant -> PARAM .
    (21) variant -> PARAM . varsize
    (22) varsize -> . LSQBRACKET decimal_expression RSQBRACKET
    (23) varsize -> . LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET
    (24) varsize -> . LSQBRACKET RSQBRACKET
    (108) varsize -> . LSQBRACKET error RSQBRACKET
    (109) varsize -> . LSQBRACKET error COMMA decimal_expression RSQBRACKET
    (110) varsize -> . LSQBRACKET decimal_expression COMMA error RSQBRACKET
    (111) varsize -> . LSQBRACKET error COMMA error RSQBRACKET
    (112) varsize -> . varsize error

    ASSIGNMENT      reduce using rule 20 (variant -> PARAM .)
    NEWLINE         reduce using rule 20 (variant -> PARAM .)
    error           reduce using rule 20 (variant -> PARAM .)
    PLUS            reduce using rule 20 (variant -> PARAM .)
    VARIANT         reduce using rule 20 (variant -> PARAM .)
    CONVERT         reduce using rule 20 (variant -> PARAM .)
    DIGITIZE        reduce using rule 20 (variant -> PARAM .)
    WHILE           reduce using rule 20 (variant -> PARAM .)
    UNTIL           reduce using rule 20 (variant -> PARAM .)
    IFLESS          reduce using rule 20 (variant -> PARAM .)
    IFNLESS         reduce using rule 20 (variant -> PARAM .)
    IFZERO          reduce using rule 20 (variant -> PARAM .)
    IFNZERO         reduce using rule 20 (variant -> PARAM .)
    IFHIGH          reduce using rule 20 (variant -> PARAM .)
    IFNHIGH         reduce using rule 20 (variant -> PARAM .)
    IFEQUAL         reduce using rule 20 (variant -> PARAM .)
    COMMAND         reduce using rule 20 (variant -> PARAM .)
    FUNC            reduce using rule 20 (variant -> PARAM .)
    CALL            reduce using rule 20 (variant -> PARAM .)
    NAME            reduce using rule 20 (variant -> PARAM .)
    PARAM           reduce using rule 20 (variant -> PARAM .)
    COMMA           reduce using rule 20 (variant -> PARAM .)
    RSQBRACKET      reduce using rule 20 (variant -> PARAM .)
    LSQBRACKET      shift and go to state 107

    varsize                        shift and go to state 109

state 34

    (2) statements -> statements statement .

    VARIANT         reduce using rule 2 (statements -> statements statement .)
    error           reduce using rule 2 (statements -> statements statement .)
    CONVERT         reduce using rule 2 (statements -> statements statement .)
    DIGITIZE        reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    UNTIL           reduce using rule 2 (statements -> statements statement .)
    IFLESS          reduce using rule 2 (statements -> statements statement .)
    IFNLESS         reduce using rule 2 (statements -> statements statement .)
    IFZERO          reduce using rule 2 (statements -> statements statement .)
    IFNZERO         reduce using rule 2 (statements -> statements statement .)
    IFHIGH          reduce using rule 2 (statements -> statements statement .)
    IFNHIGH         reduce using rule 2 (statements -> statements statement .)
    IFEQUAL         reduce using rule 2 (statements -> statements statement .)
    COMMAND         reduce using rule 2 (statements -> statements statement .)
    FUNC            reduce using rule 2 (statements -> statements statement .)
    CALL            reduce using rule 2 (statements -> statements statement .)
    NAME            reduce using rule 2 (statements -> statements statement .)
    PARAM           reduce using rule 2 (statements -> statements statement .)
    NEWLINE         reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    ENDW            reduce using rule 2 (statements -> statements statement .)
    ENDU            reduce using rule 2 (statements -> statements statement .)
    ENDIF           reduce using rule 2 (statements -> statements statement .)


state 35

    (4) statement -> empty NEWLINE .

    VARIANT         reduce using rule 4 (statement -> empty NEWLINE .)
    error           reduce using rule 4 (statement -> empty NEWLINE .)
    CONVERT         reduce using rule 4 (statement -> empty NEWLINE .)
    DIGITIZE        reduce using rule 4 (statement -> empty NEWLINE .)
    WHILE           reduce using rule 4 (statement -> empty NEWLINE .)
    UNTIL           reduce using rule 4 (statement -> empty NEWLINE .)
    IFLESS          reduce using rule 4 (statement -> empty NEWLINE .)
    IFNLESS         reduce using rule 4 (statement -> empty NEWLINE .)
    IFZERO          reduce using rule 4 (statement -> empty NEWLINE .)
    IFNZERO         reduce using rule 4 (statement -> empty NEWLINE .)
    IFHIGH          reduce using rule 4 (statement -> empty NEWLINE .)
    IFNHIGH         reduce using rule 4 (statement -> empty NEWLINE .)
    IFEQUAL         reduce using rule 4 (statement -> empty NEWLINE .)
    COMMAND         reduce using rule 4 (statement -> empty NEWLINE .)
    FUNC            reduce using rule 4 (statement -> empty NEWLINE .)
    CALL            reduce using rule 4 (statement -> empty NEWLINE .)
    NAME            reduce using rule 4 (statement -> empty NEWLINE .)
    PARAM           reduce using rule 4 (statement -> empty NEWLINE .)
    NEWLINE         reduce using rule 4 (statement -> empty NEWLINE .)
    $end            reduce using rule 4 (statement -> empty NEWLINE .)
    ENDW            reduce using rule 4 (statement -> empty NEWLINE .)
    ENDU            reduce using rule 4 (statement -> empty NEWLINE .)
    ENDIF           reduce using rule 4 (statement -> empty NEWLINE .)


state 36

    (5) statement -> declaration NEWLINE .

    VARIANT         reduce using rule 5 (statement -> declaration NEWLINE .)
    error           reduce using rule 5 (statement -> declaration NEWLINE .)
    CONVERT         reduce using rule 5 (statement -> declaration NEWLINE .)
    DIGITIZE        reduce using rule 5 (statement -> declaration NEWLINE .)
    WHILE           reduce using rule 5 (statement -> declaration NEWLINE .)
    UNTIL           reduce using rule 5 (statement -> declaration NEWLINE .)
    IFLESS          reduce using rule 5 (statement -> declaration NEWLINE .)
    IFNLESS         reduce using rule 5 (statement -> declaration NEWLINE .)
    IFZERO          reduce using rule 5 (statement -> declaration NEWLINE .)
    IFNZERO         reduce using rule 5 (statement -> declaration NEWLINE .)
    IFHIGH          reduce using rule 5 (statement -> declaration NEWLINE .)
    IFNHIGH         reduce using rule 5 (statement -> declaration NEWLINE .)
    IFEQUAL         reduce using rule 5 (statement -> declaration NEWLINE .)
    COMMAND         reduce using rule 5 (statement -> declaration NEWLINE .)
    FUNC            reduce using rule 5 (statement -> declaration NEWLINE .)
    CALL            reduce using rule 5 (statement -> declaration NEWLINE .)
    NAME            reduce using rule 5 (statement -> declaration NEWLINE .)
    PARAM           reduce using rule 5 (statement -> declaration NEWLINE .)
    NEWLINE         reduce using rule 5 (statement -> declaration NEWLINE .)
    $end            reduce using rule 5 (statement -> declaration NEWLINE .)
    ENDW            reduce using rule 5 (statement -> declaration NEWLINE .)
    ENDU            reduce using rule 5 (statement -> declaration NEWLINE .)
    ENDIF           reduce using rule 5 (statement -> declaration NEWLINE .)


state 37

    (107) declaration -> declaration error .

    NEWLINE         reduce using rule 107 (declaration -> declaration error .)
    error           reduce using rule 107 (declaration -> declaration error .)


state 38

    (6) statement -> assignment NEWLINE .

    VARIANT         reduce using rule 6 (statement -> assignment NEWLINE .)
    error           reduce using rule 6 (statement -> assignment NEWLINE .)
    CONVERT         reduce using rule 6 (statement -> assignment NEWLINE .)
    DIGITIZE        reduce using rule 6 (statement -> assignment NEWLINE .)
    WHILE           reduce using rule 6 (statement -> assignment NEWLINE .)
    UNTIL           reduce using rule 6 (statement -> assignment NEWLINE .)
    IFLESS          reduce using rule 6 (statement -> assignment NEWLINE .)
    IFNLESS         reduce using rule 6 (statement -> assignment NEWLINE .)
    IFZERO          reduce using rule 6 (statement -> assignment NEWLINE .)
    IFNZERO         reduce using rule 6 (statement -> assignment NEWLINE .)
    IFHIGH          reduce using rule 6 (statement -> assignment NEWLINE .)
    IFNHIGH         reduce using rule 6 (statement -> assignment NEWLINE .)
    IFEQUAL         reduce using rule 6 (statement -> assignment NEWLINE .)
    COMMAND         reduce using rule 6 (statement -> assignment NEWLINE .)
    FUNC            reduce using rule 6 (statement -> assignment NEWLINE .)
    CALL            reduce using rule 6 (statement -> assignment NEWLINE .)
    NAME            reduce using rule 6 (statement -> assignment NEWLINE .)
    PARAM           reduce using rule 6 (statement -> assignment NEWLINE .)
    NEWLINE         reduce using rule 6 (statement -> assignment NEWLINE .)
    $end            reduce using rule 6 (statement -> assignment NEWLINE .)
    ENDW            reduce using rule 6 (statement -> assignment NEWLINE .)
    ENDU            reduce using rule 6 (statement -> assignment NEWLINE .)
    ENDIF           reduce using rule 6 (statement -> assignment NEWLINE .)


state 39

    (7) statement -> convert NEWLINE .

    VARIANT         reduce using rule 7 (statement -> convert NEWLINE .)
    error           reduce using rule 7 (statement -> convert NEWLINE .)
    CONVERT         reduce using rule 7 (statement -> convert NEWLINE .)
    DIGITIZE        reduce using rule 7 (statement -> convert NEWLINE .)
    WHILE           reduce using rule 7 (statement -> convert NEWLINE .)
    UNTIL           reduce using rule 7 (statement -> convert NEWLINE .)
    IFLESS          reduce using rule 7 (statement -> convert NEWLINE .)
    IFNLESS         reduce using rule 7 (statement -> convert NEWLINE .)
    IFZERO          reduce using rule 7 (statement -> convert NEWLINE .)
    IFNZERO         reduce using rule 7 (statement -> convert NEWLINE .)
    IFHIGH          reduce using rule 7 (statement -> convert NEWLINE .)
    IFNHIGH         reduce using rule 7 (statement -> convert NEWLINE .)
    IFEQUAL         reduce using rule 7 (statement -> convert NEWLINE .)
    COMMAND         reduce using rule 7 (statement -> convert NEWLINE .)
    FUNC            reduce using rule 7 (statement -> convert NEWLINE .)
    CALL            reduce using rule 7 (statement -> convert NEWLINE .)
    NAME            reduce using rule 7 (statement -> convert NEWLINE .)
    PARAM           reduce using rule 7 (statement -> convert NEWLINE .)
    NEWLINE         reduce using rule 7 (statement -> convert NEWLINE .)
    $end            reduce using rule 7 (statement -> convert NEWLINE .)
    ENDW            reduce using rule 7 (statement -> convert NEWLINE .)
    ENDU            reduce using rule 7 (statement -> convert NEWLINE .)
    ENDIF           reduce using rule 7 (statement -> convert NEWLINE .)


state 40

    (119) convert -> convert error .

    NEWLINE         reduce using rule 119 (convert -> convert error .)
    error           reduce using rule 119 (convert -> convert error .)


state 41

    (8) statement -> digitize NEWLINE .

    VARIANT         reduce using rule 8 (statement -> digitize NEWLINE .)
    error           reduce using rule 8 (statement -> digitize NEWLINE .)
    CONVERT         reduce using rule 8 (statement -> digitize NEWLINE .)
    DIGITIZE        reduce using rule 8 (statement -> digitize NEWLINE .)
    WHILE           reduce using rule 8 (statement -> digitize NEWLINE .)
    UNTIL           reduce using rule 8 (statement -> digitize NEWLINE .)
    IFLESS          reduce using rule 8 (statement -> digitize NEWLINE .)
    IFNLESS         reduce using rule 8 (statement -> digitize NEWLINE .)
    IFZERO          reduce using rule 8 (statement -> digitize NEWLINE .)
    IFNZERO         reduce using rule 8 (statement -> digitize NEWLINE .)
    IFHIGH          reduce using rule 8 (statement -> digitize NEWLINE .)
    IFNHIGH         reduce using rule 8 (statement -> digitize NEWLINE .)
    IFEQUAL         reduce using rule 8 (statement -> digitize NEWLINE .)
    COMMAND         reduce using rule 8 (statement -> digitize NEWLINE .)
    FUNC            reduce using rule 8 (statement -> digitize NEWLINE .)
    CALL            reduce using rule 8 (statement -> digitize NEWLINE .)
    NAME            reduce using rule 8 (statement -> digitize NEWLINE .)
    PARAM           reduce using rule 8 (statement -> digitize NEWLINE .)
    NEWLINE         reduce using rule 8 (statement -> digitize NEWLINE .)
    $end            reduce using rule 8 (statement -> digitize NEWLINE .)
    ENDW            reduce using rule 8 (statement -> digitize NEWLINE .)
    ENDU            reduce using rule 8 (statement -> digitize NEWLINE .)
    ENDIF           reduce using rule 8 (statement -> digitize NEWLINE .)


state 42

    (121) digitize -> digitize error .

    NEWLINE         reduce using rule 121 (digitize -> digitize error .)
    error           reduce using rule 121 (digitize -> digitize error .)


state 43

    (9) statement -> while NEWLINE .

    VARIANT         reduce using rule 9 (statement -> while NEWLINE .)
    error           reduce using rule 9 (statement -> while NEWLINE .)
    CONVERT         reduce using rule 9 (statement -> while NEWLINE .)
    DIGITIZE        reduce using rule 9 (statement -> while NEWLINE .)
    WHILE           reduce using rule 9 (statement -> while NEWLINE .)
    UNTIL           reduce using rule 9 (statement -> while NEWLINE .)
    IFLESS          reduce using rule 9 (statement -> while NEWLINE .)
    IFNLESS         reduce using rule 9 (statement -> while NEWLINE .)
    IFZERO          reduce using rule 9 (statement -> while NEWLINE .)
    IFNZERO         reduce using rule 9 (statement -> while NEWLINE .)
    IFHIGH          reduce using rule 9 (statement -> while NEWLINE .)
    IFNHIGH         reduce using rule 9 (statement -> while NEWLINE .)
    IFEQUAL         reduce using rule 9 (statement -> while NEWLINE .)
    COMMAND         reduce using rule 9 (statement -> while NEWLINE .)
    FUNC            reduce using rule 9 (statement -> while NEWLINE .)
    CALL            reduce using rule 9 (statement -> while NEWLINE .)
    NAME            reduce using rule 9 (statement -> while NEWLINE .)
    PARAM           reduce using rule 9 (statement -> while NEWLINE .)
    NEWLINE         reduce using rule 9 (statement -> while NEWLINE .)
    $end            reduce using rule 9 (statement -> while NEWLINE .)
    ENDW            reduce using rule 9 (statement -> while NEWLINE .)
    ENDU            reduce using rule 9 (statement -> while NEWLINE .)
    ENDIF           reduce using rule 9 (statement -> while NEWLINE .)


state 44

    (127) while -> while error .

    NEWLINE         reduce using rule 127 (while -> while error .)
    error           reduce using rule 127 (while -> while error .)


state 45

    (10) statement -> until NEWLINE .

    VARIANT         reduce using rule 10 (statement -> until NEWLINE .)
    error           reduce using rule 10 (statement -> until NEWLINE .)
    CONVERT         reduce using rule 10 (statement -> until NEWLINE .)
    DIGITIZE        reduce using rule 10 (statement -> until NEWLINE .)
    WHILE           reduce using rule 10 (statement -> until NEWLINE .)
    UNTIL           reduce using rule 10 (statement -> until NEWLINE .)
    IFLESS          reduce using rule 10 (statement -> until NEWLINE .)
    IFNLESS         reduce using rule 10 (statement -> until NEWLINE .)
    IFZERO          reduce using rule 10 (statement -> until NEWLINE .)
    IFNZERO         reduce using rule 10 (statement -> until NEWLINE .)
    IFHIGH          reduce using rule 10 (statement -> until NEWLINE .)
    IFNHIGH         reduce using rule 10 (statement -> until NEWLINE .)
    IFEQUAL         reduce using rule 10 (statement -> until NEWLINE .)
    COMMAND         reduce using rule 10 (statement -> until NEWLINE .)
    FUNC            reduce using rule 10 (statement -> until NEWLINE .)
    CALL            reduce using rule 10 (statement -> until NEWLINE .)
    NAME            reduce using rule 10 (statement -> until NEWLINE .)
    PARAM           reduce using rule 10 (statement -> until NEWLINE .)
    NEWLINE         reduce using rule 10 (statement -> until NEWLINE .)
    $end            reduce using rule 10 (statement -> until NEWLINE .)
    ENDW            reduce using rule 10 (statement -> until NEWLINE .)
    ENDU            reduce using rule 10 (statement -> until NEWLINE .)
    ENDIF           reduce using rule 10 (statement -> until NEWLINE .)


state 46

    (131) until -> until error .

    NEWLINE         reduce using rule 131 (until -> until error .)
    error           reduce using rule 131 (until -> until error .)


state 47

    (11) statement -> if NEWLINE .

    VARIANT         reduce using rule 11 (statement -> if NEWLINE .)
    error           reduce using rule 11 (statement -> if NEWLINE .)
    CONVERT         reduce using rule 11 (statement -> if NEWLINE .)
    DIGITIZE        reduce using rule 11 (statement -> if NEWLINE .)
    WHILE           reduce using rule 11 (statement -> if NEWLINE .)
    UNTIL           reduce using rule 11 (statement -> if NEWLINE .)
    IFLESS          reduce using rule 11 (statement -> if NEWLINE .)
    IFNLESS         reduce using rule 11 (statement -> if NEWLINE .)
    IFZERO          reduce using rule 11 (statement -> if NEWLINE .)
    IFNZERO         reduce using rule 11 (statement -> if NEWLINE .)
    IFHIGH          reduce using rule 11 (statement -> if NEWLINE .)
    IFNHIGH         reduce using rule 11 (statement -> if NEWLINE .)
    IFEQUAL         reduce using rule 11 (statement -> if NEWLINE .)
    COMMAND         reduce using rule 11 (statement -> if NEWLINE .)
    FUNC            reduce using rule 11 (statement -> if NEWLINE .)
    CALL            reduce using rule 11 (statement -> if NEWLINE .)
    NAME            reduce using rule 11 (statement -> if NEWLINE .)
    PARAM           reduce using rule 11 (statement -> if NEWLINE .)
    NEWLINE         reduce using rule 11 (statement -> if NEWLINE .)
    $end            reduce using rule 11 (statement -> if NEWLINE .)
    ENDW            reduce using rule 11 (statement -> if NEWLINE .)
    ENDU            reduce using rule 11 (statement -> if NEWLINE .)
    ENDIF           reduce using rule 11 (statement -> if NEWLINE .)


state 48

    (153) if -> if error .

    NEWLINE         reduce using rule 153 (if -> if error .)
    error           reduce using rule 153 (if -> if error .)


state 49

    (12) statement -> command NEWLINE .

    VARIANT         reduce using rule 12 (statement -> command NEWLINE .)
    error           reduce using rule 12 (statement -> command NEWLINE .)
    CONVERT         reduce using rule 12 (statement -> command NEWLINE .)
    DIGITIZE        reduce using rule 12 (statement -> command NEWLINE .)
    WHILE           reduce using rule 12 (statement -> command NEWLINE .)
    UNTIL           reduce using rule 12 (statement -> command NEWLINE .)
    IFLESS          reduce using rule 12 (statement -> command NEWLINE .)
    IFNLESS         reduce using rule 12 (statement -> command NEWLINE .)
    IFZERO          reduce using rule 12 (statement -> command NEWLINE .)
    IFNZERO         reduce using rule 12 (statement -> command NEWLINE .)
    IFHIGH          reduce using rule 12 (statement -> command NEWLINE .)
    IFNHIGH         reduce using rule 12 (statement -> command NEWLINE .)
    IFEQUAL         reduce using rule 12 (statement -> command NEWLINE .)
    COMMAND         reduce using rule 12 (statement -> command NEWLINE .)
    FUNC            reduce using rule 12 (statement -> command NEWLINE .)
    CALL            reduce using rule 12 (statement -> command NEWLINE .)
    NAME            reduce using rule 12 (statement -> command NEWLINE .)
    PARAM           reduce using rule 12 (statement -> command NEWLINE .)
    NEWLINE         reduce using rule 12 (statement -> command NEWLINE .)
    $end            reduce using rule 12 (statement -> command NEWLINE .)
    ENDW            reduce using rule 12 (statement -> command NEWLINE .)
    ENDU            reduce using rule 12 (statement -> command NEWLINE .)
    ENDIF           reduce using rule 12 (statement -> command NEWLINE .)


state 50

    (123) command -> command error .

    NEWLINE         reduce using rule 123 (command -> command error .)
    error           reduce using rule 123 (command -> command error .)
    PLUS            reduce using rule 123 (command -> command error .)
    VARIANT         reduce using rule 123 (command -> command error .)
    CONVERT         reduce using rule 123 (command -> command error .)
    DIGITIZE        reduce using rule 123 (command -> command error .)
    WHILE           reduce using rule 123 (command -> command error .)
    UNTIL           reduce using rule 123 (command -> command error .)
    IFLESS          reduce using rule 123 (command -> command error .)
    IFNLESS         reduce using rule 123 (command -> command error .)
    IFZERO          reduce using rule 123 (command -> command error .)
    IFNZERO         reduce using rule 123 (command -> command error .)
    IFHIGH          reduce using rule 123 (command -> command error .)
    IFNHIGH         reduce using rule 123 (command -> command error .)
    IFEQUAL         reduce using rule 123 (command -> command error .)
    COMMAND         reduce using rule 123 (command -> command error .)
    FUNC            reduce using rule 123 (command -> command error .)
    CALL            reduce using rule 123 (command -> command error .)
    NAME            reduce using rule 123 (command -> command error .)
    PARAM           reduce using rule 123 (command -> command error .)
    COMMA           reduce using rule 123 (command -> command error .)
    RSQBRACKET      reduce using rule 123 (command -> command error .)


state 51

    (13) statement -> function NEWLINE .

    VARIANT         reduce using rule 13 (statement -> function NEWLINE .)
    error           reduce using rule 13 (statement -> function NEWLINE .)
    CONVERT         reduce using rule 13 (statement -> function NEWLINE .)
    DIGITIZE        reduce using rule 13 (statement -> function NEWLINE .)
    WHILE           reduce using rule 13 (statement -> function NEWLINE .)
    UNTIL           reduce using rule 13 (statement -> function NEWLINE .)
    IFLESS          reduce using rule 13 (statement -> function NEWLINE .)
    IFNLESS         reduce using rule 13 (statement -> function NEWLINE .)
    IFZERO          reduce using rule 13 (statement -> function NEWLINE .)
    IFNZERO         reduce using rule 13 (statement -> function NEWLINE .)
    IFHIGH          reduce using rule 13 (statement -> function NEWLINE .)
    IFNHIGH         reduce using rule 13 (statement -> function NEWLINE .)
    IFEQUAL         reduce using rule 13 (statement -> function NEWLINE .)
    COMMAND         reduce using rule 13 (statement -> function NEWLINE .)
    FUNC            reduce using rule 13 (statement -> function NEWLINE .)
    CALL            reduce using rule 13 (statement -> function NEWLINE .)
    NAME            reduce using rule 13 (statement -> function NEWLINE .)
    PARAM           reduce using rule 13 (statement -> function NEWLINE .)
    NEWLINE         reduce using rule 13 (statement -> function NEWLINE .)
    $end            reduce using rule 13 (statement -> function NEWLINE .)
    ENDW            reduce using rule 13 (statement -> function NEWLINE .)
    ENDU            reduce using rule 13 (statement -> function NEWLINE .)
    ENDIF           reduce using rule 13 (statement -> function NEWLINE .)


state 52

    (157) function -> function error .

    NEWLINE         reduce using rule 157 (function -> function error .)
    error           reduce using rule 157 (function -> function error .)


state 53

    (14) statement -> function_call NEWLINE .

    VARIANT         reduce using rule 14 (statement -> function_call NEWLINE .)
    error           reduce using rule 14 (statement -> function_call NEWLINE .)
    CONVERT         reduce using rule 14 (statement -> function_call NEWLINE .)
    DIGITIZE        reduce using rule 14 (statement -> function_call NEWLINE .)
    WHILE           reduce using rule 14 (statement -> function_call NEWLINE .)
    UNTIL           reduce using rule 14 (statement -> function_call NEWLINE .)
    IFLESS          reduce using rule 14 (statement -> function_call NEWLINE .)
    IFNLESS         reduce using rule 14 (statement -> function_call NEWLINE .)
    IFZERO          reduce using rule 14 (statement -> function_call NEWLINE .)
    IFNZERO         reduce using rule 14 (statement -> function_call NEWLINE .)
    IFHIGH          reduce using rule 14 (statement -> function_call NEWLINE .)
    IFNHIGH         reduce using rule 14 (statement -> function_call NEWLINE .)
    IFEQUAL         reduce using rule 14 (statement -> function_call NEWLINE .)
    COMMAND         reduce using rule 14 (statement -> function_call NEWLINE .)
    FUNC            reduce using rule 14 (statement -> function_call NEWLINE .)
    CALL            reduce using rule 14 (statement -> function_call NEWLINE .)
    NAME            reduce using rule 14 (statement -> function_call NEWLINE .)
    PARAM           reduce using rule 14 (statement -> function_call NEWLINE .)
    NEWLINE         reduce using rule 14 (statement -> function_call NEWLINE .)
    $end            reduce using rule 14 (statement -> function_call NEWLINE .)
    ENDW            reduce using rule 14 (statement -> function_call NEWLINE .)
    ENDU            reduce using rule 14 (statement -> function_call NEWLINE .)
    ENDIF           reduce using rule 14 (statement -> function_call NEWLINE .)


state 54

    (16) declaration -> VARIANT variant .
    (17) declaration -> VARIANT variant . ASSIGNMENT initialization
    (106) declaration -> VARIANT variant . ASSIGNMENT error

    NEWLINE         reduce using rule 16 (declaration -> VARIANT variant .)
    error           reduce using rule 16 (declaration -> VARIANT variant .)
    ASSIGNMENT      shift and go to state 110


state 55

    (105) declaration -> VARIANT error .

    NEWLINE         reduce using rule 105 (declaration -> VARIANT error .)
    error           reduce using rule 105 (declaration -> VARIANT error .)


state 56

    (72) assignment -> variant ASSIGNMENT . expression
    (113) assignment -> variant ASSIGNMENT . error
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variant
    (41) expression -> . function_call
    (42) expression -> . command
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . MINUS expression
    (65) const -> . bool_const
    (66) const -> . decimal_const
    (67) const -> . string_const
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (69) bool_const -> . TRUE
    (70) bool_const -> . FALSE
    (68) decimal_const -> . DECIMAL
    (71) string_const -> . LETTERS

    error           shift and go to state 113
    MINUS           shift and go to state 118
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32
    COMMAND         shift and go to state 29
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    DECIMAL         shift and go to state 83
    LETTERS         shift and go to state 101

    variant                        shift and go to state 111
    expression                     shift and go to state 112
    math_expression                shift and go to state 114
    const                          shift and go to state 115
    function_call                  shift and go to state 116
    command                        shift and go to state 117
    bool_const                     shift and go to state 119
    decimal_const                  shift and go to state 120
    string_const                   shift and go to state 121

state 57

    (114) assignment -> error ASSIGNMENT . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variant
    (41) expression -> . function_call
    (42) expression -> . command
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . MINUS expression
    (65) const -> . bool_const
    (66) const -> . decimal_const
    (67) const -> . string_const
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (69) bool_const -> . TRUE
    (70) bool_const -> . FALSE
    (68) decimal_const -> . DECIMAL
    (71) string_const -> . LETTERS

    MINUS           shift and go to state 118
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32
    COMMAND         shift and go to state 29
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    DECIMAL         shift and go to state 83
    LETTERS         shift and go to state 101

    expression                     shift and go to state 122
    math_expression                shift and go to state 114
    const                          shift and go to state 115
    variant                        shift and go to state 111
    function_call                  shift and go to state 116
    command                        shift and go to state 117
    bool_const                     shift and go to state 119
    decimal_const                  shift and go to state 120
    string_const                   shift and go to state 121

state 58

    (73) convert -> CONVERT type . TO type variant
    (115) convert -> CONVERT type . TO type error
    (116) convert -> CONVERT type . TO error
    (117) convert -> CONVERT type . error

    TO              shift and go to state 123
    error           shift and go to state 124


state 59

    (118) convert -> CONVERT error .

    NEWLINE         reduce using rule 118 (convert -> CONVERT error .)
    error           reduce using rule 118 (convert -> CONVERT error .)


state 60

    (75) type -> BOOL .

    TO              reduce using rule 75 (type -> BOOL .)
    error           reduce using rule 75 (type -> BOOL .)
    NAME            reduce using rule 75 (type -> BOOL .)
    PARAM           reduce using rule 75 (type -> BOOL .)


state 61

    (76) type -> DIGIT .

    TO              reduce using rule 76 (type -> DIGIT .)
    error           reduce using rule 76 (type -> DIGIT .)
    NAME            reduce using rule 76 (type -> DIGIT .)
    PARAM           reduce using rule 76 (type -> DIGIT .)


state 62

    (77) type -> STRING .

    TO              reduce using rule 77 (type -> STRING .)
    error           reduce using rule 77 (type -> STRING .)
    NAME            reduce using rule 77 (type -> STRING .)
    PARAM           reduce using rule 77 (type -> STRING .)


state 63

    (74) digitize -> DIGITIZE type . variant
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    variant                        shift and go to state 125

state 64

    (120) digitize -> DIGITIZE error .

    NEWLINE         reduce using rule 120 (digitize -> DIGITIZE error .)
    error           reduce using rule 120 (digitize -> DIGITIZE error .)


state 65

    (78) while -> WHILE bool_expression . NEWLINE statements ENDW
    (125) while -> WHILE bool_expression . NEWLINE statements error
    (126) while -> WHILE bool_expression . statements ENDW
    (61) bool_math_expression -> bool_expression . PLUS bool_expression
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 126
    PLUS            shift and go to state 128
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

  ! NEWLINE         [ reduce using rule 15 (empty -> .) ]

    statements                     shift and go to state 127
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 66

    (124) while -> WHILE error . NEWLINE statements ENDW

    NEWLINE         shift and go to state 129


state 67

    (47) bool_expression -> bool_math_expression .

    NEWLINE         reduce using rule 47 (bool_expression -> bool_math_expression .)
    PLUS            reduce using rule 47 (bool_expression -> bool_math_expression .)
    VARIANT         reduce using rule 47 (bool_expression -> bool_math_expression .)
    error           reduce using rule 47 (bool_expression -> bool_math_expression .)
    CONVERT         reduce using rule 47 (bool_expression -> bool_math_expression .)
    DIGITIZE        reduce using rule 47 (bool_expression -> bool_math_expression .)
    WHILE           reduce using rule 47 (bool_expression -> bool_math_expression .)
    UNTIL           reduce using rule 47 (bool_expression -> bool_math_expression .)
    IFLESS          reduce using rule 47 (bool_expression -> bool_math_expression .)
    IFNLESS         reduce using rule 47 (bool_expression -> bool_math_expression .)
    IFZERO          reduce using rule 47 (bool_expression -> bool_math_expression .)
    IFNZERO         reduce using rule 47 (bool_expression -> bool_math_expression .)
    IFHIGH          reduce using rule 47 (bool_expression -> bool_math_expression .)
    IFNHIGH         reduce using rule 47 (bool_expression -> bool_math_expression .)
    IFEQUAL         reduce using rule 47 (bool_expression -> bool_math_expression .)
    COMMAND         reduce using rule 47 (bool_expression -> bool_math_expression .)
    FUNC            reduce using rule 47 (bool_expression -> bool_math_expression .)
    CALL            reduce using rule 47 (bool_expression -> bool_math_expression .)
    NAME            reduce using rule 47 (bool_expression -> bool_math_expression .)
    PARAM           reduce using rule 47 (bool_expression -> bool_math_expression .)


state 68

    (48) bool_expression -> bool_const .

    NEWLINE         reduce using rule 48 (bool_expression -> bool_const .)
    PLUS            reduce using rule 48 (bool_expression -> bool_const .)
    VARIANT         reduce using rule 48 (bool_expression -> bool_const .)
    error           reduce using rule 48 (bool_expression -> bool_const .)
    CONVERT         reduce using rule 48 (bool_expression -> bool_const .)
    DIGITIZE        reduce using rule 48 (bool_expression -> bool_const .)
    WHILE           reduce using rule 48 (bool_expression -> bool_const .)
    UNTIL           reduce using rule 48 (bool_expression -> bool_const .)
    IFLESS          reduce using rule 48 (bool_expression -> bool_const .)
    IFNLESS         reduce using rule 48 (bool_expression -> bool_const .)
    IFZERO          reduce using rule 48 (bool_expression -> bool_const .)
    IFNZERO         reduce using rule 48 (bool_expression -> bool_const .)
    IFHIGH          reduce using rule 48 (bool_expression -> bool_const .)
    IFNHIGH         reduce using rule 48 (bool_expression -> bool_const .)
    IFEQUAL         reduce using rule 48 (bool_expression -> bool_const .)
    COMMAND         reduce using rule 48 (bool_expression -> bool_const .)
    FUNC            reduce using rule 48 (bool_expression -> bool_const .)
    CALL            reduce using rule 48 (bool_expression -> bool_const .)
    NAME            reduce using rule 48 (bool_expression -> bool_const .)
    PARAM           reduce using rule 48 (bool_expression -> bool_const .)


state 69

    (49) bool_expression -> variant .

    NEWLINE         reduce using rule 49 (bool_expression -> variant .)
    PLUS            reduce using rule 49 (bool_expression -> variant .)
    VARIANT         reduce using rule 49 (bool_expression -> variant .)
    error           reduce using rule 49 (bool_expression -> variant .)
    CONVERT         reduce using rule 49 (bool_expression -> variant .)
    DIGITIZE        reduce using rule 49 (bool_expression -> variant .)
    WHILE           reduce using rule 49 (bool_expression -> variant .)
    UNTIL           reduce using rule 49 (bool_expression -> variant .)
    IFLESS          reduce using rule 49 (bool_expression -> variant .)
    IFNLESS         reduce using rule 49 (bool_expression -> variant .)
    IFZERO          reduce using rule 49 (bool_expression -> variant .)
    IFNZERO         reduce using rule 49 (bool_expression -> variant .)
    IFHIGH          reduce using rule 49 (bool_expression -> variant .)
    IFNHIGH         reduce using rule 49 (bool_expression -> variant .)
    IFEQUAL         reduce using rule 49 (bool_expression -> variant .)
    COMMAND         reduce using rule 49 (bool_expression -> variant .)
    FUNC            reduce using rule 49 (bool_expression -> variant .)
    CALL            reduce using rule 49 (bool_expression -> variant .)
    NAME            reduce using rule 49 (bool_expression -> variant .)
    PARAM           reduce using rule 49 (bool_expression -> variant .)


state 70

    (50) bool_expression -> function_call .

    NEWLINE         reduce using rule 50 (bool_expression -> function_call .)
    PLUS            reduce using rule 50 (bool_expression -> function_call .)
    VARIANT         reduce using rule 50 (bool_expression -> function_call .)
    error           reduce using rule 50 (bool_expression -> function_call .)
    CONVERT         reduce using rule 50 (bool_expression -> function_call .)
    DIGITIZE        reduce using rule 50 (bool_expression -> function_call .)
    WHILE           reduce using rule 50 (bool_expression -> function_call .)
    UNTIL           reduce using rule 50 (bool_expression -> function_call .)
    IFLESS          reduce using rule 50 (bool_expression -> function_call .)
    IFNLESS         reduce using rule 50 (bool_expression -> function_call .)
    IFZERO          reduce using rule 50 (bool_expression -> function_call .)
    IFNZERO         reduce using rule 50 (bool_expression -> function_call .)
    IFHIGH          reduce using rule 50 (bool_expression -> function_call .)
    IFNHIGH         reduce using rule 50 (bool_expression -> function_call .)
    IFEQUAL         reduce using rule 50 (bool_expression -> function_call .)
    COMMAND         reduce using rule 50 (bool_expression -> function_call .)
    FUNC            reduce using rule 50 (bool_expression -> function_call .)
    CALL            reduce using rule 50 (bool_expression -> function_call .)
    NAME            reduce using rule 50 (bool_expression -> function_call .)
    PARAM           reduce using rule 50 (bool_expression -> function_call .)


state 71

    (62) bool_math_expression -> MINUS . bool_expression
    (47) bool_expression -> . bool_math_expression
    (48) bool_expression -> . bool_const
    (49) bool_expression -> . variant
    (50) bool_expression -> . function_call
    (61) bool_math_expression -> . bool_expression PLUS bool_expression
    (62) bool_math_expression -> . MINUS bool_expression
    (69) bool_const -> . TRUE
    (70) bool_const -> . FALSE
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    MINUS           shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    bool_expression                shift and go to state 130
    bool_math_expression           shift and go to state 67
    bool_const                     shift and go to state 68
    variant                        shift and go to state 69
    function_call                  shift and go to state 70

state 72

    (69) bool_const -> TRUE .

    NEWLINE         reduce using rule 69 (bool_const -> TRUE .)
    PLUS            reduce using rule 69 (bool_const -> TRUE .)
    VARIANT         reduce using rule 69 (bool_const -> TRUE .)
    error           reduce using rule 69 (bool_const -> TRUE .)
    CONVERT         reduce using rule 69 (bool_const -> TRUE .)
    DIGITIZE        reduce using rule 69 (bool_const -> TRUE .)
    WHILE           reduce using rule 69 (bool_const -> TRUE .)
    UNTIL           reduce using rule 69 (bool_const -> TRUE .)
    IFLESS          reduce using rule 69 (bool_const -> TRUE .)
    IFNLESS         reduce using rule 69 (bool_const -> TRUE .)
    IFZERO          reduce using rule 69 (bool_const -> TRUE .)
    IFNZERO         reduce using rule 69 (bool_const -> TRUE .)
    IFHIGH          reduce using rule 69 (bool_const -> TRUE .)
    IFNHIGH         reduce using rule 69 (bool_const -> TRUE .)
    IFEQUAL         reduce using rule 69 (bool_const -> TRUE .)
    COMMAND         reduce using rule 69 (bool_const -> TRUE .)
    FUNC            reduce using rule 69 (bool_const -> TRUE .)
    CALL            reduce using rule 69 (bool_const -> TRUE .)
    NAME            reduce using rule 69 (bool_const -> TRUE .)
    PARAM           reduce using rule 69 (bool_const -> TRUE .)
    COMMA           reduce using rule 69 (bool_const -> TRUE .)
    RSQBRACKET      reduce using rule 69 (bool_const -> TRUE .)
    SEMICOLON       reduce using rule 69 (bool_const -> TRUE .)


state 73

    (70) bool_const -> FALSE .

    NEWLINE         reduce using rule 70 (bool_const -> FALSE .)
    PLUS            reduce using rule 70 (bool_const -> FALSE .)
    VARIANT         reduce using rule 70 (bool_const -> FALSE .)
    error           reduce using rule 70 (bool_const -> FALSE .)
    CONVERT         reduce using rule 70 (bool_const -> FALSE .)
    DIGITIZE        reduce using rule 70 (bool_const -> FALSE .)
    WHILE           reduce using rule 70 (bool_const -> FALSE .)
    UNTIL           reduce using rule 70 (bool_const -> FALSE .)
    IFLESS          reduce using rule 70 (bool_const -> FALSE .)
    IFNLESS         reduce using rule 70 (bool_const -> FALSE .)
    IFZERO          reduce using rule 70 (bool_const -> FALSE .)
    IFNZERO         reduce using rule 70 (bool_const -> FALSE .)
    IFHIGH          reduce using rule 70 (bool_const -> FALSE .)
    IFNHIGH         reduce using rule 70 (bool_const -> FALSE .)
    IFEQUAL         reduce using rule 70 (bool_const -> FALSE .)
    COMMAND         reduce using rule 70 (bool_const -> FALSE .)
    FUNC            reduce using rule 70 (bool_const -> FALSE .)
    CALL            reduce using rule 70 (bool_const -> FALSE .)
    NAME            reduce using rule 70 (bool_const -> FALSE .)
    PARAM           reduce using rule 70 (bool_const -> FALSE .)
    COMMA           reduce using rule 70 (bool_const -> FALSE .)
    RSQBRACKET      reduce using rule 70 (bool_const -> FALSE .)
    SEMICOLON       reduce using rule 70 (bool_const -> FALSE .)


state 74

    (79) until -> UNTIL bool_expression . NEWLINE statements ENDU
    (129) until -> UNTIL bool_expression . NEWLINE statements error
    (130) until -> UNTIL bool_expression . statements ENDU
    (61) bool_math_expression -> bool_expression . PLUS bool_expression
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 131
    PLUS            shift and go to state 128
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

  ! NEWLINE         [ reduce using rule 15 (empty -> .) ]

    statements                     shift and go to state 132
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 75

    (128) until -> UNTIL error . NEWLINE statements ENDU

    NEWLINE         shift and go to state 133


state 76

    (80) if -> IFLESS decimal_expression . COMMA decimal_expression NEWLINE statements ENDIF
    (139) if -> IFLESS decimal_expression . COMMA decimal_expression NEWLINE statements error
    (146) if -> IFLESS decimal_expression . COMMA decimal_expression statements ENDIF
    (59) dec_math_expression -> decimal_expression . PLUS decimal_expression

    COMMA           shift and go to state 134
    PLUS            shift and go to state 135


state 77

    (132) if -> IFLESS error . NEWLINE statements ENDIF

    NEWLINE         shift and go to state 136


state 78

    (43) decimal_expression -> dec_math_expression .

    COMMA           reduce using rule 43 (decimal_expression -> dec_math_expression .)
    PLUS            reduce using rule 43 (decimal_expression -> dec_math_expression .)
    NEWLINE         reduce using rule 43 (decimal_expression -> dec_math_expression .)
    VARIANT         reduce using rule 43 (decimal_expression -> dec_math_expression .)
    error           reduce using rule 43 (decimal_expression -> dec_math_expression .)
    CONVERT         reduce using rule 43 (decimal_expression -> dec_math_expression .)
    DIGITIZE        reduce using rule 43 (decimal_expression -> dec_math_expression .)
    WHILE           reduce using rule 43 (decimal_expression -> dec_math_expression .)
    UNTIL           reduce using rule 43 (decimal_expression -> dec_math_expression .)
    IFLESS          reduce using rule 43 (decimal_expression -> dec_math_expression .)
    IFNLESS         reduce using rule 43 (decimal_expression -> dec_math_expression .)
    IFZERO          reduce using rule 43 (decimal_expression -> dec_math_expression .)
    IFNZERO         reduce using rule 43 (decimal_expression -> dec_math_expression .)
    IFHIGH          reduce using rule 43 (decimal_expression -> dec_math_expression .)
    IFNHIGH         reduce using rule 43 (decimal_expression -> dec_math_expression .)
    IFEQUAL         reduce using rule 43 (decimal_expression -> dec_math_expression .)
    COMMAND         reduce using rule 43 (decimal_expression -> dec_math_expression .)
    FUNC            reduce using rule 43 (decimal_expression -> dec_math_expression .)
    CALL            reduce using rule 43 (decimal_expression -> dec_math_expression .)
    NAME            reduce using rule 43 (decimal_expression -> dec_math_expression .)
    PARAM           reduce using rule 43 (decimal_expression -> dec_math_expression .)
    RSQBRACKET      reduce using rule 43 (decimal_expression -> dec_math_expression .)


state 79

    (44) decimal_expression -> decimal_const .

    COMMA           reduce using rule 44 (decimal_expression -> decimal_const .)
    PLUS            reduce using rule 44 (decimal_expression -> decimal_const .)
    NEWLINE         reduce using rule 44 (decimal_expression -> decimal_const .)
    VARIANT         reduce using rule 44 (decimal_expression -> decimal_const .)
    error           reduce using rule 44 (decimal_expression -> decimal_const .)
    CONVERT         reduce using rule 44 (decimal_expression -> decimal_const .)
    DIGITIZE        reduce using rule 44 (decimal_expression -> decimal_const .)
    WHILE           reduce using rule 44 (decimal_expression -> decimal_const .)
    UNTIL           reduce using rule 44 (decimal_expression -> decimal_const .)
    IFLESS          reduce using rule 44 (decimal_expression -> decimal_const .)
    IFNLESS         reduce using rule 44 (decimal_expression -> decimal_const .)
    IFZERO          reduce using rule 44 (decimal_expression -> decimal_const .)
    IFNZERO         reduce using rule 44 (decimal_expression -> decimal_const .)
    IFHIGH          reduce using rule 44 (decimal_expression -> decimal_const .)
    IFNHIGH         reduce using rule 44 (decimal_expression -> decimal_const .)
    IFEQUAL         reduce using rule 44 (decimal_expression -> decimal_const .)
    COMMAND         reduce using rule 44 (decimal_expression -> decimal_const .)
    FUNC            reduce using rule 44 (decimal_expression -> decimal_const .)
    CALL            reduce using rule 44 (decimal_expression -> decimal_const .)
    NAME            reduce using rule 44 (decimal_expression -> decimal_const .)
    PARAM           reduce using rule 44 (decimal_expression -> decimal_const .)
    RSQBRACKET      reduce using rule 44 (decimal_expression -> decimal_const .)


state 80

    (45) decimal_expression -> variant .

    COMMA           reduce using rule 45 (decimal_expression -> variant .)
    PLUS            reduce using rule 45 (decimal_expression -> variant .)
    NEWLINE         reduce using rule 45 (decimal_expression -> variant .)
    VARIANT         reduce using rule 45 (decimal_expression -> variant .)
    error           reduce using rule 45 (decimal_expression -> variant .)
    CONVERT         reduce using rule 45 (decimal_expression -> variant .)
    DIGITIZE        reduce using rule 45 (decimal_expression -> variant .)
    WHILE           reduce using rule 45 (decimal_expression -> variant .)
    UNTIL           reduce using rule 45 (decimal_expression -> variant .)
    IFLESS          reduce using rule 45 (decimal_expression -> variant .)
    IFNLESS         reduce using rule 45 (decimal_expression -> variant .)
    IFZERO          reduce using rule 45 (decimal_expression -> variant .)
    IFNZERO         reduce using rule 45 (decimal_expression -> variant .)
    IFHIGH          reduce using rule 45 (decimal_expression -> variant .)
    IFNHIGH         reduce using rule 45 (decimal_expression -> variant .)
    IFEQUAL         reduce using rule 45 (decimal_expression -> variant .)
    COMMAND         reduce using rule 45 (decimal_expression -> variant .)
    FUNC            reduce using rule 45 (decimal_expression -> variant .)
    CALL            reduce using rule 45 (decimal_expression -> variant .)
    NAME            reduce using rule 45 (decimal_expression -> variant .)
    PARAM           reduce using rule 45 (decimal_expression -> variant .)
    RSQBRACKET      reduce using rule 45 (decimal_expression -> variant .)


state 81

    (46) decimal_expression -> function_call .

    COMMA           reduce using rule 46 (decimal_expression -> function_call .)
    PLUS            reduce using rule 46 (decimal_expression -> function_call .)
    NEWLINE         reduce using rule 46 (decimal_expression -> function_call .)
    VARIANT         reduce using rule 46 (decimal_expression -> function_call .)
    error           reduce using rule 46 (decimal_expression -> function_call .)
    CONVERT         reduce using rule 46 (decimal_expression -> function_call .)
    DIGITIZE        reduce using rule 46 (decimal_expression -> function_call .)
    WHILE           reduce using rule 46 (decimal_expression -> function_call .)
    UNTIL           reduce using rule 46 (decimal_expression -> function_call .)
    IFLESS          reduce using rule 46 (decimal_expression -> function_call .)
    IFNLESS         reduce using rule 46 (decimal_expression -> function_call .)
    IFZERO          reduce using rule 46 (decimal_expression -> function_call .)
    IFNZERO         reduce using rule 46 (decimal_expression -> function_call .)
    IFHIGH          reduce using rule 46 (decimal_expression -> function_call .)
    IFNHIGH         reduce using rule 46 (decimal_expression -> function_call .)
    IFEQUAL         reduce using rule 46 (decimal_expression -> function_call .)
    COMMAND         reduce using rule 46 (decimal_expression -> function_call .)
    FUNC            reduce using rule 46 (decimal_expression -> function_call .)
    CALL            reduce using rule 46 (decimal_expression -> function_call .)
    NAME            reduce using rule 46 (decimal_expression -> function_call .)
    PARAM           reduce using rule 46 (decimal_expression -> function_call .)
    RSQBRACKET      reduce using rule 46 (decimal_expression -> function_call .)


state 82

    (60) dec_math_expression -> MINUS . decimal_expression
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (46) decimal_expression -> . function_call
    (59) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (60) dec_math_expression -> . MINUS decimal_expression
    (68) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    MINUS           shift and go to state 82
    DECIMAL         shift and go to state 83
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    decimal_expression             shift and go to state 137
    dec_math_expression            shift and go to state 78
    decimal_const                  shift and go to state 79
    variant                        shift and go to state 80
    function_call                  shift and go to state 81

state 83

    (68) decimal_const -> DECIMAL .

    COMMA           reduce using rule 68 (decimal_const -> DECIMAL .)
    PLUS            reduce using rule 68 (decimal_const -> DECIMAL .)
    NEWLINE         reduce using rule 68 (decimal_const -> DECIMAL .)
    VARIANT         reduce using rule 68 (decimal_const -> DECIMAL .)
    error           reduce using rule 68 (decimal_const -> DECIMAL .)
    CONVERT         reduce using rule 68 (decimal_const -> DECIMAL .)
    DIGITIZE        reduce using rule 68 (decimal_const -> DECIMAL .)
    WHILE           reduce using rule 68 (decimal_const -> DECIMAL .)
    UNTIL           reduce using rule 68 (decimal_const -> DECIMAL .)
    IFLESS          reduce using rule 68 (decimal_const -> DECIMAL .)
    IFNLESS         reduce using rule 68 (decimal_const -> DECIMAL .)
    IFZERO          reduce using rule 68 (decimal_const -> DECIMAL .)
    IFNZERO         reduce using rule 68 (decimal_const -> DECIMAL .)
    IFHIGH          reduce using rule 68 (decimal_const -> DECIMAL .)
    IFNHIGH         reduce using rule 68 (decimal_const -> DECIMAL .)
    IFEQUAL         reduce using rule 68 (decimal_const -> DECIMAL .)
    COMMAND         reduce using rule 68 (decimal_const -> DECIMAL .)
    FUNC            reduce using rule 68 (decimal_const -> DECIMAL .)
    CALL            reduce using rule 68 (decimal_const -> DECIMAL .)
    NAME            reduce using rule 68 (decimal_const -> DECIMAL .)
    PARAM           reduce using rule 68 (decimal_const -> DECIMAL .)
    RSQBRACKET      reduce using rule 68 (decimal_const -> DECIMAL .)
    SEMICOLON       reduce using rule 68 (decimal_const -> DECIMAL .)


state 84

    (81) if -> IFNLESS decimal_expression . COMMA decimal_expression NEWLINE statements ENDIF
    (140) if -> IFNLESS decimal_expression . COMMA decimal_expression NEWLINE statements error
    (147) if -> IFNLESS decimal_expression . COMMA decimal_expression statements ENDIF
    (59) dec_math_expression -> decimal_expression . PLUS decimal_expression

    COMMA           shift and go to state 138
    PLUS            shift and go to state 135


state 85

    (133) if -> IFNLESS error . NEWLINE statements ENDIF

    NEWLINE         shift and go to state 139


state 86

    (82) if -> IFZERO decimal_expression . NEWLINE statements ENDIF
    (141) if -> IFZERO decimal_expression . NEWLINE statements error
    (148) if -> IFZERO decimal_expression . statements ENDIF
    (59) dec_math_expression -> decimal_expression . PLUS decimal_expression
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 140
    PLUS            shift and go to state 135
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

  ! NEWLINE         [ reduce using rule 15 (empty -> .) ]

    statements                     shift and go to state 141
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 87

    (134) if -> IFZERO error . NEWLINE statements ENDIF

    NEWLINE         shift and go to state 142


state 88

    (83) if -> IFNZERO decimal_expression . NEWLINE statements ENDIF
    (142) if -> IFNZERO decimal_expression . NEWLINE statements error
    (149) if -> IFNZERO decimal_expression . statements ENDIF
    (59) dec_math_expression -> decimal_expression . PLUS decimal_expression
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 143
    PLUS            shift and go to state 135
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

  ! NEWLINE         [ reduce using rule 15 (empty -> .) ]

    statements                     shift and go to state 144
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 89

    (135) if -> IFNZERO error . NEWLINE statements ENDIF

    NEWLINE         shift and go to state 145


state 90

    (84) if -> IFHIGH decimal_expression . COMMA decimal_expression NEWLINE statements ENDIF
    (143) if -> IFHIGH decimal_expression . COMMA decimal_expression NEWLINE statements error
    (150) if -> IFHIGH decimal_expression . COMMA decimal_expression statements ENDIF
    (59) dec_math_expression -> decimal_expression . PLUS decimal_expression

    COMMA           shift and go to state 146
    PLUS            shift and go to state 135


state 91

    (136) if -> IFHIGH error . NEWLINE statements ENDIF

    NEWLINE         shift and go to state 147


state 92

    (85) if -> IFNHIGH decimal_expression . COMMA decimal_expression NEWLINE statements ENDIF
    (144) if -> IFNHIGH decimal_expression . COMMA decimal_expression NEWLINE statements error
    (151) if -> IFNHIGH decimal_expression . COMMA decimal_expression statements ENDIF
    (59) dec_math_expression -> decimal_expression . PLUS decimal_expression

    COMMA           shift and go to state 148
    PLUS            shift and go to state 135


state 93

    (137) if -> IFNHIGH error . NEWLINE statements ENDIF

    NEWLINE         shift and go to state 149


state 94

    (86) if -> IFEQUAL string_expression . COMMA string_expression NEWLINE statements ENDIF
    (145) if -> IFEQUAL string_expression . COMMA string_expression NEWLINE statements error
    (152) if -> IFEQUAL string_expression . COMMA string_expression statements ENDIF
    (63) string_math_expression -> string_expression . PLUS string_expression

    COMMA           shift and go to state 150
    PLUS            shift and go to state 151


state 95

    (138) if -> IFEQUAL error . NEWLINE statements ENDIF

    NEWLINE         shift and go to state 152


state 96

    (51) string_expression -> string_math_expression .

    COMMA           reduce using rule 51 (string_expression -> string_math_expression .)
    PLUS            reduce using rule 51 (string_expression -> string_math_expression .)
    NEWLINE         reduce using rule 51 (string_expression -> string_math_expression .)
    error           reduce using rule 51 (string_expression -> string_math_expression .)
    VARIANT         reduce using rule 51 (string_expression -> string_math_expression .)
    CONVERT         reduce using rule 51 (string_expression -> string_math_expression .)
    DIGITIZE        reduce using rule 51 (string_expression -> string_math_expression .)
    WHILE           reduce using rule 51 (string_expression -> string_math_expression .)
    UNTIL           reduce using rule 51 (string_expression -> string_math_expression .)
    IFLESS          reduce using rule 51 (string_expression -> string_math_expression .)
    IFNLESS         reduce using rule 51 (string_expression -> string_math_expression .)
    IFZERO          reduce using rule 51 (string_expression -> string_math_expression .)
    IFNZERO         reduce using rule 51 (string_expression -> string_math_expression .)
    IFHIGH          reduce using rule 51 (string_expression -> string_math_expression .)
    IFNHIGH         reduce using rule 51 (string_expression -> string_math_expression .)
    IFEQUAL         reduce using rule 51 (string_expression -> string_math_expression .)
    COMMAND         reduce using rule 51 (string_expression -> string_math_expression .)
    FUNC            reduce using rule 51 (string_expression -> string_math_expression .)
    CALL            reduce using rule 51 (string_expression -> string_math_expression .)
    NAME            reduce using rule 51 (string_expression -> string_math_expression .)
    PARAM           reduce using rule 51 (string_expression -> string_math_expression .)
    RSQBRACKET      reduce using rule 51 (string_expression -> string_math_expression .)


state 97

    (52) string_expression -> string_const .

    COMMA           reduce using rule 52 (string_expression -> string_const .)
    PLUS            reduce using rule 52 (string_expression -> string_const .)
    NEWLINE         reduce using rule 52 (string_expression -> string_const .)
    error           reduce using rule 52 (string_expression -> string_const .)
    VARIANT         reduce using rule 52 (string_expression -> string_const .)
    CONVERT         reduce using rule 52 (string_expression -> string_const .)
    DIGITIZE        reduce using rule 52 (string_expression -> string_const .)
    WHILE           reduce using rule 52 (string_expression -> string_const .)
    UNTIL           reduce using rule 52 (string_expression -> string_const .)
    IFLESS          reduce using rule 52 (string_expression -> string_const .)
    IFNLESS         reduce using rule 52 (string_expression -> string_const .)
    IFZERO          reduce using rule 52 (string_expression -> string_const .)
    IFNZERO         reduce using rule 52 (string_expression -> string_const .)
    IFHIGH          reduce using rule 52 (string_expression -> string_const .)
    IFNHIGH         reduce using rule 52 (string_expression -> string_const .)
    IFEQUAL         reduce using rule 52 (string_expression -> string_const .)
    COMMAND         reduce using rule 52 (string_expression -> string_const .)
    FUNC            reduce using rule 52 (string_expression -> string_const .)
    CALL            reduce using rule 52 (string_expression -> string_const .)
    NAME            reduce using rule 52 (string_expression -> string_const .)
    PARAM           reduce using rule 52 (string_expression -> string_const .)
    RSQBRACKET      reduce using rule 52 (string_expression -> string_const .)


state 98

    (53) string_expression -> variant .

    COMMA           reduce using rule 53 (string_expression -> variant .)
    PLUS            reduce using rule 53 (string_expression -> variant .)
    NEWLINE         reduce using rule 53 (string_expression -> variant .)
    error           reduce using rule 53 (string_expression -> variant .)
    VARIANT         reduce using rule 53 (string_expression -> variant .)
    CONVERT         reduce using rule 53 (string_expression -> variant .)
    DIGITIZE        reduce using rule 53 (string_expression -> variant .)
    WHILE           reduce using rule 53 (string_expression -> variant .)
    UNTIL           reduce using rule 53 (string_expression -> variant .)
    IFLESS          reduce using rule 53 (string_expression -> variant .)
    IFNLESS         reduce using rule 53 (string_expression -> variant .)
    IFZERO          reduce using rule 53 (string_expression -> variant .)
    IFNZERO         reduce using rule 53 (string_expression -> variant .)
    IFHIGH          reduce using rule 53 (string_expression -> variant .)
    IFNHIGH         reduce using rule 53 (string_expression -> variant .)
    IFEQUAL         reduce using rule 53 (string_expression -> variant .)
    COMMAND         reduce using rule 53 (string_expression -> variant .)
    FUNC            reduce using rule 53 (string_expression -> variant .)
    CALL            reduce using rule 53 (string_expression -> variant .)
    NAME            reduce using rule 53 (string_expression -> variant .)
    PARAM           reduce using rule 53 (string_expression -> variant .)
    RSQBRACKET      reduce using rule 53 (string_expression -> variant .)


state 99

    (54) string_expression -> function_call .

    COMMA           reduce using rule 54 (string_expression -> function_call .)
    PLUS            reduce using rule 54 (string_expression -> function_call .)
    NEWLINE         reduce using rule 54 (string_expression -> function_call .)
    error           reduce using rule 54 (string_expression -> function_call .)
    VARIANT         reduce using rule 54 (string_expression -> function_call .)
    CONVERT         reduce using rule 54 (string_expression -> function_call .)
    DIGITIZE        reduce using rule 54 (string_expression -> function_call .)
    WHILE           reduce using rule 54 (string_expression -> function_call .)
    UNTIL           reduce using rule 54 (string_expression -> function_call .)
    IFLESS          reduce using rule 54 (string_expression -> function_call .)
    IFNLESS         reduce using rule 54 (string_expression -> function_call .)
    IFZERO          reduce using rule 54 (string_expression -> function_call .)
    IFNZERO         reduce using rule 54 (string_expression -> function_call .)
    IFHIGH          reduce using rule 54 (string_expression -> function_call .)
    IFNHIGH         reduce using rule 54 (string_expression -> function_call .)
    IFEQUAL         reduce using rule 54 (string_expression -> function_call .)
    COMMAND         reduce using rule 54 (string_expression -> function_call .)
    FUNC            reduce using rule 54 (string_expression -> function_call .)
    CALL            reduce using rule 54 (string_expression -> function_call .)
    NAME            reduce using rule 54 (string_expression -> function_call .)
    PARAM           reduce using rule 54 (string_expression -> function_call .)
    RSQBRACKET      reduce using rule 54 (string_expression -> function_call .)


state 100

    (64) string_math_expression -> MINUS . string_expression
    (51) string_expression -> . string_math_expression
    (52) string_expression -> . string_const
    (53) string_expression -> . variant
    (54) string_expression -> . function_call
    (63) string_math_expression -> . string_expression PLUS string_expression
    (64) string_math_expression -> . MINUS string_expression
    (71) string_const -> . LETTERS
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    MINUS           shift and go to state 100
    LETTERS         shift and go to state 101
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    string_expression              shift and go to state 153
    string_math_expression         shift and go to state 96
    string_const                   shift and go to state 97
    variant                        shift and go to state 98
    function_call                  shift and go to state 99

state 101

    (71) string_const -> LETTERS .

    COMMA           reduce using rule 71 (string_const -> LETTERS .)
    PLUS            reduce using rule 71 (string_const -> LETTERS .)
    NEWLINE         reduce using rule 71 (string_const -> LETTERS .)
    error           reduce using rule 71 (string_const -> LETTERS .)
    VARIANT         reduce using rule 71 (string_const -> LETTERS .)
    CONVERT         reduce using rule 71 (string_const -> LETTERS .)
    DIGITIZE        reduce using rule 71 (string_const -> LETTERS .)
    WHILE           reduce using rule 71 (string_const -> LETTERS .)
    UNTIL           reduce using rule 71 (string_const -> LETTERS .)
    IFLESS          reduce using rule 71 (string_const -> LETTERS .)
    IFNLESS         reduce using rule 71 (string_const -> LETTERS .)
    IFZERO          reduce using rule 71 (string_const -> LETTERS .)
    IFNZERO         reduce using rule 71 (string_const -> LETTERS .)
    IFHIGH          reduce using rule 71 (string_const -> LETTERS .)
    IFNHIGH         reduce using rule 71 (string_const -> LETTERS .)
    IFEQUAL         reduce using rule 71 (string_const -> LETTERS .)
    COMMAND         reduce using rule 71 (string_const -> LETTERS .)
    FUNC            reduce using rule 71 (string_const -> LETTERS .)
    CALL            reduce using rule 71 (string_const -> LETTERS .)
    NAME            reduce using rule 71 (string_const -> LETTERS .)
    PARAM           reduce using rule 71 (string_const -> LETTERS .)
    RSQBRACKET      reduce using rule 71 (string_const -> LETTERS .)
    SEMICOLON       reduce using rule 71 (string_const -> LETTERS .)


state 102

    (87) command -> COMMAND string_expression .
    (63) string_math_expression -> string_expression . PLUS string_expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 87 (command -> COMMAND string_expression .)
    error           reduce using rule 87 (command -> COMMAND string_expression .)
    VARIANT         reduce using rule 87 (command -> COMMAND string_expression .)
    CONVERT         reduce using rule 87 (command -> COMMAND string_expression .)
    DIGITIZE        reduce using rule 87 (command -> COMMAND string_expression .)
    WHILE           reduce using rule 87 (command -> COMMAND string_expression .)
    UNTIL           reduce using rule 87 (command -> COMMAND string_expression .)
    IFLESS          reduce using rule 87 (command -> COMMAND string_expression .)
    IFNLESS         reduce using rule 87 (command -> COMMAND string_expression .)
    IFZERO          reduce using rule 87 (command -> COMMAND string_expression .)
    IFNZERO         reduce using rule 87 (command -> COMMAND string_expression .)
    IFHIGH          reduce using rule 87 (command -> COMMAND string_expression .)
    IFNHIGH         reduce using rule 87 (command -> COMMAND string_expression .)
    IFEQUAL         reduce using rule 87 (command -> COMMAND string_expression .)
    COMMAND         reduce using rule 87 (command -> COMMAND string_expression .)
    FUNC            reduce using rule 87 (command -> COMMAND string_expression .)
    CALL            reduce using rule 87 (command -> COMMAND string_expression .)
    NAME            reduce using rule 87 (command -> COMMAND string_expression .)
    PARAM           reduce using rule 87 (command -> COMMAND string_expression .)
    COMMA           reduce using rule 87 (command -> COMMAND string_expression .)
    RSQBRACKET      reduce using rule 87 (command -> COMMAND string_expression .)
    PLUS            shift and go to state 151

  ! PLUS            [ reduce using rule 87 (command -> COMMAND string_expression .) ]


state 103

    (122) command -> COMMAND error .

    NEWLINE         reduce using rule 122 (command -> COMMAND error .)
    error           reduce using rule 122 (command -> COMMAND error .)
    PLUS            reduce using rule 122 (command -> COMMAND error .)
    VARIANT         reduce using rule 122 (command -> COMMAND error .)
    CONVERT         reduce using rule 122 (command -> COMMAND error .)
    DIGITIZE        reduce using rule 122 (command -> COMMAND error .)
    WHILE           reduce using rule 122 (command -> COMMAND error .)
    UNTIL           reduce using rule 122 (command -> COMMAND error .)
    IFLESS          reduce using rule 122 (command -> COMMAND error .)
    IFNLESS         reduce using rule 122 (command -> COMMAND error .)
    IFZERO          reduce using rule 122 (command -> COMMAND error .)
    IFNZERO         reduce using rule 122 (command -> COMMAND error .)
    IFHIGH          reduce using rule 122 (command -> COMMAND error .)
    IFNHIGH         reduce using rule 122 (command -> COMMAND error .)
    IFEQUAL         reduce using rule 122 (command -> COMMAND error .)
    COMMAND         reduce using rule 122 (command -> COMMAND error .)
    FUNC            reduce using rule 122 (command -> COMMAND error .)
    CALL            reduce using rule 122 (command -> COMMAND error .)
    NAME            reduce using rule 122 (command -> COMMAND error .)
    PARAM           reduce using rule 122 (command -> COMMAND error .)
    COMMA           reduce using rule 122 (command -> COMMAND error .)
    RSQBRACKET      reduce using rule 122 (command -> COMMAND error .)


state 104

    (101) function -> FUNC NAME . NEWLINE func_body_statements ENDFUNC
    (155) function -> FUNC NAME . NEWLINE func_body_statements error

    NEWLINE         shift and go to state 154


state 105

    (154) function -> FUNC error . NEWLINE func_body_statements ENDFUNC
    (156) function -> FUNC error . NEWLINE func_body_statements error

    NEWLINE         shift and go to state 155


state 106

    (19) variant -> NAME varsize .
    (112) varsize -> varsize . error

  ! shift/reduce conflict for error resolved as shift
    ASSIGNMENT      reduce using rule 19 (variant -> NAME varsize .)
    NEWLINE         reduce using rule 19 (variant -> NAME varsize .)
    PLUS            reduce using rule 19 (variant -> NAME varsize .)
    VARIANT         reduce using rule 19 (variant -> NAME varsize .)
    CONVERT         reduce using rule 19 (variant -> NAME varsize .)
    DIGITIZE        reduce using rule 19 (variant -> NAME varsize .)
    WHILE           reduce using rule 19 (variant -> NAME varsize .)
    UNTIL           reduce using rule 19 (variant -> NAME varsize .)
    IFLESS          reduce using rule 19 (variant -> NAME varsize .)
    IFNLESS         reduce using rule 19 (variant -> NAME varsize .)
    IFZERO          reduce using rule 19 (variant -> NAME varsize .)
    IFNZERO         reduce using rule 19 (variant -> NAME varsize .)
    IFHIGH          reduce using rule 19 (variant -> NAME varsize .)
    IFNHIGH         reduce using rule 19 (variant -> NAME varsize .)
    IFEQUAL         reduce using rule 19 (variant -> NAME varsize .)
    COMMAND         reduce using rule 19 (variant -> NAME varsize .)
    FUNC            reduce using rule 19 (variant -> NAME varsize .)
    CALL            reduce using rule 19 (variant -> NAME varsize .)
    NAME            reduce using rule 19 (variant -> NAME varsize .)
    PARAM           reduce using rule 19 (variant -> NAME varsize .)
    COMMA           reduce using rule 19 (variant -> NAME varsize .)
    RSQBRACKET      reduce using rule 19 (variant -> NAME varsize .)
    error           shift and go to state 156

  ! error           [ reduce using rule 19 (variant -> NAME varsize .) ]


state 107

    (22) varsize -> LSQBRACKET . decimal_expression RSQBRACKET
    (23) varsize -> LSQBRACKET . decimal_expression COMMA decimal_expression RSQBRACKET
    (24) varsize -> LSQBRACKET . RSQBRACKET
    (108) varsize -> LSQBRACKET . error RSQBRACKET
    (109) varsize -> LSQBRACKET . error COMMA decimal_expression RSQBRACKET
    (110) varsize -> LSQBRACKET . decimal_expression COMMA error RSQBRACKET
    (111) varsize -> LSQBRACKET . error COMMA error RSQBRACKET
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (46) decimal_expression -> . function_call
    (59) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (60) dec_math_expression -> . MINUS decimal_expression
    (68) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    RSQBRACKET      shift and go to state 158
    error           shift and go to state 159
    MINUS           shift and go to state 82
    DECIMAL         shift and go to state 83
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    decimal_expression             shift and go to state 157
    dec_math_expression            shift and go to state 78
    decimal_const                  shift and go to state 79
    variant                        shift and go to state 80
    function_call                  shift and go to state 81

state 108

    (102) function_call -> CALL NAME . expression
    (103) function_call -> CALL NAME .
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variant
    (41) expression -> . function_call
    (42) expression -> . command
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . MINUS expression
    (65) const -> . bool_const
    (66) const -> . decimal_const
    (67) const -> . string_const
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (69) bool_const -> . TRUE
    (70) bool_const -> . FALSE
    (68) decimal_const -> . DECIMAL
    (71) string_const -> . LETTERS

  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for PARAM resolved as shift
  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for COMMAND resolved as shift
    NEWLINE         reduce using rule 103 (function_call -> CALL NAME .)
    PLUS            reduce using rule 103 (function_call -> CALL NAME .)
    VARIANT         reduce using rule 103 (function_call -> CALL NAME .)
    error           reduce using rule 103 (function_call -> CALL NAME .)
    CONVERT         reduce using rule 103 (function_call -> CALL NAME .)
    DIGITIZE        reduce using rule 103 (function_call -> CALL NAME .)
    WHILE           reduce using rule 103 (function_call -> CALL NAME .)
    UNTIL           reduce using rule 103 (function_call -> CALL NAME .)
    IFLESS          reduce using rule 103 (function_call -> CALL NAME .)
    IFNLESS         reduce using rule 103 (function_call -> CALL NAME .)
    IFZERO          reduce using rule 103 (function_call -> CALL NAME .)
    IFNZERO         reduce using rule 103 (function_call -> CALL NAME .)
    IFHIGH          reduce using rule 103 (function_call -> CALL NAME .)
    IFNHIGH         reduce using rule 103 (function_call -> CALL NAME .)
    IFEQUAL         reduce using rule 103 (function_call -> CALL NAME .)
    FUNC            reduce using rule 103 (function_call -> CALL NAME .)
    COMMA           reduce using rule 103 (function_call -> CALL NAME .)
    RSQBRACKET      reduce using rule 103 (function_call -> CALL NAME .)
    MINUS           shift and go to state 118
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32
    COMMAND         shift and go to state 29
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    DECIMAL         shift and go to state 83
    LETTERS         shift and go to state 101

  ! COMMAND         [ reduce using rule 103 (function_call -> CALL NAME .) ]
  ! CALL            [ reduce using rule 103 (function_call -> CALL NAME .) ]
  ! NAME            [ reduce using rule 103 (function_call -> CALL NAME .) ]
  ! PARAM           [ reduce using rule 103 (function_call -> CALL NAME .) ]

    expression                     shift and go to state 160
    math_expression                shift and go to state 114
    const                          shift and go to state 115
    variant                        shift and go to state 111
    function_call                  shift and go to state 116
    command                        shift and go to state 117
    bool_const                     shift and go to state 119
    decimal_const                  shift and go to state 120
    string_const                   shift and go to state 121

state 109

    (21) variant -> PARAM varsize .
    (112) varsize -> varsize . error

  ! shift/reduce conflict for error resolved as shift
    ASSIGNMENT      reduce using rule 21 (variant -> PARAM varsize .)
    NEWLINE         reduce using rule 21 (variant -> PARAM varsize .)
    PLUS            reduce using rule 21 (variant -> PARAM varsize .)
    VARIANT         reduce using rule 21 (variant -> PARAM varsize .)
    CONVERT         reduce using rule 21 (variant -> PARAM varsize .)
    DIGITIZE        reduce using rule 21 (variant -> PARAM varsize .)
    WHILE           reduce using rule 21 (variant -> PARAM varsize .)
    UNTIL           reduce using rule 21 (variant -> PARAM varsize .)
    IFLESS          reduce using rule 21 (variant -> PARAM varsize .)
    IFNLESS         reduce using rule 21 (variant -> PARAM varsize .)
    IFZERO          reduce using rule 21 (variant -> PARAM varsize .)
    IFNZERO         reduce using rule 21 (variant -> PARAM varsize .)
    IFHIGH          reduce using rule 21 (variant -> PARAM varsize .)
    IFNHIGH         reduce using rule 21 (variant -> PARAM varsize .)
    IFEQUAL         reduce using rule 21 (variant -> PARAM varsize .)
    COMMAND         reduce using rule 21 (variant -> PARAM varsize .)
    FUNC            reduce using rule 21 (variant -> PARAM varsize .)
    CALL            reduce using rule 21 (variant -> PARAM varsize .)
    NAME            reduce using rule 21 (variant -> PARAM varsize .)
    PARAM           reduce using rule 21 (variant -> PARAM varsize .)
    COMMA           reduce using rule 21 (variant -> PARAM varsize .)
    RSQBRACKET      reduce using rule 21 (variant -> PARAM varsize .)
    error           shift and go to state 156

  ! error           [ reduce using rule 21 (variant -> PARAM varsize .) ]


state 110

    (17) declaration -> VARIANT variant ASSIGNMENT . initialization
    (106) declaration -> VARIANT variant ASSIGNMENT . error
    (25) initialization -> . LBRACE init_lists RBRACE

    error           shift and go to state 162
    LBRACE          shift and go to state 163

    initialization                 shift and go to state 161

state 111

    (40) expression -> variant .

    PLUS            reduce using rule 40 (expression -> variant .)
    NEWLINE         reduce using rule 40 (expression -> variant .)
    error           reduce using rule 40 (expression -> variant .)
    VARIANT         reduce using rule 40 (expression -> variant .)
    CONVERT         reduce using rule 40 (expression -> variant .)
    DIGITIZE        reduce using rule 40 (expression -> variant .)
    WHILE           reduce using rule 40 (expression -> variant .)
    UNTIL           reduce using rule 40 (expression -> variant .)
    IFLESS          reduce using rule 40 (expression -> variant .)
    IFNLESS         reduce using rule 40 (expression -> variant .)
    IFZERO          reduce using rule 40 (expression -> variant .)
    IFNZERO         reduce using rule 40 (expression -> variant .)
    IFHIGH          reduce using rule 40 (expression -> variant .)
    IFNHIGH         reduce using rule 40 (expression -> variant .)
    IFEQUAL         reduce using rule 40 (expression -> variant .)
    COMMAND         reduce using rule 40 (expression -> variant .)
    FUNC            reduce using rule 40 (expression -> variant .)
    CALL            reduce using rule 40 (expression -> variant .)
    NAME            reduce using rule 40 (expression -> variant .)
    PARAM           reduce using rule 40 (expression -> variant .)
    COMMA           reduce using rule 40 (expression -> variant .)
    RSQBRACKET      reduce using rule 40 (expression -> variant .)


state 112

    (72) assignment -> variant ASSIGNMENT expression .
    (55) math_expression -> expression . PLUS expression

    NEWLINE         reduce using rule 72 (assignment -> variant ASSIGNMENT expression .)
    PLUS            shift and go to state 164


state 113

    (113) assignment -> variant ASSIGNMENT error .

    NEWLINE         reduce using rule 113 (assignment -> variant ASSIGNMENT error .)


state 114

    (38) expression -> math_expression .

    PLUS            reduce using rule 38 (expression -> math_expression .)
    NEWLINE         reduce using rule 38 (expression -> math_expression .)
    error           reduce using rule 38 (expression -> math_expression .)
    VARIANT         reduce using rule 38 (expression -> math_expression .)
    CONVERT         reduce using rule 38 (expression -> math_expression .)
    DIGITIZE        reduce using rule 38 (expression -> math_expression .)
    WHILE           reduce using rule 38 (expression -> math_expression .)
    UNTIL           reduce using rule 38 (expression -> math_expression .)
    IFLESS          reduce using rule 38 (expression -> math_expression .)
    IFNLESS         reduce using rule 38 (expression -> math_expression .)
    IFZERO          reduce using rule 38 (expression -> math_expression .)
    IFNZERO         reduce using rule 38 (expression -> math_expression .)
    IFHIGH          reduce using rule 38 (expression -> math_expression .)
    IFNHIGH         reduce using rule 38 (expression -> math_expression .)
    IFEQUAL         reduce using rule 38 (expression -> math_expression .)
    COMMAND         reduce using rule 38 (expression -> math_expression .)
    FUNC            reduce using rule 38 (expression -> math_expression .)
    CALL            reduce using rule 38 (expression -> math_expression .)
    NAME            reduce using rule 38 (expression -> math_expression .)
    PARAM           reduce using rule 38 (expression -> math_expression .)
    COMMA           reduce using rule 38 (expression -> math_expression .)
    RSQBRACKET      reduce using rule 38 (expression -> math_expression .)


state 115

    (39) expression -> const .

    PLUS            reduce using rule 39 (expression -> const .)
    NEWLINE         reduce using rule 39 (expression -> const .)
    error           reduce using rule 39 (expression -> const .)
    VARIANT         reduce using rule 39 (expression -> const .)
    CONVERT         reduce using rule 39 (expression -> const .)
    DIGITIZE        reduce using rule 39 (expression -> const .)
    WHILE           reduce using rule 39 (expression -> const .)
    UNTIL           reduce using rule 39 (expression -> const .)
    IFLESS          reduce using rule 39 (expression -> const .)
    IFNLESS         reduce using rule 39 (expression -> const .)
    IFZERO          reduce using rule 39 (expression -> const .)
    IFNZERO         reduce using rule 39 (expression -> const .)
    IFHIGH          reduce using rule 39 (expression -> const .)
    IFNHIGH         reduce using rule 39 (expression -> const .)
    IFEQUAL         reduce using rule 39 (expression -> const .)
    COMMAND         reduce using rule 39 (expression -> const .)
    FUNC            reduce using rule 39 (expression -> const .)
    CALL            reduce using rule 39 (expression -> const .)
    NAME            reduce using rule 39 (expression -> const .)
    PARAM           reduce using rule 39 (expression -> const .)
    COMMA           reduce using rule 39 (expression -> const .)
    RSQBRACKET      reduce using rule 39 (expression -> const .)


state 116

    (41) expression -> function_call .

    PLUS            reduce using rule 41 (expression -> function_call .)
    NEWLINE         reduce using rule 41 (expression -> function_call .)
    error           reduce using rule 41 (expression -> function_call .)
    VARIANT         reduce using rule 41 (expression -> function_call .)
    CONVERT         reduce using rule 41 (expression -> function_call .)
    DIGITIZE        reduce using rule 41 (expression -> function_call .)
    WHILE           reduce using rule 41 (expression -> function_call .)
    UNTIL           reduce using rule 41 (expression -> function_call .)
    IFLESS          reduce using rule 41 (expression -> function_call .)
    IFNLESS         reduce using rule 41 (expression -> function_call .)
    IFZERO          reduce using rule 41 (expression -> function_call .)
    IFNZERO         reduce using rule 41 (expression -> function_call .)
    IFHIGH          reduce using rule 41 (expression -> function_call .)
    IFNHIGH         reduce using rule 41 (expression -> function_call .)
    IFEQUAL         reduce using rule 41 (expression -> function_call .)
    COMMAND         reduce using rule 41 (expression -> function_call .)
    FUNC            reduce using rule 41 (expression -> function_call .)
    CALL            reduce using rule 41 (expression -> function_call .)
    NAME            reduce using rule 41 (expression -> function_call .)
    PARAM           reduce using rule 41 (expression -> function_call .)
    COMMA           reduce using rule 41 (expression -> function_call .)
    RSQBRACKET      reduce using rule 41 (expression -> function_call .)


state 117

    (42) expression -> command .
    (123) command -> command . error

  ! shift/reduce conflict for error resolved as shift
    PLUS            reduce using rule 42 (expression -> command .)
    NEWLINE         reduce using rule 42 (expression -> command .)
    VARIANT         reduce using rule 42 (expression -> command .)
    CONVERT         reduce using rule 42 (expression -> command .)
    DIGITIZE        reduce using rule 42 (expression -> command .)
    WHILE           reduce using rule 42 (expression -> command .)
    UNTIL           reduce using rule 42 (expression -> command .)
    IFLESS          reduce using rule 42 (expression -> command .)
    IFNLESS         reduce using rule 42 (expression -> command .)
    IFZERO          reduce using rule 42 (expression -> command .)
    IFNZERO         reduce using rule 42 (expression -> command .)
    IFHIGH          reduce using rule 42 (expression -> command .)
    IFNHIGH         reduce using rule 42 (expression -> command .)
    IFEQUAL         reduce using rule 42 (expression -> command .)
    COMMAND         reduce using rule 42 (expression -> command .)
    FUNC            reduce using rule 42 (expression -> command .)
    CALL            reduce using rule 42 (expression -> command .)
    NAME            reduce using rule 42 (expression -> command .)
    PARAM           reduce using rule 42 (expression -> command .)
    COMMA           reduce using rule 42 (expression -> command .)
    RSQBRACKET      reduce using rule 42 (expression -> command .)
    error           shift and go to state 50

  ! error           [ reduce using rule 42 (expression -> command .) ]


state 118

    (56) math_expression -> MINUS . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variant
    (41) expression -> . function_call
    (42) expression -> . command
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . MINUS expression
    (65) const -> . bool_const
    (66) const -> . decimal_const
    (67) const -> . string_const
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (69) bool_const -> . TRUE
    (70) bool_const -> . FALSE
    (68) decimal_const -> . DECIMAL
    (71) string_const -> . LETTERS

    MINUS           shift and go to state 118
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32
    COMMAND         shift and go to state 29
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    DECIMAL         shift and go to state 83
    LETTERS         shift and go to state 101

    expression                     shift and go to state 165
    math_expression                shift and go to state 114
    const                          shift and go to state 115
    variant                        shift and go to state 111
    function_call                  shift and go to state 116
    command                        shift and go to state 117
    bool_const                     shift and go to state 119
    decimal_const                  shift and go to state 120
    string_const                   shift and go to state 121

state 119

    (65) const -> bool_const .

    PLUS            reduce using rule 65 (const -> bool_const .)
    NEWLINE         reduce using rule 65 (const -> bool_const .)
    error           reduce using rule 65 (const -> bool_const .)
    VARIANT         reduce using rule 65 (const -> bool_const .)
    CONVERT         reduce using rule 65 (const -> bool_const .)
    DIGITIZE        reduce using rule 65 (const -> bool_const .)
    WHILE           reduce using rule 65 (const -> bool_const .)
    UNTIL           reduce using rule 65 (const -> bool_const .)
    IFLESS          reduce using rule 65 (const -> bool_const .)
    IFNLESS         reduce using rule 65 (const -> bool_const .)
    IFZERO          reduce using rule 65 (const -> bool_const .)
    IFNZERO         reduce using rule 65 (const -> bool_const .)
    IFHIGH          reduce using rule 65 (const -> bool_const .)
    IFNHIGH         reduce using rule 65 (const -> bool_const .)
    IFEQUAL         reduce using rule 65 (const -> bool_const .)
    COMMAND         reduce using rule 65 (const -> bool_const .)
    FUNC            reduce using rule 65 (const -> bool_const .)
    CALL            reduce using rule 65 (const -> bool_const .)
    NAME            reduce using rule 65 (const -> bool_const .)
    PARAM           reduce using rule 65 (const -> bool_const .)
    COMMA           reduce using rule 65 (const -> bool_const .)
    RSQBRACKET      reduce using rule 65 (const -> bool_const .)
    SEMICOLON       reduce using rule 65 (const -> bool_const .)


state 120

    (66) const -> decimal_const .

    PLUS            reduce using rule 66 (const -> decimal_const .)
    NEWLINE         reduce using rule 66 (const -> decimal_const .)
    error           reduce using rule 66 (const -> decimal_const .)
    VARIANT         reduce using rule 66 (const -> decimal_const .)
    CONVERT         reduce using rule 66 (const -> decimal_const .)
    DIGITIZE        reduce using rule 66 (const -> decimal_const .)
    WHILE           reduce using rule 66 (const -> decimal_const .)
    UNTIL           reduce using rule 66 (const -> decimal_const .)
    IFLESS          reduce using rule 66 (const -> decimal_const .)
    IFNLESS         reduce using rule 66 (const -> decimal_const .)
    IFZERO          reduce using rule 66 (const -> decimal_const .)
    IFNZERO         reduce using rule 66 (const -> decimal_const .)
    IFHIGH          reduce using rule 66 (const -> decimal_const .)
    IFNHIGH         reduce using rule 66 (const -> decimal_const .)
    IFEQUAL         reduce using rule 66 (const -> decimal_const .)
    COMMAND         reduce using rule 66 (const -> decimal_const .)
    FUNC            reduce using rule 66 (const -> decimal_const .)
    CALL            reduce using rule 66 (const -> decimal_const .)
    NAME            reduce using rule 66 (const -> decimal_const .)
    PARAM           reduce using rule 66 (const -> decimal_const .)
    COMMA           reduce using rule 66 (const -> decimal_const .)
    RSQBRACKET      reduce using rule 66 (const -> decimal_const .)
    SEMICOLON       reduce using rule 66 (const -> decimal_const .)


state 121

    (67) const -> string_const .

    PLUS            reduce using rule 67 (const -> string_const .)
    NEWLINE         reduce using rule 67 (const -> string_const .)
    error           reduce using rule 67 (const -> string_const .)
    VARIANT         reduce using rule 67 (const -> string_const .)
    CONVERT         reduce using rule 67 (const -> string_const .)
    DIGITIZE        reduce using rule 67 (const -> string_const .)
    WHILE           reduce using rule 67 (const -> string_const .)
    UNTIL           reduce using rule 67 (const -> string_const .)
    IFLESS          reduce using rule 67 (const -> string_const .)
    IFNLESS         reduce using rule 67 (const -> string_const .)
    IFZERO          reduce using rule 67 (const -> string_const .)
    IFNZERO         reduce using rule 67 (const -> string_const .)
    IFHIGH          reduce using rule 67 (const -> string_const .)
    IFNHIGH         reduce using rule 67 (const -> string_const .)
    IFEQUAL         reduce using rule 67 (const -> string_const .)
    COMMAND         reduce using rule 67 (const -> string_const .)
    FUNC            reduce using rule 67 (const -> string_const .)
    CALL            reduce using rule 67 (const -> string_const .)
    NAME            reduce using rule 67 (const -> string_const .)
    PARAM           reduce using rule 67 (const -> string_const .)
    COMMA           reduce using rule 67 (const -> string_const .)
    RSQBRACKET      reduce using rule 67 (const -> string_const .)
    SEMICOLON       reduce using rule 67 (const -> string_const .)


state 122

    (114) assignment -> error ASSIGNMENT expression .
    (55) math_expression -> expression . PLUS expression

    NEWLINE         reduce using rule 114 (assignment -> error ASSIGNMENT expression .)
    PLUS            shift and go to state 164


state 123

    (73) convert -> CONVERT type TO . type variant
    (115) convert -> CONVERT type TO . type error
    (116) convert -> CONVERT type TO . error
    (75) type -> . BOOL
    (76) type -> . DIGIT
    (77) type -> . STRING

    error           shift and go to state 167
    BOOL            shift and go to state 60
    DIGIT           shift and go to state 61
    STRING          shift and go to state 62

    type                           shift and go to state 166

state 124

    (117) convert -> CONVERT type error .

    NEWLINE         reduce using rule 117 (convert -> CONVERT type error .)
    error           reduce using rule 117 (convert -> CONVERT type error .)


state 125

    (74) digitize -> DIGITIZE type variant .

    NEWLINE         reduce using rule 74 (digitize -> DIGITIZE type variant .)
    error           reduce using rule 74 (digitize -> DIGITIZE type variant .)


state 126

    (78) while -> WHILE bool_expression NEWLINE . statements ENDW
    (125) while -> WHILE bool_expression NEWLINE . statements error
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statements                     shift and go to state 168
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 127

    (126) while -> WHILE bool_expression statements . ENDW
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDW            shift and go to state 169
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 128

    (61) bool_math_expression -> bool_expression PLUS . bool_expression
    (47) bool_expression -> . bool_math_expression
    (48) bool_expression -> . bool_const
    (49) bool_expression -> . variant
    (50) bool_expression -> . function_call
    (61) bool_math_expression -> . bool_expression PLUS bool_expression
    (62) bool_math_expression -> . MINUS bool_expression
    (69) bool_const -> . TRUE
    (70) bool_const -> . FALSE
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    MINUS           shift and go to state 71
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    bool_expression                shift and go to state 170
    bool_math_expression           shift and go to state 67
    bool_const                     shift and go to state 68
    variant                        shift and go to state 69
    function_call                  shift and go to state 70

state 129

    (124) while -> WHILE error NEWLINE . statements ENDW
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statements                     shift and go to state 171
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 130

    (62) bool_math_expression -> MINUS bool_expression .
    (61) bool_math_expression -> bool_expression . PLUS bool_expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 62 (bool_math_expression -> MINUS bool_expression .)
    VARIANT         reduce using rule 62 (bool_math_expression -> MINUS bool_expression .)
    error           reduce using rule 62 (bool_math_expression -> MINUS bool_expression .)
    CONVERT         reduce using rule 62 (bool_math_expression -> MINUS bool_expression .)
    DIGITIZE        reduce using rule 62 (bool_math_expression -> MINUS bool_expression .)
    WHILE           reduce using rule 62 (bool_math_expression -> MINUS bool_expression .)
    UNTIL           reduce using rule 62 (bool_math_expression -> MINUS bool_expression .)
    IFLESS          reduce using rule 62 (bool_math_expression -> MINUS bool_expression .)
    IFNLESS         reduce using rule 62 (bool_math_expression -> MINUS bool_expression .)
    IFZERO          reduce using rule 62 (bool_math_expression -> MINUS bool_expression .)
    IFNZERO         reduce using rule 62 (bool_math_expression -> MINUS bool_expression .)
    IFHIGH          reduce using rule 62 (bool_math_expression -> MINUS bool_expression .)
    IFNHIGH         reduce using rule 62 (bool_math_expression -> MINUS bool_expression .)
    IFEQUAL         reduce using rule 62 (bool_math_expression -> MINUS bool_expression .)
    COMMAND         reduce using rule 62 (bool_math_expression -> MINUS bool_expression .)
    FUNC            reduce using rule 62 (bool_math_expression -> MINUS bool_expression .)
    CALL            reduce using rule 62 (bool_math_expression -> MINUS bool_expression .)
    NAME            reduce using rule 62 (bool_math_expression -> MINUS bool_expression .)
    PARAM           reduce using rule 62 (bool_math_expression -> MINUS bool_expression .)
    PLUS            shift and go to state 128

  ! PLUS            [ reduce using rule 62 (bool_math_expression -> MINUS bool_expression .) ]


state 131

    (79) until -> UNTIL bool_expression NEWLINE . statements ENDU
    (129) until -> UNTIL bool_expression NEWLINE . statements error
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statements                     shift and go to state 172
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 132

    (130) until -> UNTIL bool_expression statements . ENDU
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDU            shift and go to state 173
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 133

    (128) until -> UNTIL error NEWLINE . statements ENDU
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statements                     shift and go to state 174
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 134

    (80) if -> IFLESS decimal_expression COMMA . decimal_expression NEWLINE statements ENDIF
    (139) if -> IFLESS decimal_expression COMMA . decimal_expression NEWLINE statements error
    (146) if -> IFLESS decimal_expression COMMA . decimal_expression statements ENDIF
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (46) decimal_expression -> . function_call
    (59) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (60) dec_math_expression -> . MINUS decimal_expression
    (68) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    MINUS           shift and go to state 82
    DECIMAL         shift and go to state 83
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    decimal_expression             shift and go to state 175
    dec_math_expression            shift and go to state 78
    decimal_const                  shift and go to state 79
    variant                        shift and go to state 80
    function_call                  shift and go to state 81

state 135

    (59) dec_math_expression -> decimal_expression PLUS . decimal_expression
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (46) decimal_expression -> . function_call
    (59) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (60) dec_math_expression -> . MINUS decimal_expression
    (68) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    MINUS           shift and go to state 82
    DECIMAL         shift and go to state 83
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    decimal_expression             shift and go to state 176
    dec_math_expression            shift and go to state 78
    decimal_const                  shift and go to state 79
    variant                        shift and go to state 80
    function_call                  shift and go to state 81

state 136

    (132) if -> IFLESS error NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statements                     shift and go to state 177
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 137

    (60) dec_math_expression -> MINUS decimal_expression .
    (59) dec_math_expression -> decimal_expression . PLUS decimal_expression

  ! shift/reduce conflict for PLUS resolved as shift
    COMMA           reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .)
    NEWLINE         reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .)
    VARIANT         reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .)
    error           reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .)
    CONVERT         reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .)
    DIGITIZE        reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .)
    WHILE           reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .)
    UNTIL           reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .)
    IFLESS          reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .)
    IFNLESS         reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .)
    IFZERO          reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .)
    IFNZERO         reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .)
    IFHIGH          reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .)
    IFNHIGH         reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .)
    IFEQUAL         reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .)
    COMMAND         reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .)
    FUNC            reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .)
    CALL            reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .)
    NAME            reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .)
    PARAM           reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .)
    RSQBRACKET      reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .)
    PLUS            shift and go to state 135

  ! PLUS            [ reduce using rule 60 (dec_math_expression -> MINUS decimal_expression .) ]


state 138

    (81) if -> IFNLESS decimal_expression COMMA . decimal_expression NEWLINE statements ENDIF
    (140) if -> IFNLESS decimal_expression COMMA . decimal_expression NEWLINE statements error
    (147) if -> IFNLESS decimal_expression COMMA . decimal_expression statements ENDIF
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (46) decimal_expression -> . function_call
    (59) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (60) dec_math_expression -> . MINUS decimal_expression
    (68) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    MINUS           shift and go to state 82
    DECIMAL         shift and go to state 83
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    decimal_expression             shift and go to state 178
    dec_math_expression            shift and go to state 78
    decimal_const                  shift and go to state 79
    variant                        shift and go to state 80
    function_call                  shift and go to state 81

state 139

    (133) if -> IFNLESS error NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statements                     shift and go to state 179
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 140

    (82) if -> IFZERO decimal_expression NEWLINE . statements ENDIF
    (141) if -> IFZERO decimal_expression NEWLINE . statements error
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statements                     shift and go to state 180
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 141

    (148) if -> IFZERO decimal_expression statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 181
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 142

    (134) if -> IFZERO error NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statements                     shift and go to state 182
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 143

    (83) if -> IFNZERO decimal_expression NEWLINE . statements ENDIF
    (142) if -> IFNZERO decimal_expression NEWLINE . statements error
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statements                     shift and go to state 183
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 144

    (149) if -> IFNZERO decimal_expression statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 184
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 145

    (135) if -> IFNZERO error NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statements                     shift and go to state 185
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 146

    (84) if -> IFHIGH decimal_expression COMMA . decimal_expression NEWLINE statements ENDIF
    (143) if -> IFHIGH decimal_expression COMMA . decimal_expression NEWLINE statements error
    (150) if -> IFHIGH decimal_expression COMMA . decimal_expression statements ENDIF
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (46) decimal_expression -> . function_call
    (59) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (60) dec_math_expression -> . MINUS decimal_expression
    (68) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    MINUS           shift and go to state 82
    DECIMAL         shift and go to state 83
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    decimal_expression             shift and go to state 186
    dec_math_expression            shift and go to state 78
    decimal_const                  shift and go to state 79
    variant                        shift and go to state 80
    function_call                  shift and go to state 81

state 147

    (136) if -> IFHIGH error NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statements                     shift and go to state 187
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 148

    (85) if -> IFNHIGH decimal_expression COMMA . decimal_expression NEWLINE statements ENDIF
    (144) if -> IFNHIGH decimal_expression COMMA . decimal_expression NEWLINE statements error
    (151) if -> IFNHIGH decimal_expression COMMA . decimal_expression statements ENDIF
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (46) decimal_expression -> . function_call
    (59) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (60) dec_math_expression -> . MINUS decimal_expression
    (68) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    MINUS           shift and go to state 82
    DECIMAL         shift and go to state 83
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    decimal_expression             shift and go to state 188
    dec_math_expression            shift and go to state 78
    decimal_const                  shift and go to state 79
    variant                        shift and go to state 80
    function_call                  shift and go to state 81

state 149

    (137) if -> IFNHIGH error NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statements                     shift and go to state 189
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 150

    (86) if -> IFEQUAL string_expression COMMA . string_expression NEWLINE statements ENDIF
    (145) if -> IFEQUAL string_expression COMMA . string_expression NEWLINE statements error
    (152) if -> IFEQUAL string_expression COMMA . string_expression statements ENDIF
    (51) string_expression -> . string_math_expression
    (52) string_expression -> . string_const
    (53) string_expression -> . variant
    (54) string_expression -> . function_call
    (63) string_math_expression -> . string_expression PLUS string_expression
    (64) string_math_expression -> . MINUS string_expression
    (71) string_const -> . LETTERS
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    MINUS           shift and go to state 100
    LETTERS         shift and go to state 101
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    string_expression              shift and go to state 190
    string_math_expression         shift and go to state 96
    string_const                   shift and go to state 97
    variant                        shift and go to state 98
    function_call                  shift and go to state 99

state 151

    (63) string_math_expression -> string_expression PLUS . string_expression
    (51) string_expression -> . string_math_expression
    (52) string_expression -> . string_const
    (53) string_expression -> . variant
    (54) string_expression -> . function_call
    (63) string_math_expression -> . string_expression PLUS string_expression
    (64) string_math_expression -> . MINUS string_expression
    (71) string_const -> . LETTERS
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    MINUS           shift and go to state 100
    LETTERS         shift and go to state 101
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    string_expression              shift and go to state 191
    string_math_expression         shift and go to state 96
    string_const                   shift and go to state 97
    variant                        shift and go to state 98
    function_call                  shift and go to state 99

state 152

    (138) if -> IFEQUAL error NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statements                     shift and go to state 192
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 153

    (64) string_math_expression -> MINUS string_expression .
    (63) string_math_expression -> string_expression . PLUS string_expression

  ! shift/reduce conflict for PLUS resolved as shift
    COMMA           reduce using rule 64 (string_math_expression -> MINUS string_expression .)
    NEWLINE         reduce using rule 64 (string_math_expression -> MINUS string_expression .)
    error           reduce using rule 64 (string_math_expression -> MINUS string_expression .)
    VARIANT         reduce using rule 64 (string_math_expression -> MINUS string_expression .)
    CONVERT         reduce using rule 64 (string_math_expression -> MINUS string_expression .)
    DIGITIZE        reduce using rule 64 (string_math_expression -> MINUS string_expression .)
    WHILE           reduce using rule 64 (string_math_expression -> MINUS string_expression .)
    UNTIL           reduce using rule 64 (string_math_expression -> MINUS string_expression .)
    IFLESS          reduce using rule 64 (string_math_expression -> MINUS string_expression .)
    IFNLESS         reduce using rule 64 (string_math_expression -> MINUS string_expression .)
    IFZERO          reduce using rule 64 (string_math_expression -> MINUS string_expression .)
    IFNZERO         reduce using rule 64 (string_math_expression -> MINUS string_expression .)
    IFHIGH          reduce using rule 64 (string_math_expression -> MINUS string_expression .)
    IFNHIGH         reduce using rule 64 (string_math_expression -> MINUS string_expression .)
    IFEQUAL         reduce using rule 64 (string_math_expression -> MINUS string_expression .)
    COMMAND         reduce using rule 64 (string_math_expression -> MINUS string_expression .)
    FUNC            reduce using rule 64 (string_math_expression -> MINUS string_expression .)
    CALL            reduce using rule 64 (string_math_expression -> MINUS string_expression .)
    NAME            reduce using rule 64 (string_math_expression -> MINUS string_expression .)
    PARAM           reduce using rule 64 (string_math_expression -> MINUS string_expression .)
    RSQBRACKET      reduce using rule 64 (string_math_expression -> MINUS string_expression .)
    PLUS            shift and go to state 151

  ! PLUS            [ reduce using rule 64 (string_math_expression -> MINUS string_expression .) ]


state 154

    (101) function -> FUNC NAME NEWLINE . func_body_statements ENDFUNC
    (155) function -> FUNC NAME NEWLINE . func_body_statements error
    (88) func_body_statements -> . func_body_statements func_body_statement
    (89) func_body_statements -> . func_body_statement
    (90) func_body_statement -> . empty NEWLINE
    (91) func_body_statement -> . declaration NEWLINE
    (92) func_body_statement -> . assignment NEWLINE
    (93) func_body_statement -> . convert NEWLINE
    (94) func_body_statement -> . digitize NEWLINE
    (95) func_body_statement -> . while NEWLINE
    (96) func_body_statement -> . until NEWLINE
    (97) func_body_statement -> . if NEWLINE
    (98) func_body_statement -> . command NEWLINE
    (99) func_body_statement -> . function_call NEWLINE
    (100) func_body_statement -> . return NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (104) return -> . RETURN expression
    (158) return -> . RETURN error
    (159) return -> . return error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    CALL            shift and go to state 32
    RETURN          shift and go to state 206
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    func_body_statements           shift and go to state 193
    func_body_statement            shift and go to state 194
    empty                          shift and go to state 195
    declaration                    shift and go to state 196
    assignment                     shift and go to state 197
    convert                        shift and go to state 198
    digitize                       shift and go to state 199
    while                          shift and go to state 200
    until                          shift and go to state 201
    if                             shift and go to state 202
    command                        shift and go to state 203
    function_call                  shift and go to state 204
    return                         shift and go to state 205
    variant                        shift and go to state 16

state 155

    (154) function -> FUNC error NEWLINE . func_body_statements ENDFUNC
    (156) function -> FUNC error NEWLINE . func_body_statements error
    (88) func_body_statements -> . func_body_statements func_body_statement
    (89) func_body_statements -> . func_body_statement
    (90) func_body_statement -> . empty NEWLINE
    (91) func_body_statement -> . declaration NEWLINE
    (92) func_body_statement -> . assignment NEWLINE
    (93) func_body_statement -> . convert NEWLINE
    (94) func_body_statement -> . digitize NEWLINE
    (95) func_body_statement -> . while NEWLINE
    (96) func_body_statement -> . until NEWLINE
    (97) func_body_statement -> . if NEWLINE
    (98) func_body_statement -> . command NEWLINE
    (99) func_body_statement -> . function_call NEWLINE
    (100) func_body_statement -> . return NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (104) return -> . RETURN expression
    (158) return -> . RETURN error
    (159) return -> . return error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    CALL            shift and go to state 32
    RETURN          shift and go to state 206
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    func_body_statements           shift and go to state 207
    func_body_statement            shift and go to state 194
    empty                          shift and go to state 195
    declaration                    shift and go to state 196
    assignment                     shift and go to state 197
    convert                        shift and go to state 198
    digitize                       shift and go to state 199
    while                          shift and go to state 200
    until                          shift and go to state 201
    if                             shift and go to state 202
    command                        shift and go to state 203
    function_call                  shift and go to state 204
    return                         shift and go to state 205
    variant                        shift and go to state 16

state 156

    (112) varsize -> varsize error .

    error           reduce using rule 112 (varsize -> varsize error .)
    ASSIGNMENT      reduce using rule 112 (varsize -> varsize error .)
    NEWLINE         reduce using rule 112 (varsize -> varsize error .)
    PLUS            reduce using rule 112 (varsize -> varsize error .)
    VARIANT         reduce using rule 112 (varsize -> varsize error .)
    CONVERT         reduce using rule 112 (varsize -> varsize error .)
    DIGITIZE        reduce using rule 112 (varsize -> varsize error .)
    WHILE           reduce using rule 112 (varsize -> varsize error .)
    UNTIL           reduce using rule 112 (varsize -> varsize error .)
    IFLESS          reduce using rule 112 (varsize -> varsize error .)
    IFNLESS         reduce using rule 112 (varsize -> varsize error .)
    IFZERO          reduce using rule 112 (varsize -> varsize error .)
    IFNZERO         reduce using rule 112 (varsize -> varsize error .)
    IFHIGH          reduce using rule 112 (varsize -> varsize error .)
    IFNHIGH         reduce using rule 112 (varsize -> varsize error .)
    IFEQUAL         reduce using rule 112 (varsize -> varsize error .)
    COMMAND         reduce using rule 112 (varsize -> varsize error .)
    FUNC            reduce using rule 112 (varsize -> varsize error .)
    CALL            reduce using rule 112 (varsize -> varsize error .)
    NAME            reduce using rule 112 (varsize -> varsize error .)
    PARAM           reduce using rule 112 (varsize -> varsize error .)
    COMMA           reduce using rule 112 (varsize -> varsize error .)
    RSQBRACKET      reduce using rule 112 (varsize -> varsize error .)


state 157

    (22) varsize -> LSQBRACKET decimal_expression . RSQBRACKET
    (23) varsize -> LSQBRACKET decimal_expression . COMMA decimal_expression RSQBRACKET
    (110) varsize -> LSQBRACKET decimal_expression . COMMA error RSQBRACKET
    (59) dec_math_expression -> decimal_expression . PLUS decimal_expression

    RSQBRACKET      shift and go to state 208
    COMMA           shift and go to state 209
    PLUS            shift and go to state 135


state 158

    (24) varsize -> LSQBRACKET RSQBRACKET .

    error           reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    ASSIGNMENT      reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    NEWLINE         reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    PLUS            reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    VARIANT         reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    CONVERT         reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    DIGITIZE        reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    WHILE           reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    UNTIL           reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    IFLESS          reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    IFNLESS         reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    IFZERO          reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    IFNZERO         reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    IFHIGH          reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    IFNHIGH         reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    IFEQUAL         reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    COMMAND         reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    FUNC            reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    CALL            reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    NAME            reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    PARAM           reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    COMMA           reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)
    RSQBRACKET      reduce using rule 24 (varsize -> LSQBRACKET RSQBRACKET .)


state 159

    (108) varsize -> LSQBRACKET error . RSQBRACKET
    (109) varsize -> LSQBRACKET error . COMMA decimal_expression RSQBRACKET
    (111) varsize -> LSQBRACKET error . COMMA error RSQBRACKET

    RSQBRACKET      shift and go to state 210
    COMMA           shift and go to state 211


state 160

    (102) function_call -> CALL NAME expression .
    (55) math_expression -> expression . PLUS expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 102 (function_call -> CALL NAME expression .)
    VARIANT         reduce using rule 102 (function_call -> CALL NAME expression .)
    error           reduce using rule 102 (function_call -> CALL NAME expression .)
    CONVERT         reduce using rule 102 (function_call -> CALL NAME expression .)
    DIGITIZE        reduce using rule 102 (function_call -> CALL NAME expression .)
    WHILE           reduce using rule 102 (function_call -> CALL NAME expression .)
    UNTIL           reduce using rule 102 (function_call -> CALL NAME expression .)
    IFLESS          reduce using rule 102 (function_call -> CALL NAME expression .)
    IFNLESS         reduce using rule 102 (function_call -> CALL NAME expression .)
    IFZERO          reduce using rule 102 (function_call -> CALL NAME expression .)
    IFNZERO         reduce using rule 102 (function_call -> CALL NAME expression .)
    IFHIGH          reduce using rule 102 (function_call -> CALL NAME expression .)
    IFNHIGH         reduce using rule 102 (function_call -> CALL NAME expression .)
    IFEQUAL         reduce using rule 102 (function_call -> CALL NAME expression .)
    COMMAND         reduce using rule 102 (function_call -> CALL NAME expression .)
    FUNC            reduce using rule 102 (function_call -> CALL NAME expression .)
    CALL            reduce using rule 102 (function_call -> CALL NAME expression .)
    NAME            reduce using rule 102 (function_call -> CALL NAME expression .)
    PARAM           reduce using rule 102 (function_call -> CALL NAME expression .)
    COMMA           reduce using rule 102 (function_call -> CALL NAME expression .)
    RSQBRACKET      reduce using rule 102 (function_call -> CALL NAME expression .)
    PLUS            shift and go to state 164

  ! PLUS            [ reduce using rule 102 (function_call -> CALL NAME expression .) ]


state 161

    (17) declaration -> VARIANT variant ASSIGNMENT initialization .

    NEWLINE         reduce using rule 17 (declaration -> VARIANT variant ASSIGNMENT initialization .)
    error           reduce using rule 17 (declaration -> VARIANT variant ASSIGNMENT initialization .)


state 162

    (106) declaration -> VARIANT variant ASSIGNMENT error .

    NEWLINE         reduce using rule 106 (declaration -> VARIANT variant ASSIGNMENT error .)
    error           reduce using rule 106 (declaration -> VARIANT variant ASSIGNMENT error .)


state 163

    (25) initialization -> LBRACE . init_lists RBRACE
    (26) init_lists -> . init_lists init_list
    (27) init_lists -> . init_list
    (28) init_list -> . LBRACE inits RBRACE
    (29) init_list -> . LBRACE RBRACE

    LBRACE          shift and go to state 212

    init_lists                     shift and go to state 213
    init_list                      shift and go to state 214

state 164

    (55) math_expression -> expression PLUS . expression
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variant
    (41) expression -> . function_call
    (42) expression -> . command
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . MINUS expression
    (65) const -> . bool_const
    (66) const -> . decimal_const
    (67) const -> . string_const
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (69) bool_const -> . TRUE
    (70) bool_const -> . FALSE
    (68) decimal_const -> . DECIMAL
    (71) string_const -> . LETTERS

    MINUS           shift and go to state 118
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32
    COMMAND         shift and go to state 29
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    DECIMAL         shift and go to state 83
    LETTERS         shift and go to state 101

    expression                     shift and go to state 215
    math_expression                shift and go to state 114
    const                          shift and go to state 115
    variant                        shift and go to state 111
    function_call                  shift and go to state 116
    command                        shift and go to state 117
    bool_const                     shift and go to state 119
    decimal_const                  shift and go to state 120
    string_const                   shift and go to state 121

state 165

    (56) math_expression -> MINUS expression .
    (55) math_expression -> expression . PLUS expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 56 (math_expression -> MINUS expression .)
    error           reduce using rule 56 (math_expression -> MINUS expression .)
    VARIANT         reduce using rule 56 (math_expression -> MINUS expression .)
    CONVERT         reduce using rule 56 (math_expression -> MINUS expression .)
    DIGITIZE        reduce using rule 56 (math_expression -> MINUS expression .)
    WHILE           reduce using rule 56 (math_expression -> MINUS expression .)
    UNTIL           reduce using rule 56 (math_expression -> MINUS expression .)
    IFLESS          reduce using rule 56 (math_expression -> MINUS expression .)
    IFNLESS         reduce using rule 56 (math_expression -> MINUS expression .)
    IFZERO          reduce using rule 56 (math_expression -> MINUS expression .)
    IFNZERO         reduce using rule 56 (math_expression -> MINUS expression .)
    IFHIGH          reduce using rule 56 (math_expression -> MINUS expression .)
    IFNHIGH         reduce using rule 56 (math_expression -> MINUS expression .)
    IFEQUAL         reduce using rule 56 (math_expression -> MINUS expression .)
    COMMAND         reduce using rule 56 (math_expression -> MINUS expression .)
    FUNC            reduce using rule 56 (math_expression -> MINUS expression .)
    CALL            reduce using rule 56 (math_expression -> MINUS expression .)
    NAME            reduce using rule 56 (math_expression -> MINUS expression .)
    PARAM           reduce using rule 56 (math_expression -> MINUS expression .)
    COMMA           reduce using rule 56 (math_expression -> MINUS expression .)
    RSQBRACKET      reduce using rule 56 (math_expression -> MINUS expression .)
    PLUS            shift and go to state 164

  ! PLUS            [ reduce using rule 56 (math_expression -> MINUS expression .) ]


state 166

    (73) convert -> CONVERT type TO type . variant
    (115) convert -> CONVERT type TO type . error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    error           shift and go to state 217
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    variant                        shift and go to state 216

state 167

    (116) convert -> CONVERT type TO error .

    NEWLINE         reduce using rule 116 (convert -> CONVERT type TO error .)
    error           reduce using rule 116 (convert -> CONVERT type TO error .)


state 168

    (78) while -> WHILE bool_expression NEWLINE statements . ENDW
    (125) while -> WHILE bool_expression NEWLINE statements . error
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDW            shift and go to state 218
    error           shift and go to state 219
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 169

    (126) while -> WHILE bool_expression statements ENDW .

    NEWLINE         reduce using rule 126 (while -> WHILE bool_expression statements ENDW .)
    error           reduce using rule 126 (while -> WHILE bool_expression statements ENDW .)


state 170

    (61) bool_math_expression -> bool_expression PLUS bool_expression .
    (61) bool_math_expression -> bool_expression . PLUS bool_expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 61 (bool_math_expression -> bool_expression PLUS bool_expression .)
    VARIANT         reduce using rule 61 (bool_math_expression -> bool_expression PLUS bool_expression .)
    error           reduce using rule 61 (bool_math_expression -> bool_expression PLUS bool_expression .)
    CONVERT         reduce using rule 61 (bool_math_expression -> bool_expression PLUS bool_expression .)
    DIGITIZE        reduce using rule 61 (bool_math_expression -> bool_expression PLUS bool_expression .)
    WHILE           reduce using rule 61 (bool_math_expression -> bool_expression PLUS bool_expression .)
    UNTIL           reduce using rule 61 (bool_math_expression -> bool_expression PLUS bool_expression .)
    IFLESS          reduce using rule 61 (bool_math_expression -> bool_expression PLUS bool_expression .)
    IFNLESS         reduce using rule 61 (bool_math_expression -> bool_expression PLUS bool_expression .)
    IFZERO          reduce using rule 61 (bool_math_expression -> bool_expression PLUS bool_expression .)
    IFNZERO         reduce using rule 61 (bool_math_expression -> bool_expression PLUS bool_expression .)
    IFHIGH          reduce using rule 61 (bool_math_expression -> bool_expression PLUS bool_expression .)
    IFNHIGH         reduce using rule 61 (bool_math_expression -> bool_expression PLUS bool_expression .)
    IFEQUAL         reduce using rule 61 (bool_math_expression -> bool_expression PLUS bool_expression .)
    COMMAND         reduce using rule 61 (bool_math_expression -> bool_expression PLUS bool_expression .)
    FUNC            reduce using rule 61 (bool_math_expression -> bool_expression PLUS bool_expression .)
    CALL            reduce using rule 61 (bool_math_expression -> bool_expression PLUS bool_expression .)
    NAME            reduce using rule 61 (bool_math_expression -> bool_expression PLUS bool_expression .)
    PARAM           reduce using rule 61 (bool_math_expression -> bool_expression PLUS bool_expression .)
    PLUS            shift and go to state 128

  ! PLUS            [ reduce using rule 61 (bool_math_expression -> bool_expression PLUS bool_expression .) ]


state 171

    (124) while -> WHILE error NEWLINE statements . ENDW
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDW            shift and go to state 220
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 172

    (79) until -> UNTIL bool_expression NEWLINE statements . ENDU
    (129) until -> UNTIL bool_expression NEWLINE statements . error
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDU            shift and go to state 221
    error           shift and go to state 222
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 173

    (130) until -> UNTIL bool_expression statements ENDU .

    NEWLINE         reduce using rule 130 (until -> UNTIL bool_expression statements ENDU .)
    error           reduce using rule 130 (until -> UNTIL bool_expression statements ENDU .)


state 174

    (128) until -> UNTIL error NEWLINE statements . ENDU
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDU            shift and go to state 223
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 175

    (80) if -> IFLESS decimal_expression COMMA decimal_expression . NEWLINE statements ENDIF
    (139) if -> IFLESS decimal_expression COMMA decimal_expression . NEWLINE statements error
    (146) if -> IFLESS decimal_expression COMMA decimal_expression . statements ENDIF
    (59) dec_math_expression -> decimal_expression . PLUS decimal_expression
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 224
    PLUS            shift and go to state 135
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

  ! NEWLINE         [ reduce using rule 15 (empty -> .) ]

    statements                     shift and go to state 225
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 176

    (59) dec_math_expression -> decimal_expression PLUS decimal_expression .
    (59) dec_math_expression -> decimal_expression . PLUS decimal_expression

  ! shift/reduce conflict for PLUS resolved as shift
    COMMA           reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    NEWLINE         reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    VARIANT         reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    error           reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    CONVERT         reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    DIGITIZE        reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    WHILE           reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    UNTIL           reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    IFLESS          reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    IFNLESS         reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    IFZERO          reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    IFNZERO         reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    IFHIGH          reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    IFNHIGH         reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    IFEQUAL         reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    COMMAND         reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    FUNC            reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    CALL            reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    NAME            reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    PARAM           reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    RSQBRACKET      reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    PLUS            shift and go to state 135

  ! PLUS            [ reduce using rule 59 (dec_math_expression -> decimal_expression PLUS decimal_expression .) ]


state 177

    (132) if -> IFLESS error NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 226
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 178

    (81) if -> IFNLESS decimal_expression COMMA decimal_expression . NEWLINE statements ENDIF
    (140) if -> IFNLESS decimal_expression COMMA decimal_expression . NEWLINE statements error
    (147) if -> IFNLESS decimal_expression COMMA decimal_expression . statements ENDIF
    (59) dec_math_expression -> decimal_expression . PLUS decimal_expression
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 227
    PLUS            shift and go to state 135
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

  ! NEWLINE         [ reduce using rule 15 (empty -> .) ]

    statements                     shift and go to state 228
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 179

    (133) if -> IFNLESS error NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 229
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 180

    (82) if -> IFZERO decimal_expression NEWLINE statements . ENDIF
    (141) if -> IFZERO decimal_expression NEWLINE statements . error
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 230
    error           shift and go to state 231
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 181

    (148) if -> IFZERO decimal_expression statements ENDIF .

    NEWLINE         reduce using rule 148 (if -> IFZERO decimal_expression statements ENDIF .)
    error           reduce using rule 148 (if -> IFZERO decimal_expression statements ENDIF .)


state 182

    (134) if -> IFZERO error NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 232
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 183

    (83) if -> IFNZERO decimal_expression NEWLINE statements . ENDIF
    (142) if -> IFNZERO decimal_expression NEWLINE statements . error
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 233
    error           shift and go to state 234
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 184

    (149) if -> IFNZERO decimal_expression statements ENDIF .

    NEWLINE         reduce using rule 149 (if -> IFNZERO decimal_expression statements ENDIF .)
    error           reduce using rule 149 (if -> IFNZERO decimal_expression statements ENDIF .)


state 185

    (135) if -> IFNZERO error NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 235
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 186

    (84) if -> IFHIGH decimal_expression COMMA decimal_expression . NEWLINE statements ENDIF
    (143) if -> IFHIGH decimal_expression COMMA decimal_expression . NEWLINE statements error
    (150) if -> IFHIGH decimal_expression COMMA decimal_expression . statements ENDIF
    (59) dec_math_expression -> decimal_expression . PLUS decimal_expression
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 236
    PLUS            shift and go to state 135
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

  ! NEWLINE         [ reduce using rule 15 (empty -> .) ]

    statements                     shift and go to state 237
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 187

    (136) if -> IFHIGH error NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 238
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 188

    (85) if -> IFNHIGH decimal_expression COMMA decimal_expression . NEWLINE statements ENDIF
    (144) if -> IFNHIGH decimal_expression COMMA decimal_expression . NEWLINE statements error
    (151) if -> IFNHIGH decimal_expression COMMA decimal_expression . statements ENDIF
    (59) dec_math_expression -> decimal_expression . PLUS decimal_expression
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 239
    PLUS            shift and go to state 135
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

  ! NEWLINE         [ reduce using rule 15 (empty -> .) ]

    statements                     shift and go to state 240
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 189

    (137) if -> IFNHIGH error NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 241
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 190

    (86) if -> IFEQUAL string_expression COMMA string_expression . NEWLINE statements ENDIF
    (145) if -> IFEQUAL string_expression COMMA string_expression . NEWLINE statements error
    (152) if -> IFEQUAL string_expression COMMA string_expression . statements ENDIF
    (63) string_math_expression -> string_expression . PLUS string_expression
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 242
    PLUS            shift and go to state 151
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

  ! NEWLINE         [ reduce using rule 15 (empty -> .) ]

    statements                     shift and go to state 243
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 191

    (63) string_math_expression -> string_expression PLUS string_expression .
    (63) string_math_expression -> string_expression . PLUS string_expression

  ! shift/reduce conflict for PLUS resolved as shift
    COMMA           reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .)
    NEWLINE         reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .)
    error           reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .)
    VARIANT         reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .)
    CONVERT         reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .)
    DIGITIZE        reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .)
    WHILE           reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .)
    UNTIL           reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .)
    IFLESS          reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .)
    IFNLESS         reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .)
    IFZERO          reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .)
    IFNZERO         reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .)
    IFHIGH          reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .)
    IFNHIGH         reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .)
    IFEQUAL         reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .)
    COMMAND         reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .)
    FUNC            reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .)
    CALL            reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .)
    NAME            reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .)
    PARAM           reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .)
    RSQBRACKET      reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .)
    PLUS            shift and go to state 151

  ! PLUS            [ reduce using rule 63 (string_math_expression -> string_expression PLUS string_expression .) ]


state 192

    (138) if -> IFEQUAL error NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 244
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 193

    (101) function -> FUNC NAME NEWLINE func_body_statements . ENDFUNC
    (155) function -> FUNC NAME NEWLINE func_body_statements . error
    (88) func_body_statements -> func_body_statements . func_body_statement
    (90) func_body_statement -> . empty NEWLINE
    (91) func_body_statement -> . declaration NEWLINE
    (92) func_body_statement -> . assignment NEWLINE
    (93) func_body_statement -> . convert NEWLINE
    (94) func_body_statement -> . digitize NEWLINE
    (95) func_body_statement -> . while NEWLINE
    (96) func_body_statement -> . until NEWLINE
    (97) func_body_statement -> . if NEWLINE
    (98) func_body_statement -> . command NEWLINE
    (99) func_body_statement -> . function_call NEWLINE
    (100) func_body_statement -> . return NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (104) return -> . RETURN expression
    (158) return -> . RETURN error
    (159) return -> . return error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDFUNC         shift and go to state 245
    error           shift and go to state 246
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    CALL            shift and go to state 32
    RETURN          shift and go to state 206
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    func_body_statement            shift and go to state 247
    empty                          shift and go to state 195
    declaration                    shift and go to state 196
    assignment                     shift and go to state 197
    convert                        shift and go to state 198
    digitize                       shift and go to state 199
    while                          shift and go to state 200
    until                          shift and go to state 201
    if                             shift and go to state 202
    command                        shift and go to state 203
    function_call                  shift and go to state 204
    return                         shift and go to state 205
    variant                        shift and go to state 16

state 194

    (89) func_body_statements -> func_body_statement .

    ENDFUNC         reduce using rule 89 (func_body_statements -> func_body_statement .)
    error           reduce using rule 89 (func_body_statements -> func_body_statement .)
    VARIANT         reduce using rule 89 (func_body_statements -> func_body_statement .)
    CONVERT         reduce using rule 89 (func_body_statements -> func_body_statement .)
    DIGITIZE        reduce using rule 89 (func_body_statements -> func_body_statement .)
    WHILE           reduce using rule 89 (func_body_statements -> func_body_statement .)
    UNTIL           reduce using rule 89 (func_body_statements -> func_body_statement .)
    IFLESS          reduce using rule 89 (func_body_statements -> func_body_statement .)
    IFNLESS         reduce using rule 89 (func_body_statements -> func_body_statement .)
    IFZERO          reduce using rule 89 (func_body_statements -> func_body_statement .)
    IFNZERO         reduce using rule 89 (func_body_statements -> func_body_statement .)
    IFHIGH          reduce using rule 89 (func_body_statements -> func_body_statement .)
    IFNHIGH         reduce using rule 89 (func_body_statements -> func_body_statement .)
    IFEQUAL         reduce using rule 89 (func_body_statements -> func_body_statement .)
    COMMAND         reduce using rule 89 (func_body_statements -> func_body_statement .)
    CALL            reduce using rule 89 (func_body_statements -> func_body_statement .)
    RETURN          reduce using rule 89 (func_body_statements -> func_body_statement .)
    NAME            reduce using rule 89 (func_body_statements -> func_body_statement .)
    PARAM           reduce using rule 89 (func_body_statements -> func_body_statement .)
    NEWLINE         reduce using rule 89 (func_body_statements -> func_body_statement .)


state 195

    (90) func_body_statement -> empty . NEWLINE

    NEWLINE         shift and go to state 248


state 196

    (91) func_body_statement -> declaration . NEWLINE
    (107) declaration -> declaration . error

    NEWLINE         shift and go to state 249
    error           shift and go to state 37


state 197

    (92) func_body_statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 250


state 198

    (93) func_body_statement -> convert . NEWLINE
    (119) convert -> convert . error

    NEWLINE         shift and go to state 251
    error           shift and go to state 40


state 199

    (94) func_body_statement -> digitize . NEWLINE
    (121) digitize -> digitize . error

    NEWLINE         shift and go to state 252
    error           shift and go to state 42


state 200

    (95) func_body_statement -> while . NEWLINE
    (127) while -> while . error

    NEWLINE         shift and go to state 253
    error           shift and go to state 44


state 201

    (96) func_body_statement -> until . NEWLINE
    (131) until -> until . error

    NEWLINE         shift and go to state 254
    error           shift and go to state 46


state 202

    (97) func_body_statement -> if . NEWLINE
    (153) if -> if . error

    NEWLINE         shift and go to state 255
    error           shift and go to state 48


state 203

    (98) func_body_statement -> command . NEWLINE
    (123) command -> command . error

    NEWLINE         shift and go to state 256
    error           shift and go to state 50


state 204

    (99) func_body_statement -> function_call . NEWLINE

    NEWLINE         shift and go to state 257


state 205

    (100) func_body_statement -> return . NEWLINE
    (159) return -> return . error

    NEWLINE         shift and go to state 258
    error           shift and go to state 259


state 206

    (104) return -> RETURN . expression
    (158) return -> RETURN . error
    (38) expression -> . math_expression
    (39) expression -> . const
    (40) expression -> . variant
    (41) expression -> . function_call
    (42) expression -> . command
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . MINUS expression
    (65) const -> . bool_const
    (66) const -> . decimal_const
    (67) const -> . string_const
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (69) bool_const -> . TRUE
    (70) bool_const -> . FALSE
    (68) decimal_const -> . DECIMAL
    (71) string_const -> . LETTERS

    error           shift and go to state 261
    MINUS           shift and go to state 118
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32
    COMMAND         shift and go to state 29
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    DECIMAL         shift and go to state 83
    LETTERS         shift and go to state 101

    expression                     shift and go to state 260
    math_expression                shift and go to state 114
    const                          shift and go to state 115
    variant                        shift and go to state 111
    function_call                  shift and go to state 116
    command                        shift and go to state 117
    bool_const                     shift and go to state 119
    decimal_const                  shift and go to state 120
    string_const                   shift and go to state 121

state 207

    (154) function -> FUNC error NEWLINE func_body_statements . ENDFUNC
    (156) function -> FUNC error NEWLINE func_body_statements . error
    (88) func_body_statements -> func_body_statements . func_body_statement
    (90) func_body_statement -> . empty NEWLINE
    (91) func_body_statement -> . declaration NEWLINE
    (92) func_body_statement -> . assignment NEWLINE
    (93) func_body_statement -> . convert NEWLINE
    (94) func_body_statement -> . digitize NEWLINE
    (95) func_body_statement -> . while NEWLINE
    (96) func_body_statement -> . until NEWLINE
    (97) func_body_statement -> . if NEWLINE
    (98) func_body_statement -> . command NEWLINE
    (99) func_body_statement -> . function_call NEWLINE
    (100) func_body_statement -> . return NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (104) return -> . RETURN expression
    (158) return -> . RETURN error
    (159) return -> . return error
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDFUNC         shift and go to state 263
    error           shift and go to state 262
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    CALL            shift and go to state 32
    RETURN          shift and go to state 206
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    func_body_statement            shift and go to state 247
    empty                          shift and go to state 195
    declaration                    shift and go to state 196
    assignment                     shift and go to state 197
    convert                        shift and go to state 198
    digitize                       shift and go to state 199
    while                          shift and go to state 200
    until                          shift and go to state 201
    if                             shift and go to state 202
    command                        shift and go to state 203
    function_call                  shift and go to state 204
    return                         shift and go to state 205
    variant                        shift and go to state 16

state 208

    (22) varsize -> LSQBRACKET decimal_expression RSQBRACKET .

    error           reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    ASSIGNMENT      reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    NEWLINE         reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    PLUS            reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    VARIANT         reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    CONVERT         reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    DIGITIZE        reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    WHILE           reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    UNTIL           reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    IFLESS          reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    IFNLESS         reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    IFZERO          reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    IFNZERO         reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    IFHIGH          reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    IFNHIGH         reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    IFEQUAL         reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    COMMAND         reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    FUNC            reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    CALL            reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    NAME            reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    PARAM           reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    COMMA           reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    RSQBRACKET      reduce using rule 22 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)


state 209

    (23) varsize -> LSQBRACKET decimal_expression COMMA . decimal_expression RSQBRACKET
    (110) varsize -> LSQBRACKET decimal_expression COMMA . error RSQBRACKET
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (46) decimal_expression -> . function_call
    (59) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (60) dec_math_expression -> . MINUS decimal_expression
    (68) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    error           shift and go to state 265
    MINUS           shift and go to state 82
    DECIMAL         shift and go to state 83
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    decimal_expression             shift and go to state 264
    dec_math_expression            shift and go to state 78
    decimal_const                  shift and go to state 79
    variant                        shift and go to state 80
    function_call                  shift and go to state 81

state 210

    (108) varsize -> LSQBRACKET error RSQBRACKET .

    error           reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    ASSIGNMENT      reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    NEWLINE         reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    PLUS            reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    VARIANT         reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    CONVERT         reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    DIGITIZE        reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    WHILE           reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    UNTIL           reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    IFLESS          reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    IFNLESS         reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    IFZERO          reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    IFNZERO         reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    IFHIGH          reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    IFNHIGH         reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    IFEQUAL         reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    COMMAND         reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    FUNC            reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    CALL            reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    NAME            reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    PARAM           reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    COMMA           reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)
    RSQBRACKET      reduce using rule 108 (varsize -> LSQBRACKET error RSQBRACKET .)


state 211

    (109) varsize -> LSQBRACKET error COMMA . decimal_expression RSQBRACKET
    (111) varsize -> LSQBRACKET error COMMA . error RSQBRACKET
    (43) decimal_expression -> . dec_math_expression
    (44) decimal_expression -> . decimal_const
    (45) decimal_expression -> . variant
    (46) decimal_expression -> . function_call
    (59) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (60) dec_math_expression -> . MINUS decimal_expression
    (68) decimal_const -> . DECIMAL
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME

    error           shift and go to state 266
    MINUS           shift and go to state 82
    DECIMAL         shift and go to state 83
    NAME            shift and go to state 31
    PARAM           shift and go to state 33
    CALL            shift and go to state 32

    decimal_expression             shift and go to state 267
    dec_math_expression            shift and go to state 78
    decimal_const                  shift and go to state 79
    variant                        shift and go to state 80
    function_call                  shift and go to state 81

state 212

    (28) init_list -> LBRACE . inits RBRACE
    (29) init_list -> LBRACE . RBRACE
    (30) inits -> . inits init
    (31) inits -> . init
    (32) init -> . const_expressions COMMA const_expression SEMICOLON
    (33) init -> . const_expression SEMICOLON
    (34) const_expressions -> . const_expressions COMMA const_expression
    (35) const_expressions -> . const_expression
    (36) const_expression -> . const_math_expression
    (37) const_expression -> . const
    (57) const_math_expression -> . const_expression PLUS const_expression
    (58) const_math_expression -> . MINUS const_expression
    (65) const -> . bool_const
    (66) const -> . decimal_const
    (67) const -> . string_const
    (69) bool_const -> . TRUE
    (70) bool_const -> . FALSE
    (68) decimal_const -> . DECIMAL
    (71) string_const -> . LETTERS

    RBRACE          shift and go to state 269
    MINUS           shift and go to state 275
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    DECIMAL         shift and go to state 83
    LETTERS         shift and go to state 101

    inits                          shift and go to state 268
    init                           shift and go to state 270
    const_expressions              shift and go to state 271
    const_expression               shift and go to state 272
    const_math_expression          shift and go to state 273
    const                          shift and go to state 274
    bool_const                     shift and go to state 119
    decimal_const                  shift and go to state 120
    string_const                   shift and go to state 121

state 213

    (25) initialization -> LBRACE init_lists . RBRACE
    (26) init_lists -> init_lists . init_list
    (28) init_list -> . LBRACE inits RBRACE
    (29) init_list -> . LBRACE RBRACE

    RBRACE          shift and go to state 276
    LBRACE          shift and go to state 212

    init_list                      shift and go to state 277

state 214

    (27) init_lists -> init_list .

    RBRACE          reduce using rule 27 (init_lists -> init_list .)
    LBRACE          reduce using rule 27 (init_lists -> init_list .)


state 215

    (55) math_expression -> expression PLUS expression .
    (55) math_expression -> expression . PLUS expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 55 (math_expression -> expression PLUS expression .)
    error           reduce using rule 55 (math_expression -> expression PLUS expression .)
    VARIANT         reduce using rule 55 (math_expression -> expression PLUS expression .)
    CONVERT         reduce using rule 55 (math_expression -> expression PLUS expression .)
    DIGITIZE        reduce using rule 55 (math_expression -> expression PLUS expression .)
    WHILE           reduce using rule 55 (math_expression -> expression PLUS expression .)
    UNTIL           reduce using rule 55 (math_expression -> expression PLUS expression .)
    IFLESS          reduce using rule 55 (math_expression -> expression PLUS expression .)
    IFNLESS         reduce using rule 55 (math_expression -> expression PLUS expression .)
    IFZERO          reduce using rule 55 (math_expression -> expression PLUS expression .)
    IFNZERO         reduce using rule 55 (math_expression -> expression PLUS expression .)
    IFHIGH          reduce using rule 55 (math_expression -> expression PLUS expression .)
    IFNHIGH         reduce using rule 55 (math_expression -> expression PLUS expression .)
    IFEQUAL         reduce using rule 55 (math_expression -> expression PLUS expression .)
    COMMAND         reduce using rule 55 (math_expression -> expression PLUS expression .)
    FUNC            reduce using rule 55 (math_expression -> expression PLUS expression .)
    CALL            reduce using rule 55 (math_expression -> expression PLUS expression .)
    NAME            reduce using rule 55 (math_expression -> expression PLUS expression .)
    PARAM           reduce using rule 55 (math_expression -> expression PLUS expression .)
    COMMA           reduce using rule 55 (math_expression -> expression PLUS expression .)
    RSQBRACKET      reduce using rule 55 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 164

  ! PLUS            [ reduce using rule 55 (math_expression -> expression PLUS expression .) ]


state 216

    (73) convert -> CONVERT type TO type variant .

    NEWLINE         reduce using rule 73 (convert -> CONVERT type TO type variant .)
    error           reduce using rule 73 (convert -> CONVERT type TO type variant .)


state 217

    (115) convert -> CONVERT type TO type error .

    NEWLINE         reduce using rule 115 (convert -> CONVERT type TO type error .)
    error           reduce using rule 115 (convert -> CONVERT type TO type error .)


state 218

    (78) while -> WHILE bool_expression NEWLINE statements ENDW .

    NEWLINE         reduce using rule 78 (while -> WHILE bool_expression NEWLINE statements ENDW .)
    error           reduce using rule 78 (while -> WHILE bool_expression NEWLINE statements ENDW .)


state 219

    (125) while -> WHILE bool_expression NEWLINE statements error .
    (114) assignment -> error . ASSIGNMENT expression

    NEWLINE         reduce using rule 125 (while -> WHILE bool_expression NEWLINE statements error .)
    error           reduce using rule 125 (while -> WHILE bool_expression NEWLINE statements error .)
    ASSIGNMENT      shift and go to state 57


state 220

    (124) while -> WHILE error NEWLINE statements ENDW .

    NEWLINE         reduce using rule 124 (while -> WHILE error NEWLINE statements ENDW .)
    error           reduce using rule 124 (while -> WHILE error NEWLINE statements ENDW .)


state 221

    (79) until -> UNTIL bool_expression NEWLINE statements ENDU .

    NEWLINE         reduce using rule 79 (until -> UNTIL bool_expression NEWLINE statements ENDU .)
    error           reduce using rule 79 (until -> UNTIL bool_expression NEWLINE statements ENDU .)


state 222

    (129) until -> UNTIL bool_expression NEWLINE statements error .
    (114) assignment -> error . ASSIGNMENT expression

    NEWLINE         reduce using rule 129 (until -> UNTIL bool_expression NEWLINE statements error .)
    error           reduce using rule 129 (until -> UNTIL bool_expression NEWLINE statements error .)
    ASSIGNMENT      shift and go to state 57


state 223

    (128) until -> UNTIL error NEWLINE statements ENDU .

    NEWLINE         reduce using rule 128 (until -> UNTIL error NEWLINE statements ENDU .)
    error           reduce using rule 128 (until -> UNTIL error NEWLINE statements ENDU .)


state 224

    (80) if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE . statements ENDIF
    (139) if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE . statements error
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statements                     shift and go to state 278
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 225

    (146) if -> IFLESS decimal_expression COMMA decimal_expression statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 279
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 226

    (132) if -> IFLESS error NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 132 (if -> IFLESS error NEWLINE statements ENDIF .)
    error           reduce using rule 132 (if -> IFLESS error NEWLINE statements ENDIF .)


state 227

    (81) if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE . statements ENDIF
    (140) if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE . statements error
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statements                     shift and go to state 280
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 228

    (147) if -> IFNLESS decimal_expression COMMA decimal_expression statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 281
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 229

    (133) if -> IFNLESS error NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 133 (if -> IFNLESS error NEWLINE statements ENDIF .)
    error           reduce using rule 133 (if -> IFNLESS error NEWLINE statements ENDIF .)


state 230

    (82) if -> IFZERO decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 82 (if -> IFZERO decimal_expression NEWLINE statements ENDIF .)
    error           reduce using rule 82 (if -> IFZERO decimal_expression NEWLINE statements ENDIF .)


state 231

    (141) if -> IFZERO decimal_expression NEWLINE statements error .
    (114) assignment -> error . ASSIGNMENT expression

    NEWLINE         reduce using rule 141 (if -> IFZERO decimal_expression NEWLINE statements error .)
    error           reduce using rule 141 (if -> IFZERO decimal_expression NEWLINE statements error .)
    ASSIGNMENT      shift and go to state 57


state 232

    (134) if -> IFZERO error NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 134 (if -> IFZERO error NEWLINE statements ENDIF .)
    error           reduce using rule 134 (if -> IFZERO error NEWLINE statements ENDIF .)


state 233

    (83) if -> IFNZERO decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 83 (if -> IFNZERO decimal_expression NEWLINE statements ENDIF .)
    error           reduce using rule 83 (if -> IFNZERO decimal_expression NEWLINE statements ENDIF .)


state 234

    (142) if -> IFNZERO decimal_expression NEWLINE statements error .
    (114) assignment -> error . ASSIGNMENT expression

    NEWLINE         reduce using rule 142 (if -> IFNZERO decimal_expression NEWLINE statements error .)
    error           reduce using rule 142 (if -> IFNZERO decimal_expression NEWLINE statements error .)
    ASSIGNMENT      shift and go to state 57


state 235

    (135) if -> IFNZERO error NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 135 (if -> IFNZERO error NEWLINE statements ENDIF .)
    error           reduce using rule 135 (if -> IFNZERO error NEWLINE statements ENDIF .)


state 236

    (84) if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE . statements ENDIF
    (143) if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE . statements error
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statements                     shift and go to state 282
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 237

    (150) if -> IFHIGH decimal_expression COMMA decimal_expression statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 283
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 238

    (136) if -> IFHIGH error NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 136 (if -> IFHIGH error NEWLINE statements ENDIF .)
    error           reduce using rule 136 (if -> IFHIGH error NEWLINE statements ENDIF .)


state 239

    (85) if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE . statements ENDIF
    (144) if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE . statements error
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statements                     shift and go to state 284
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 240

    (151) if -> IFNHIGH decimal_expression COMMA decimal_expression statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 285
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 241

    (137) if -> IFNHIGH error NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 137 (if -> IFNHIGH error NEWLINE statements ENDIF .)
    error           reduce using rule 137 (if -> IFNHIGH error NEWLINE statements ENDIF .)


state 242

    (86) if -> IFEQUAL string_expression COMMA string_expression NEWLINE . statements ENDIF
    (145) if -> IFEQUAL string_expression COMMA string_expression NEWLINE . statements error
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statements                     shift and go to state 286
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 243

    (152) if -> IFEQUAL string_expression COMMA string_expression statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 287
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    error           shift and go to state 17
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 244

    (138) if -> IFEQUAL error NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 138 (if -> IFEQUAL error NEWLINE statements ENDIF .)
    error           reduce using rule 138 (if -> IFEQUAL error NEWLINE statements ENDIF .)


state 245

    (101) function -> FUNC NAME NEWLINE func_body_statements ENDFUNC .

    NEWLINE         reduce using rule 101 (function -> FUNC NAME NEWLINE func_body_statements ENDFUNC .)
    error           reduce using rule 101 (function -> FUNC NAME NEWLINE func_body_statements ENDFUNC .)


state 246

    (155) function -> FUNC NAME NEWLINE func_body_statements error .
    (114) assignment -> error . ASSIGNMENT expression

    NEWLINE         reduce using rule 155 (function -> FUNC NAME NEWLINE func_body_statements error .)
    error           reduce using rule 155 (function -> FUNC NAME NEWLINE func_body_statements error .)
    ASSIGNMENT      shift and go to state 57


state 247

    (88) func_body_statements -> func_body_statements func_body_statement .

    ENDFUNC         reduce using rule 88 (func_body_statements -> func_body_statements func_body_statement .)
    error           reduce using rule 88 (func_body_statements -> func_body_statements func_body_statement .)
    VARIANT         reduce using rule 88 (func_body_statements -> func_body_statements func_body_statement .)
    CONVERT         reduce using rule 88 (func_body_statements -> func_body_statements func_body_statement .)
    DIGITIZE        reduce using rule 88 (func_body_statements -> func_body_statements func_body_statement .)
    WHILE           reduce using rule 88 (func_body_statements -> func_body_statements func_body_statement .)
    UNTIL           reduce using rule 88 (func_body_statements -> func_body_statements func_body_statement .)
    IFLESS          reduce using rule 88 (func_body_statements -> func_body_statements func_body_statement .)
    IFNLESS         reduce using rule 88 (func_body_statements -> func_body_statements func_body_statement .)
    IFZERO          reduce using rule 88 (func_body_statements -> func_body_statements func_body_statement .)
    IFNZERO         reduce using rule 88 (func_body_statements -> func_body_statements func_body_statement .)
    IFHIGH          reduce using rule 88 (func_body_statements -> func_body_statements func_body_statement .)
    IFNHIGH         reduce using rule 88 (func_body_statements -> func_body_statements func_body_statement .)
    IFEQUAL         reduce using rule 88 (func_body_statements -> func_body_statements func_body_statement .)
    COMMAND         reduce using rule 88 (func_body_statements -> func_body_statements func_body_statement .)
    CALL            reduce using rule 88 (func_body_statements -> func_body_statements func_body_statement .)
    RETURN          reduce using rule 88 (func_body_statements -> func_body_statements func_body_statement .)
    NAME            reduce using rule 88 (func_body_statements -> func_body_statements func_body_statement .)
    PARAM           reduce using rule 88 (func_body_statements -> func_body_statements func_body_statement .)
    NEWLINE         reduce using rule 88 (func_body_statements -> func_body_statements func_body_statement .)


state 248

    (90) func_body_statement -> empty NEWLINE .

    ENDFUNC         reduce using rule 90 (func_body_statement -> empty NEWLINE .)
    error           reduce using rule 90 (func_body_statement -> empty NEWLINE .)
    VARIANT         reduce using rule 90 (func_body_statement -> empty NEWLINE .)
    CONVERT         reduce using rule 90 (func_body_statement -> empty NEWLINE .)
    DIGITIZE        reduce using rule 90 (func_body_statement -> empty NEWLINE .)
    WHILE           reduce using rule 90 (func_body_statement -> empty NEWLINE .)
    UNTIL           reduce using rule 90 (func_body_statement -> empty NEWLINE .)
    IFLESS          reduce using rule 90 (func_body_statement -> empty NEWLINE .)
    IFNLESS         reduce using rule 90 (func_body_statement -> empty NEWLINE .)
    IFZERO          reduce using rule 90 (func_body_statement -> empty NEWLINE .)
    IFNZERO         reduce using rule 90 (func_body_statement -> empty NEWLINE .)
    IFHIGH          reduce using rule 90 (func_body_statement -> empty NEWLINE .)
    IFNHIGH         reduce using rule 90 (func_body_statement -> empty NEWLINE .)
    IFEQUAL         reduce using rule 90 (func_body_statement -> empty NEWLINE .)
    COMMAND         reduce using rule 90 (func_body_statement -> empty NEWLINE .)
    CALL            reduce using rule 90 (func_body_statement -> empty NEWLINE .)
    RETURN          reduce using rule 90 (func_body_statement -> empty NEWLINE .)
    NAME            reduce using rule 90 (func_body_statement -> empty NEWLINE .)
    PARAM           reduce using rule 90 (func_body_statement -> empty NEWLINE .)
    NEWLINE         reduce using rule 90 (func_body_statement -> empty NEWLINE .)


state 249

    (91) func_body_statement -> declaration NEWLINE .

    ENDFUNC         reduce using rule 91 (func_body_statement -> declaration NEWLINE .)
    error           reduce using rule 91 (func_body_statement -> declaration NEWLINE .)
    VARIANT         reduce using rule 91 (func_body_statement -> declaration NEWLINE .)
    CONVERT         reduce using rule 91 (func_body_statement -> declaration NEWLINE .)
    DIGITIZE        reduce using rule 91 (func_body_statement -> declaration NEWLINE .)
    WHILE           reduce using rule 91 (func_body_statement -> declaration NEWLINE .)
    UNTIL           reduce using rule 91 (func_body_statement -> declaration NEWLINE .)
    IFLESS          reduce using rule 91 (func_body_statement -> declaration NEWLINE .)
    IFNLESS         reduce using rule 91 (func_body_statement -> declaration NEWLINE .)
    IFZERO          reduce using rule 91 (func_body_statement -> declaration NEWLINE .)
    IFNZERO         reduce using rule 91 (func_body_statement -> declaration NEWLINE .)
    IFHIGH          reduce using rule 91 (func_body_statement -> declaration NEWLINE .)
    IFNHIGH         reduce using rule 91 (func_body_statement -> declaration NEWLINE .)
    IFEQUAL         reduce using rule 91 (func_body_statement -> declaration NEWLINE .)
    COMMAND         reduce using rule 91 (func_body_statement -> declaration NEWLINE .)
    CALL            reduce using rule 91 (func_body_statement -> declaration NEWLINE .)
    RETURN          reduce using rule 91 (func_body_statement -> declaration NEWLINE .)
    NAME            reduce using rule 91 (func_body_statement -> declaration NEWLINE .)
    PARAM           reduce using rule 91 (func_body_statement -> declaration NEWLINE .)
    NEWLINE         reduce using rule 91 (func_body_statement -> declaration NEWLINE .)


state 250

    (92) func_body_statement -> assignment NEWLINE .

    ENDFUNC         reduce using rule 92 (func_body_statement -> assignment NEWLINE .)
    error           reduce using rule 92 (func_body_statement -> assignment NEWLINE .)
    VARIANT         reduce using rule 92 (func_body_statement -> assignment NEWLINE .)
    CONVERT         reduce using rule 92 (func_body_statement -> assignment NEWLINE .)
    DIGITIZE        reduce using rule 92 (func_body_statement -> assignment NEWLINE .)
    WHILE           reduce using rule 92 (func_body_statement -> assignment NEWLINE .)
    UNTIL           reduce using rule 92 (func_body_statement -> assignment NEWLINE .)
    IFLESS          reduce using rule 92 (func_body_statement -> assignment NEWLINE .)
    IFNLESS         reduce using rule 92 (func_body_statement -> assignment NEWLINE .)
    IFZERO          reduce using rule 92 (func_body_statement -> assignment NEWLINE .)
    IFNZERO         reduce using rule 92 (func_body_statement -> assignment NEWLINE .)
    IFHIGH          reduce using rule 92 (func_body_statement -> assignment NEWLINE .)
    IFNHIGH         reduce using rule 92 (func_body_statement -> assignment NEWLINE .)
    IFEQUAL         reduce using rule 92 (func_body_statement -> assignment NEWLINE .)
    COMMAND         reduce using rule 92 (func_body_statement -> assignment NEWLINE .)
    CALL            reduce using rule 92 (func_body_statement -> assignment NEWLINE .)
    RETURN          reduce using rule 92 (func_body_statement -> assignment NEWLINE .)
    NAME            reduce using rule 92 (func_body_statement -> assignment NEWLINE .)
    PARAM           reduce using rule 92 (func_body_statement -> assignment NEWLINE .)
    NEWLINE         reduce using rule 92 (func_body_statement -> assignment NEWLINE .)


state 251

    (93) func_body_statement -> convert NEWLINE .

    ENDFUNC         reduce using rule 93 (func_body_statement -> convert NEWLINE .)
    error           reduce using rule 93 (func_body_statement -> convert NEWLINE .)
    VARIANT         reduce using rule 93 (func_body_statement -> convert NEWLINE .)
    CONVERT         reduce using rule 93 (func_body_statement -> convert NEWLINE .)
    DIGITIZE        reduce using rule 93 (func_body_statement -> convert NEWLINE .)
    WHILE           reduce using rule 93 (func_body_statement -> convert NEWLINE .)
    UNTIL           reduce using rule 93 (func_body_statement -> convert NEWLINE .)
    IFLESS          reduce using rule 93 (func_body_statement -> convert NEWLINE .)
    IFNLESS         reduce using rule 93 (func_body_statement -> convert NEWLINE .)
    IFZERO          reduce using rule 93 (func_body_statement -> convert NEWLINE .)
    IFNZERO         reduce using rule 93 (func_body_statement -> convert NEWLINE .)
    IFHIGH          reduce using rule 93 (func_body_statement -> convert NEWLINE .)
    IFNHIGH         reduce using rule 93 (func_body_statement -> convert NEWLINE .)
    IFEQUAL         reduce using rule 93 (func_body_statement -> convert NEWLINE .)
    COMMAND         reduce using rule 93 (func_body_statement -> convert NEWLINE .)
    CALL            reduce using rule 93 (func_body_statement -> convert NEWLINE .)
    RETURN          reduce using rule 93 (func_body_statement -> convert NEWLINE .)
    NAME            reduce using rule 93 (func_body_statement -> convert NEWLINE .)
    PARAM           reduce using rule 93 (func_body_statement -> convert NEWLINE .)
    NEWLINE         reduce using rule 93 (func_body_statement -> convert NEWLINE .)


state 252

    (94) func_body_statement -> digitize NEWLINE .

    ENDFUNC         reduce using rule 94 (func_body_statement -> digitize NEWLINE .)
    error           reduce using rule 94 (func_body_statement -> digitize NEWLINE .)
    VARIANT         reduce using rule 94 (func_body_statement -> digitize NEWLINE .)
    CONVERT         reduce using rule 94 (func_body_statement -> digitize NEWLINE .)
    DIGITIZE        reduce using rule 94 (func_body_statement -> digitize NEWLINE .)
    WHILE           reduce using rule 94 (func_body_statement -> digitize NEWLINE .)
    UNTIL           reduce using rule 94 (func_body_statement -> digitize NEWLINE .)
    IFLESS          reduce using rule 94 (func_body_statement -> digitize NEWLINE .)
    IFNLESS         reduce using rule 94 (func_body_statement -> digitize NEWLINE .)
    IFZERO          reduce using rule 94 (func_body_statement -> digitize NEWLINE .)
    IFNZERO         reduce using rule 94 (func_body_statement -> digitize NEWLINE .)
    IFHIGH          reduce using rule 94 (func_body_statement -> digitize NEWLINE .)
    IFNHIGH         reduce using rule 94 (func_body_statement -> digitize NEWLINE .)
    IFEQUAL         reduce using rule 94 (func_body_statement -> digitize NEWLINE .)
    COMMAND         reduce using rule 94 (func_body_statement -> digitize NEWLINE .)
    CALL            reduce using rule 94 (func_body_statement -> digitize NEWLINE .)
    RETURN          reduce using rule 94 (func_body_statement -> digitize NEWLINE .)
    NAME            reduce using rule 94 (func_body_statement -> digitize NEWLINE .)
    PARAM           reduce using rule 94 (func_body_statement -> digitize NEWLINE .)
    NEWLINE         reduce using rule 94 (func_body_statement -> digitize NEWLINE .)


state 253

    (95) func_body_statement -> while NEWLINE .

    ENDFUNC         reduce using rule 95 (func_body_statement -> while NEWLINE .)
    error           reduce using rule 95 (func_body_statement -> while NEWLINE .)
    VARIANT         reduce using rule 95 (func_body_statement -> while NEWLINE .)
    CONVERT         reduce using rule 95 (func_body_statement -> while NEWLINE .)
    DIGITIZE        reduce using rule 95 (func_body_statement -> while NEWLINE .)
    WHILE           reduce using rule 95 (func_body_statement -> while NEWLINE .)
    UNTIL           reduce using rule 95 (func_body_statement -> while NEWLINE .)
    IFLESS          reduce using rule 95 (func_body_statement -> while NEWLINE .)
    IFNLESS         reduce using rule 95 (func_body_statement -> while NEWLINE .)
    IFZERO          reduce using rule 95 (func_body_statement -> while NEWLINE .)
    IFNZERO         reduce using rule 95 (func_body_statement -> while NEWLINE .)
    IFHIGH          reduce using rule 95 (func_body_statement -> while NEWLINE .)
    IFNHIGH         reduce using rule 95 (func_body_statement -> while NEWLINE .)
    IFEQUAL         reduce using rule 95 (func_body_statement -> while NEWLINE .)
    COMMAND         reduce using rule 95 (func_body_statement -> while NEWLINE .)
    CALL            reduce using rule 95 (func_body_statement -> while NEWLINE .)
    RETURN          reduce using rule 95 (func_body_statement -> while NEWLINE .)
    NAME            reduce using rule 95 (func_body_statement -> while NEWLINE .)
    PARAM           reduce using rule 95 (func_body_statement -> while NEWLINE .)
    NEWLINE         reduce using rule 95 (func_body_statement -> while NEWLINE .)


state 254

    (96) func_body_statement -> until NEWLINE .

    ENDFUNC         reduce using rule 96 (func_body_statement -> until NEWLINE .)
    error           reduce using rule 96 (func_body_statement -> until NEWLINE .)
    VARIANT         reduce using rule 96 (func_body_statement -> until NEWLINE .)
    CONVERT         reduce using rule 96 (func_body_statement -> until NEWLINE .)
    DIGITIZE        reduce using rule 96 (func_body_statement -> until NEWLINE .)
    WHILE           reduce using rule 96 (func_body_statement -> until NEWLINE .)
    UNTIL           reduce using rule 96 (func_body_statement -> until NEWLINE .)
    IFLESS          reduce using rule 96 (func_body_statement -> until NEWLINE .)
    IFNLESS         reduce using rule 96 (func_body_statement -> until NEWLINE .)
    IFZERO          reduce using rule 96 (func_body_statement -> until NEWLINE .)
    IFNZERO         reduce using rule 96 (func_body_statement -> until NEWLINE .)
    IFHIGH          reduce using rule 96 (func_body_statement -> until NEWLINE .)
    IFNHIGH         reduce using rule 96 (func_body_statement -> until NEWLINE .)
    IFEQUAL         reduce using rule 96 (func_body_statement -> until NEWLINE .)
    COMMAND         reduce using rule 96 (func_body_statement -> until NEWLINE .)
    CALL            reduce using rule 96 (func_body_statement -> until NEWLINE .)
    RETURN          reduce using rule 96 (func_body_statement -> until NEWLINE .)
    NAME            reduce using rule 96 (func_body_statement -> until NEWLINE .)
    PARAM           reduce using rule 96 (func_body_statement -> until NEWLINE .)
    NEWLINE         reduce using rule 96 (func_body_statement -> until NEWLINE .)


state 255

    (97) func_body_statement -> if NEWLINE .

    ENDFUNC         reduce using rule 97 (func_body_statement -> if NEWLINE .)
    error           reduce using rule 97 (func_body_statement -> if NEWLINE .)
    VARIANT         reduce using rule 97 (func_body_statement -> if NEWLINE .)
    CONVERT         reduce using rule 97 (func_body_statement -> if NEWLINE .)
    DIGITIZE        reduce using rule 97 (func_body_statement -> if NEWLINE .)
    WHILE           reduce using rule 97 (func_body_statement -> if NEWLINE .)
    UNTIL           reduce using rule 97 (func_body_statement -> if NEWLINE .)
    IFLESS          reduce using rule 97 (func_body_statement -> if NEWLINE .)
    IFNLESS         reduce using rule 97 (func_body_statement -> if NEWLINE .)
    IFZERO          reduce using rule 97 (func_body_statement -> if NEWLINE .)
    IFNZERO         reduce using rule 97 (func_body_statement -> if NEWLINE .)
    IFHIGH          reduce using rule 97 (func_body_statement -> if NEWLINE .)
    IFNHIGH         reduce using rule 97 (func_body_statement -> if NEWLINE .)
    IFEQUAL         reduce using rule 97 (func_body_statement -> if NEWLINE .)
    COMMAND         reduce using rule 97 (func_body_statement -> if NEWLINE .)
    CALL            reduce using rule 97 (func_body_statement -> if NEWLINE .)
    RETURN          reduce using rule 97 (func_body_statement -> if NEWLINE .)
    NAME            reduce using rule 97 (func_body_statement -> if NEWLINE .)
    PARAM           reduce using rule 97 (func_body_statement -> if NEWLINE .)
    NEWLINE         reduce using rule 97 (func_body_statement -> if NEWLINE .)


state 256

    (98) func_body_statement -> command NEWLINE .

    ENDFUNC         reduce using rule 98 (func_body_statement -> command NEWLINE .)
    error           reduce using rule 98 (func_body_statement -> command NEWLINE .)
    VARIANT         reduce using rule 98 (func_body_statement -> command NEWLINE .)
    CONVERT         reduce using rule 98 (func_body_statement -> command NEWLINE .)
    DIGITIZE        reduce using rule 98 (func_body_statement -> command NEWLINE .)
    WHILE           reduce using rule 98 (func_body_statement -> command NEWLINE .)
    UNTIL           reduce using rule 98 (func_body_statement -> command NEWLINE .)
    IFLESS          reduce using rule 98 (func_body_statement -> command NEWLINE .)
    IFNLESS         reduce using rule 98 (func_body_statement -> command NEWLINE .)
    IFZERO          reduce using rule 98 (func_body_statement -> command NEWLINE .)
    IFNZERO         reduce using rule 98 (func_body_statement -> command NEWLINE .)
    IFHIGH          reduce using rule 98 (func_body_statement -> command NEWLINE .)
    IFNHIGH         reduce using rule 98 (func_body_statement -> command NEWLINE .)
    IFEQUAL         reduce using rule 98 (func_body_statement -> command NEWLINE .)
    COMMAND         reduce using rule 98 (func_body_statement -> command NEWLINE .)
    CALL            reduce using rule 98 (func_body_statement -> command NEWLINE .)
    RETURN          reduce using rule 98 (func_body_statement -> command NEWLINE .)
    NAME            reduce using rule 98 (func_body_statement -> command NEWLINE .)
    PARAM           reduce using rule 98 (func_body_statement -> command NEWLINE .)
    NEWLINE         reduce using rule 98 (func_body_statement -> command NEWLINE .)


state 257

    (99) func_body_statement -> function_call NEWLINE .

    ENDFUNC         reduce using rule 99 (func_body_statement -> function_call NEWLINE .)
    error           reduce using rule 99 (func_body_statement -> function_call NEWLINE .)
    VARIANT         reduce using rule 99 (func_body_statement -> function_call NEWLINE .)
    CONVERT         reduce using rule 99 (func_body_statement -> function_call NEWLINE .)
    DIGITIZE        reduce using rule 99 (func_body_statement -> function_call NEWLINE .)
    WHILE           reduce using rule 99 (func_body_statement -> function_call NEWLINE .)
    UNTIL           reduce using rule 99 (func_body_statement -> function_call NEWLINE .)
    IFLESS          reduce using rule 99 (func_body_statement -> function_call NEWLINE .)
    IFNLESS         reduce using rule 99 (func_body_statement -> function_call NEWLINE .)
    IFZERO          reduce using rule 99 (func_body_statement -> function_call NEWLINE .)
    IFNZERO         reduce using rule 99 (func_body_statement -> function_call NEWLINE .)
    IFHIGH          reduce using rule 99 (func_body_statement -> function_call NEWLINE .)
    IFNHIGH         reduce using rule 99 (func_body_statement -> function_call NEWLINE .)
    IFEQUAL         reduce using rule 99 (func_body_statement -> function_call NEWLINE .)
    COMMAND         reduce using rule 99 (func_body_statement -> function_call NEWLINE .)
    CALL            reduce using rule 99 (func_body_statement -> function_call NEWLINE .)
    RETURN          reduce using rule 99 (func_body_statement -> function_call NEWLINE .)
    NAME            reduce using rule 99 (func_body_statement -> function_call NEWLINE .)
    PARAM           reduce using rule 99 (func_body_statement -> function_call NEWLINE .)
    NEWLINE         reduce using rule 99 (func_body_statement -> function_call NEWLINE .)


state 258

    (100) func_body_statement -> return NEWLINE .

    ENDFUNC         reduce using rule 100 (func_body_statement -> return NEWLINE .)
    error           reduce using rule 100 (func_body_statement -> return NEWLINE .)
    VARIANT         reduce using rule 100 (func_body_statement -> return NEWLINE .)
    CONVERT         reduce using rule 100 (func_body_statement -> return NEWLINE .)
    DIGITIZE        reduce using rule 100 (func_body_statement -> return NEWLINE .)
    WHILE           reduce using rule 100 (func_body_statement -> return NEWLINE .)
    UNTIL           reduce using rule 100 (func_body_statement -> return NEWLINE .)
    IFLESS          reduce using rule 100 (func_body_statement -> return NEWLINE .)
    IFNLESS         reduce using rule 100 (func_body_statement -> return NEWLINE .)
    IFZERO          reduce using rule 100 (func_body_statement -> return NEWLINE .)
    IFNZERO         reduce using rule 100 (func_body_statement -> return NEWLINE .)
    IFHIGH          reduce using rule 100 (func_body_statement -> return NEWLINE .)
    IFNHIGH         reduce using rule 100 (func_body_statement -> return NEWLINE .)
    IFEQUAL         reduce using rule 100 (func_body_statement -> return NEWLINE .)
    COMMAND         reduce using rule 100 (func_body_statement -> return NEWLINE .)
    CALL            reduce using rule 100 (func_body_statement -> return NEWLINE .)
    RETURN          reduce using rule 100 (func_body_statement -> return NEWLINE .)
    NAME            reduce using rule 100 (func_body_statement -> return NEWLINE .)
    PARAM           reduce using rule 100 (func_body_statement -> return NEWLINE .)
    NEWLINE         reduce using rule 100 (func_body_statement -> return NEWLINE .)


state 259

    (159) return -> return error .

    NEWLINE         reduce using rule 159 (return -> return error .)
    error           reduce using rule 159 (return -> return error .)


state 260

    (104) return -> RETURN expression .
    (55) math_expression -> expression . PLUS expression

    NEWLINE         reduce using rule 104 (return -> RETURN expression .)
    error           reduce using rule 104 (return -> RETURN expression .)
    PLUS            shift and go to state 164


state 261

    (158) return -> RETURN error .

    NEWLINE         reduce using rule 158 (return -> RETURN error .)
    error           reduce using rule 158 (return -> RETURN error .)


state 262

    (156) function -> FUNC error NEWLINE func_body_statements error .
    (114) assignment -> error . ASSIGNMENT expression

    NEWLINE         reduce using rule 156 (function -> FUNC error NEWLINE func_body_statements error .)
    error           reduce using rule 156 (function -> FUNC error NEWLINE func_body_statements error .)
    ASSIGNMENT      shift and go to state 57


state 263

    (154) function -> FUNC error NEWLINE func_body_statements ENDFUNC .

    NEWLINE         reduce using rule 154 (function -> FUNC error NEWLINE func_body_statements ENDFUNC .)
    error           reduce using rule 154 (function -> FUNC error NEWLINE func_body_statements ENDFUNC .)


state 264

    (23) varsize -> LSQBRACKET decimal_expression COMMA decimal_expression . RSQBRACKET
    (59) dec_math_expression -> decimal_expression . PLUS decimal_expression

    RSQBRACKET      shift and go to state 288
    PLUS            shift and go to state 135


state 265

    (110) varsize -> LSQBRACKET decimal_expression COMMA error . RSQBRACKET

    RSQBRACKET      shift and go to state 289


state 266

    (111) varsize -> LSQBRACKET error COMMA error . RSQBRACKET

    RSQBRACKET      shift and go to state 290


state 267

    (109) varsize -> LSQBRACKET error COMMA decimal_expression . RSQBRACKET
    (59) dec_math_expression -> decimal_expression . PLUS decimal_expression

    RSQBRACKET      shift and go to state 291
    PLUS            shift and go to state 135


state 268

    (28) init_list -> LBRACE inits . RBRACE
    (30) inits -> inits . init
    (32) init -> . const_expressions COMMA const_expression SEMICOLON
    (33) init -> . const_expression SEMICOLON
    (34) const_expressions -> . const_expressions COMMA const_expression
    (35) const_expressions -> . const_expression
    (36) const_expression -> . const_math_expression
    (37) const_expression -> . const
    (57) const_math_expression -> . const_expression PLUS const_expression
    (58) const_math_expression -> . MINUS const_expression
    (65) const -> . bool_const
    (66) const -> . decimal_const
    (67) const -> . string_const
    (69) bool_const -> . TRUE
    (70) bool_const -> . FALSE
    (68) decimal_const -> . DECIMAL
    (71) string_const -> . LETTERS

    RBRACE          shift and go to state 292
    MINUS           shift and go to state 275
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    DECIMAL         shift and go to state 83
    LETTERS         shift and go to state 101

    init                           shift and go to state 293
    const_expressions              shift and go to state 271
    const_expression               shift and go to state 272
    const_math_expression          shift and go to state 273
    const                          shift and go to state 274
    bool_const                     shift and go to state 119
    decimal_const                  shift and go to state 120
    string_const                   shift and go to state 121

state 269

    (29) init_list -> LBRACE RBRACE .

    RBRACE          reduce using rule 29 (init_list -> LBRACE RBRACE .)
    LBRACE          reduce using rule 29 (init_list -> LBRACE RBRACE .)


state 270

    (31) inits -> init .

    RBRACE          reduce using rule 31 (inits -> init .)
    MINUS           reduce using rule 31 (inits -> init .)
    TRUE            reduce using rule 31 (inits -> init .)
    FALSE           reduce using rule 31 (inits -> init .)
    DECIMAL         reduce using rule 31 (inits -> init .)
    LETTERS         reduce using rule 31 (inits -> init .)


state 271

    (32) init -> const_expressions . COMMA const_expression SEMICOLON
    (34) const_expressions -> const_expressions . COMMA const_expression

    COMMA           shift and go to state 294


state 272

    (33) init -> const_expression . SEMICOLON
    (35) const_expressions -> const_expression .
    (57) const_math_expression -> const_expression . PLUS const_expression

    SEMICOLON       shift and go to state 295
    COMMA           reduce using rule 35 (const_expressions -> const_expression .)
    PLUS            shift and go to state 296


state 273

    (36) const_expression -> const_math_expression .

    SEMICOLON       reduce using rule 36 (const_expression -> const_math_expression .)
    PLUS            reduce using rule 36 (const_expression -> const_math_expression .)
    COMMA           reduce using rule 36 (const_expression -> const_math_expression .)


state 274

    (37) const_expression -> const .

    SEMICOLON       reduce using rule 37 (const_expression -> const .)
    PLUS            reduce using rule 37 (const_expression -> const .)
    COMMA           reduce using rule 37 (const_expression -> const .)


state 275

    (58) const_math_expression -> MINUS . const_expression
    (36) const_expression -> . const_math_expression
    (37) const_expression -> . const
    (57) const_math_expression -> . const_expression PLUS const_expression
    (58) const_math_expression -> . MINUS const_expression
    (65) const -> . bool_const
    (66) const -> . decimal_const
    (67) const -> . string_const
    (69) bool_const -> . TRUE
    (70) bool_const -> . FALSE
    (68) decimal_const -> . DECIMAL
    (71) string_const -> . LETTERS

    MINUS           shift and go to state 275
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    DECIMAL         shift and go to state 83
    LETTERS         shift and go to state 101

    const_expression               shift and go to state 297
    const_math_expression          shift and go to state 273
    const                          shift and go to state 274
    bool_const                     shift and go to state 119
    decimal_const                  shift and go to state 120
    string_const                   shift and go to state 121

state 276

    (25) initialization -> LBRACE init_lists RBRACE .

    NEWLINE         reduce using rule 25 (initialization -> LBRACE init_lists RBRACE .)
    error           reduce using rule 25 (initialization -> LBRACE init_lists RBRACE .)


state 277

    (26) init_lists -> init_lists init_list .

    RBRACE          reduce using rule 26 (init_lists -> init_lists init_list .)
    LBRACE          reduce using rule 26 (init_lists -> init_lists init_list .)


state 278

    (80) if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements . ENDIF
    (139) if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements . error
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 298
    error           shift and go to state 299
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 279

    (146) if -> IFLESS decimal_expression COMMA decimal_expression statements ENDIF .

    NEWLINE         reduce using rule 146 (if -> IFLESS decimal_expression COMMA decimal_expression statements ENDIF .)
    error           reduce using rule 146 (if -> IFLESS decimal_expression COMMA decimal_expression statements ENDIF .)


state 280

    (81) if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements . ENDIF
    (140) if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements . error
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 300
    error           shift and go to state 301
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 281

    (147) if -> IFNLESS decimal_expression COMMA decimal_expression statements ENDIF .

    NEWLINE         reduce using rule 147 (if -> IFNLESS decimal_expression COMMA decimal_expression statements ENDIF .)
    error           reduce using rule 147 (if -> IFNLESS decimal_expression COMMA decimal_expression statements ENDIF .)


state 282

    (84) if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements . ENDIF
    (143) if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements . error
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 302
    error           shift and go to state 303
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 283

    (150) if -> IFHIGH decimal_expression COMMA decimal_expression statements ENDIF .

    NEWLINE         reduce using rule 150 (if -> IFHIGH decimal_expression COMMA decimal_expression statements ENDIF .)
    error           reduce using rule 150 (if -> IFHIGH decimal_expression COMMA decimal_expression statements ENDIF .)


state 284

    (85) if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements . ENDIF
    (144) if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements . error
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 304
    error           shift and go to state 305
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 285

    (151) if -> IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF .

    NEWLINE         reduce using rule 151 (if -> IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF .)
    error           reduce using rule 151 (if -> IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF .)


state 286

    (86) if -> IFEQUAL string_expression COMMA string_expression NEWLINE statements . ENDIF
    (145) if -> IFEQUAL string_expression COMMA string_expression NEWLINE statements . error
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . function NEWLINE
    (14) statement -> . function_call NEWLINE
    (15) empty -> .
    (16) declaration -> . VARIANT variant
    (17) declaration -> . VARIANT variant ASSIGNMENT initialization
    (105) declaration -> . VARIANT error
    (106) declaration -> . VARIANT variant ASSIGNMENT error
    (107) declaration -> . declaration error
    (72) assignment -> . variant ASSIGNMENT expression
    (113) assignment -> . variant ASSIGNMENT error
    (114) assignment -> . error ASSIGNMENT expression
    (73) convert -> . CONVERT type TO type variant
    (115) convert -> . CONVERT type TO type error
    (116) convert -> . CONVERT type TO error
    (117) convert -> . CONVERT type error
    (118) convert -> . CONVERT error
    (119) convert -> . convert error
    (74) digitize -> . DIGITIZE type variant
    (120) digitize -> . DIGITIZE error
    (121) digitize -> . digitize error
    (78) while -> . WHILE bool_expression NEWLINE statements ENDW
    (124) while -> . WHILE error NEWLINE statements ENDW
    (125) while -> . WHILE bool_expression NEWLINE statements error
    (126) while -> . WHILE bool_expression statements ENDW
    (127) while -> . while error
    (79) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (128) until -> . UNTIL error NEWLINE statements ENDU
    (129) until -> . UNTIL bool_expression NEWLINE statements error
    (130) until -> . UNTIL bool_expression statements ENDU
    (131) until -> . until error
    (80) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (81) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (82) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (83) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (84) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (85) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (86) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF
    (132) if -> . IFLESS error NEWLINE statements ENDIF
    (133) if -> . IFNLESS error NEWLINE statements ENDIF
    (134) if -> . IFZERO error NEWLINE statements ENDIF
    (135) if -> . IFNZERO error NEWLINE statements ENDIF
    (136) if -> . IFHIGH error NEWLINE statements ENDIF
    (137) if -> . IFNHIGH error NEWLINE statements ENDIF
    (138) if -> . IFEQUAL error NEWLINE statements ENDIF
    (139) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (140) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error
    (141) if -> . IFZERO decimal_expression NEWLINE statements error
    (142) if -> . IFNZERO decimal_expression NEWLINE statements error
    (143) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (144) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error
    (145) if -> . IFEQUAL string_expression COMMA string_expression NEWLINE statements error
    (146) if -> . IFLESS decimal_expression COMMA decimal_expression statements ENDIF
    (147) if -> . IFNLESS decimal_expression COMMA decimal_expression statements ENDIF
    (148) if -> . IFZERO decimal_expression statements ENDIF
    (149) if -> . IFNZERO decimal_expression statements ENDIF
    (150) if -> . IFHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (151) if -> . IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF
    (152) if -> . IFEQUAL string_expression COMMA string_expression statements ENDIF
    (153) if -> . if error
    (87) command -> . COMMAND string_expression
    (122) command -> . COMMAND error
    (123) command -> . command error
    (101) function -> . FUNC NAME NEWLINE func_body_statements ENDFUNC
    (154) function -> . FUNC error NEWLINE func_body_statements ENDFUNC
    (155) function -> . FUNC NAME NEWLINE func_body_statements error
    (156) function -> . FUNC error NEWLINE func_body_statements error
    (157) function -> . function error
    (102) function_call -> . CALL NAME expression
    (103) function_call -> . CALL NAME
    (18) variant -> . NAME
    (19) variant -> . NAME varsize
    (20) variant -> . PARAM
    (21) variant -> . PARAM varsize

    ENDIF           shift and go to state 306
    error           shift and go to state 307
    NEWLINE         reduce using rule 15 (empty -> .)
    VARIANT         shift and go to state 15
    CONVERT         shift and go to state 18
    DIGITIZE        shift and go to state 19
    WHILE           shift and go to state 20
    UNTIL           shift and go to state 21
    IFLESS          shift and go to state 22
    IFNLESS         shift and go to state 23
    IFZERO          shift and go to state 24
    IFNZERO         shift and go to state 25
    IFHIGH          shift and go to state 26
    IFNHIGH         shift and go to state 27
    IFEQUAL         shift and go to state 28
    COMMAND         shift and go to state 29
    FUNC            shift and go to state 30
    CALL            shift and go to state 32
    NAME            shift and go to state 31
    PARAM           shift and go to state 33

    statement                      shift and go to state 34
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    function                       shift and go to state 13
    function_call                  shift and go to state 14
    variant                        shift and go to state 16

state 287

    (152) if -> IFEQUAL string_expression COMMA string_expression statements ENDIF .

    NEWLINE         reduce using rule 152 (if -> IFEQUAL string_expression COMMA string_expression statements ENDIF .)
    error           reduce using rule 152 (if -> IFEQUAL string_expression COMMA string_expression statements ENDIF .)


state 288

    (23) varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .

    error           reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    ASSIGNMENT      reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    NEWLINE         reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    PLUS            reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    VARIANT         reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    CONVERT         reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    DIGITIZE        reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    WHILE           reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    UNTIL           reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    IFLESS          reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    IFNLESS         reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    IFZERO          reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    IFNZERO         reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    IFHIGH          reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    IFNHIGH         reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    IFEQUAL         reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    COMMAND         reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    FUNC            reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    CALL            reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    NAME            reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    PARAM           reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    COMMA           reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    RSQBRACKET      reduce using rule 23 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)


state 289

    (110) varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .

    error           reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    ASSIGNMENT      reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    NEWLINE         reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    PLUS            reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    VARIANT         reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    CONVERT         reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    DIGITIZE        reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    WHILE           reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    UNTIL           reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    IFLESS          reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    IFNLESS         reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    IFZERO          reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    IFNZERO         reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    IFHIGH          reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    IFNHIGH         reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    IFEQUAL         reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    COMMAND         reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    FUNC            reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    CALL            reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    NAME            reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    PARAM           reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    COMMA           reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    RSQBRACKET      reduce using rule 110 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)


state 290

    (111) varsize -> LSQBRACKET error COMMA error RSQBRACKET .

    error           reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    ASSIGNMENT      reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    NEWLINE         reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    PLUS            reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    VARIANT         reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    CONVERT         reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    DIGITIZE        reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    WHILE           reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    UNTIL           reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    IFLESS          reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    IFNLESS         reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    IFZERO          reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    IFNZERO         reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    IFHIGH          reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    IFNHIGH         reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    IFEQUAL         reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    COMMAND         reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    FUNC            reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    CALL            reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    NAME            reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    PARAM           reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    COMMA           reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    RSQBRACKET      reduce using rule 111 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)


state 291

    (109) varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .

    error           reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    ASSIGNMENT      reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    NEWLINE         reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    PLUS            reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    VARIANT         reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    CONVERT         reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    DIGITIZE        reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    WHILE           reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    UNTIL           reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    IFLESS          reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    IFNLESS         reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    IFZERO          reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    IFNZERO         reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    IFHIGH          reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    IFNHIGH         reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    IFEQUAL         reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    COMMAND         reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    FUNC            reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    CALL            reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    NAME            reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    PARAM           reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    COMMA           reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    RSQBRACKET      reduce using rule 109 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)


state 292

    (28) init_list -> LBRACE inits RBRACE .

    RBRACE          reduce using rule 28 (init_list -> LBRACE inits RBRACE .)
    LBRACE          reduce using rule 28 (init_list -> LBRACE inits RBRACE .)


state 293

    (30) inits -> inits init .

    RBRACE          reduce using rule 30 (inits -> inits init .)
    MINUS           reduce using rule 30 (inits -> inits init .)
    TRUE            reduce using rule 30 (inits -> inits init .)
    FALSE           reduce using rule 30 (inits -> inits init .)
    DECIMAL         reduce using rule 30 (inits -> inits init .)
    LETTERS         reduce using rule 30 (inits -> inits init .)


state 294

    (32) init -> const_expressions COMMA . const_expression SEMICOLON
    (34) const_expressions -> const_expressions COMMA . const_expression
    (36) const_expression -> . const_math_expression
    (37) const_expression -> . const
    (57) const_math_expression -> . const_expression PLUS const_expression
    (58) const_math_expression -> . MINUS const_expression
    (65) const -> . bool_const
    (66) const -> . decimal_const
    (67) const -> . string_const
    (69) bool_const -> . TRUE
    (70) bool_const -> . FALSE
    (68) decimal_const -> . DECIMAL
    (71) string_const -> . LETTERS

    MINUS           shift and go to state 275
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    DECIMAL         shift and go to state 83
    LETTERS         shift and go to state 101

    const_expression               shift and go to state 308
    const_math_expression          shift and go to state 273
    const                          shift and go to state 274
    bool_const                     shift and go to state 119
    decimal_const                  shift and go to state 120
    string_const                   shift and go to state 121

state 295

    (33) init -> const_expression SEMICOLON .

    RBRACE          reduce using rule 33 (init -> const_expression SEMICOLON .)
    MINUS           reduce using rule 33 (init -> const_expression SEMICOLON .)
    TRUE            reduce using rule 33 (init -> const_expression SEMICOLON .)
    FALSE           reduce using rule 33 (init -> const_expression SEMICOLON .)
    DECIMAL         reduce using rule 33 (init -> const_expression SEMICOLON .)
    LETTERS         reduce using rule 33 (init -> const_expression SEMICOLON .)


state 296

    (57) const_math_expression -> const_expression PLUS . const_expression
    (36) const_expression -> . const_math_expression
    (37) const_expression -> . const
    (57) const_math_expression -> . const_expression PLUS const_expression
    (58) const_math_expression -> . MINUS const_expression
    (65) const -> . bool_const
    (66) const -> . decimal_const
    (67) const -> . string_const
    (69) bool_const -> . TRUE
    (70) bool_const -> . FALSE
    (68) decimal_const -> . DECIMAL
    (71) string_const -> . LETTERS

    MINUS           shift and go to state 275
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    DECIMAL         shift and go to state 83
    LETTERS         shift and go to state 101

    const_expression               shift and go to state 309
    const_math_expression          shift and go to state 273
    const                          shift and go to state 274
    bool_const                     shift and go to state 119
    decimal_const                  shift and go to state 120
    string_const                   shift and go to state 121

state 297

    (58) const_math_expression -> MINUS const_expression .
    (57) const_math_expression -> const_expression . PLUS const_expression

  ! shift/reduce conflict for PLUS resolved as shift
    SEMICOLON       reduce using rule 58 (const_math_expression -> MINUS const_expression .)
    COMMA           reduce using rule 58 (const_math_expression -> MINUS const_expression .)
    PLUS            shift and go to state 296

  ! PLUS            [ reduce using rule 58 (const_math_expression -> MINUS const_expression .) ]


state 298

    (80) if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 80 (if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)
    error           reduce using rule 80 (if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)


state 299

    (139) if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error .
    (114) assignment -> error . ASSIGNMENT expression

    NEWLINE         reduce using rule 139 (if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error .)
    error           reduce using rule 139 (if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error .)
    ASSIGNMENT      shift and go to state 57


state 300

    (81) if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 81 (if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)
    error           reduce using rule 81 (if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)


state 301

    (140) if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error .
    (114) assignment -> error . ASSIGNMENT expression

    NEWLINE         reduce using rule 140 (if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error .)
    error           reduce using rule 140 (if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error .)
    ASSIGNMENT      shift and go to state 57


state 302

    (84) if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 84 (if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)
    error           reduce using rule 84 (if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)


state 303

    (143) if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error .
    (114) assignment -> error . ASSIGNMENT expression

    NEWLINE         reduce using rule 143 (if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error .)
    error           reduce using rule 143 (if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error .)
    ASSIGNMENT      shift and go to state 57


state 304

    (85) if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 85 (if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)
    error           reduce using rule 85 (if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)


state 305

    (144) if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error .
    (114) assignment -> error . ASSIGNMENT expression

    NEWLINE         reduce using rule 144 (if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error .)
    error           reduce using rule 144 (if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error .)
    ASSIGNMENT      shift and go to state 57


state 306

    (86) if -> IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 86 (if -> IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF .)
    error           reduce using rule 86 (if -> IFEQUAL string_expression COMMA string_expression NEWLINE statements ENDIF .)


state 307

    (145) if -> IFEQUAL string_expression COMMA string_expression NEWLINE statements error .
    (114) assignment -> error . ASSIGNMENT expression

    NEWLINE         reduce using rule 145 (if -> IFEQUAL string_expression COMMA string_expression NEWLINE statements error .)
    error           reduce using rule 145 (if -> IFEQUAL string_expression COMMA string_expression NEWLINE statements error .)
    ASSIGNMENT      shift and go to state 57


state 308

    (32) init -> const_expressions COMMA const_expression . SEMICOLON
    (34) const_expressions -> const_expressions COMMA const_expression .
    (57) const_math_expression -> const_expression . PLUS const_expression

    SEMICOLON       shift and go to state 310
    COMMA           reduce using rule 34 (const_expressions -> const_expressions COMMA const_expression .)
    PLUS            shift and go to state 296


state 309

    (57) const_math_expression -> const_expression PLUS const_expression .
    (57) const_math_expression -> const_expression . PLUS const_expression

  ! shift/reduce conflict for PLUS resolved as shift
    SEMICOLON       reduce using rule 57 (const_math_expression -> const_expression PLUS const_expression .)
    COMMA           reduce using rule 57 (const_math_expression -> const_expression PLUS const_expression .)
    PLUS            shift and go to state 296

  ! PLUS            [ reduce using rule 57 (const_math_expression -> const_expression PLUS const_expression .) ]


state 310

    (32) init -> const_expressions COMMA const_expression SEMICOLON .

    RBRACE          reduce using rule 32 (init -> const_expressions COMMA const_expression SEMICOLON .)
    MINUS           reduce using rule 32 (init -> const_expressions COMMA const_expression SEMICOLON .)
    TRUE            reduce using rule 32 (init -> const_expressions COMMA const_expression SEMICOLON .)
    FALSE           reduce using rule 32 (init -> const_expressions COMMA const_expression SEMICOLON .)
    DECIMAL         reduce using rule 32 (init -> const_expressions COMMA const_expression SEMICOLON .)
    LETTERS         reduce using rule 32 (init -> const_expressions COMMA const_expression SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 65 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 74 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 86 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 88 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for error in state 106 resolved as shift
WARNING: shift/reduce conflict for NAME in state 108 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 108 resolved as shift
WARNING: shift/reduce conflict for CALL in state 108 resolved as shift
WARNING: shift/reduce conflict for COMMAND in state 108 resolved as shift
WARNING: shift/reduce conflict for error in state 109 resolved as shift
WARNING: shift/reduce conflict for error in state 117 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 137 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 153 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 160 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 165 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 170 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 175 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 176 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 178 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 186 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 188 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 190 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 191 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 215 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 297 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 309 resolved as shift
