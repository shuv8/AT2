Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CALL
    ENDFUNC
    FUNC
    RETURN

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> empty NEWLINE
Rule 5     statement -> declaration NEWLINE
Rule 6     statement -> assignment NEWLINE
Rule 7     statement -> convert NEWLINE
Rule 8     statement -> digitize NEWLINE
Rule 9     statement -> while NEWLINE
Rule 10    statement -> until NEWLINE
Rule 11    statement -> if NEWLINE
Rule 12    statement -> command NEWLINE
Rule 13    statement -> statement_error NEWLINE
Rule 14    empty -> <empty>
Rule 15    declaration -> VARIANT variant
Rule 16    declaration -> VARIANT variant ASSIGNMENT initialization
Rule 17    variant -> NAME
Rule 18    variant -> NAME varsize
Rule 19    variant -> PARAM
Rule 20    variant -> PARAM varsize
Rule 21    varsize -> LSQBRACKET decimal_expression RSQBRACKET
Rule 22    varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET
Rule 23    initialization -> LBRACE init_lists RBRACE
Rule 24    init_lists -> init_lists init_list
Rule 25    init_lists -> init_list
Rule 26    init_list -> LBRACE inits RBRACE
Rule 27    init_list -> LBRACE RBRACE
Rule 28    inits -> inits init
Rule 29    inits -> init
Rule 30    init -> const_expressions COMMA const_expression SEMICOLON
Rule 31    init -> const_expression SEMICOLON
Rule 32    const_expressions -> const_expressions COMMA const_expression
Rule 33    const_expressions -> const_expression
Rule 34    const_expression -> const_math_expression
Rule 35    const_expression -> const
Rule 36    expression -> math_expression
Rule 37    expression -> const
Rule 38    expression -> variant
Rule 39    decimal_expression -> dec_math_expression
Rule 40    decimal_expression -> decimal_const
Rule 41    decimal_expression -> variant
Rule 42    bool_expression -> bool_math_expression
Rule 43    bool_expression -> bool_const
Rule 44    bool_expression -> variant
Rule 45    string_expression -> string_math_expression
Rule 46    string_expression -> string_const
Rule 47    string_expression -> variant
Rule 48    math_expression -> expression PLUS expression
Rule 49    math_expression -> MINUS expression
Rule 50    const_math_expression -> const_expression PLUS const_expression
Rule 51    const_math_expression -> MINUS const_expression
Rule 52    dec_math_expression -> decimal_expression PLUS decimal_expression
Rule 53    dec_math_expression -> MINUS decimal_expression
Rule 54    bool_math_expression -> bool_expression PLUS bool_expression
Rule 55    bool_math_expression -> MINUS bool_expression
Rule 56    string_math_expression -> string_expression PLUS string_expression
Rule 57    string_math_expression -> MINUS string_expression
Rule 58    const -> TRUE
Rule 59    const -> FALSE
Rule 60    const -> DECIMAL
Rule 61    const -> LETTERS
Rule 62    decimal_const -> DECIMAL
Rule 63    bool_const -> TRUE
Rule 64    bool_const -> FALSE
Rule 65    string_const -> LETTERS
Rule 66    assignment -> variant ASSIGNMENT expression
Rule 67    convert -> CONVERT type TO type variant
Rule 68    digitize -> DIGITIZE variant
Rule 69    type -> BOOL
Rule 70    type -> DIGIT
Rule 71    type -> STRING
Rule 72    while -> WHILE bool_expression NEWLINE statements ENDW
Rule 73    until -> UNTIL bool_expression NEWLINE statements ENDU
Rule 74    if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
Rule 75    if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
Rule 76    if -> IFZERO decimal_expression NEWLINE statements ENDIF
Rule 77    if -> IFNZERO decimal_expression NEWLINE statements ENDIF
Rule 78    if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
Rule 79    if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
Rule 80    command -> COMMAND string_expression
Rule 81    declaration -> VARIANT error
Rule 82    declaration -> VARIANT variant ASSIGNMENT error
Rule 83    declaration -> declaration error
Rule 84    varsize -> LSQBRACKET error RSQBRACKET
Rule 85    varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET
Rule 86    varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET
Rule 87    varsize -> LSQBRACKET error COMMA error RSQBRACKET
Rule 88    varsize -> varsize error
Rule 89    assignment -> variant ASSIGNMENT error
Rule 90    convert -> CONVERT type TO type error
Rule 91    convert -> CONVERT type TO error
Rule 92    convert -> CONVERT type error
Rule 93    convert -> CONVERT error
Rule 94    convert -> convert error
Rule 95    digitize -> DIGITIZE error
Rule 96    digitize -> digitize error
Rule 97    command -> COMMAND error
Rule 98    command -> command error
Rule 99    statement_error -> error
Rule 100   statement_error -> statement_error error

Terminals, with rules where they appear

ASSIGNMENT           : 16 66 82 89
BOOL                 : 69
CALL                 : 
COMMA                : 22 30 32 74 75 78 79 85 86 87
COMMAND              : 80 97
CONVERT              : 67 90 91 92 93
DECIMAL              : 60 62
DIGIT                : 70
DIGITIZE             : 68 95
ENDFUNC              : 
ENDIF                : 74 75 76 77 78 79
ENDU                 : 73
ENDW                 : 72
FALSE                : 59 64
FUNC                 : 
IFHIGH               : 78
IFLESS               : 74
IFNHIGH              : 79
IFNLESS              : 75
IFNZERO              : 77
IFZERO               : 76
LBRACE               : 23 26 27
LETTERS              : 61 65
LSQBRACKET           : 21 22 84 85 86 87
MINUS                : 49 51 53 55 57
NAME                 : 17 18
NEWLINE              : 4 5 6 7 8 9 10 11 12 13 72 73 74 75 76 77 78 79
PARAM                : 19 20
PLUS                 : 48 50 52 54 56
RBRACE               : 23 26 27
RETURN               : 
RSQBRACKET           : 21 22 84 85 86 87
SEMICOLON            : 30 31
STRING               : 71
TO                   : 67 90 91
TRUE                 : 58 63
UNTIL                : 73
VARIANT              : 15 16 81 82
WHILE                : 72
error                : 81 82 83 84 85 86 87 87 88 89 90 91 92 93 94 95 96 97 98 99 100

Nonterminals, with rules where they appear

assignment           : 6
bool_const           : 43
bool_expression      : 54 54 55 72 73
bool_math_expression : 42
command              : 12 98
const                : 35 37
const_expression     : 30 31 32 33 50 50 51
const_expressions    : 30 32
const_math_expression : 34
convert              : 7 94
dec_math_expression  : 39
decimal_const        : 40
decimal_expression   : 21 22 22 52 52 53 74 74 75 75 76 77 78 78 79 79 85 86
declaration          : 5 83
digitize             : 8 96
empty                : 4
expression           : 48 48 49 66
if                   : 11
init                 : 28 29
init_list            : 24 25
init_lists           : 23 24
initialization       : 16
inits                : 26 28
math_expression      : 36
program              : 0
statement            : 2 3
statement_error      : 13 100
statements           : 1 2 72 73 74 75 76 77 78 79
string_const         : 46
string_expression    : 56 56 57 80
string_math_expression : 45
type                 : 67 67 90 90 91 92
until                : 10
variant              : 15 16 38 41 44 47 66 67 68 82 89
varsize              : 18 20 88
while                : 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . statement_error NEWLINE
    (14) empty -> .
    (15) declaration -> . VARIANT variant
    (16) declaration -> . VARIANT variant ASSIGNMENT initialization
    (81) declaration -> . VARIANT error
    (82) declaration -> . VARIANT variant ASSIGNMENT error
    (83) declaration -> . declaration error
    (66) assignment -> . variant ASSIGNMENT expression
    (89) assignment -> . variant ASSIGNMENT error
    (67) convert -> . CONVERT type TO type variant
    (90) convert -> . CONVERT type TO type error
    (91) convert -> . CONVERT type TO error
    (92) convert -> . CONVERT type error
    (93) convert -> . CONVERT error
    (94) convert -> . convert error
    (68) digitize -> . DIGITIZE variant
    (95) digitize -> . DIGITIZE error
    (96) digitize -> . digitize error
    (72) while -> . WHILE bool_expression NEWLINE statements ENDW
    (73) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (74) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (75) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (76) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (77) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) command -> . COMMAND string_expression
    (97) command -> . COMMAND error
    (98) command -> . command error
    (99) statement_error -> . error
    (100) statement_error -> . statement_error error
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    NEWLINE         reduce using rule 14 (empty -> .)
    VARIANT         shift and go to state 14
    CONVERT         shift and go to state 17
    DIGITIZE        shift and go to state 18
    WHILE           shift and go to state 19
    UNTIL           shift and go to state 20
    IFLESS          shift and go to state 21
    IFNLESS         shift and go to state 22
    IFZERO          shift and go to state 23
    IFNZERO         shift and go to state 24
    IFHIGH          shift and go to state 25
    IFNHIGH         shift and go to state 26
    COMMAND         shift and go to state 27
    error           shift and go to state 16
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    statement_error                shift and go to state 13
    variant                        shift and go to state 15

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . statement_error NEWLINE
    (14) empty -> .
    (15) declaration -> . VARIANT variant
    (16) declaration -> . VARIANT variant ASSIGNMENT initialization
    (81) declaration -> . VARIANT error
    (82) declaration -> . VARIANT variant ASSIGNMENT error
    (83) declaration -> . declaration error
    (66) assignment -> . variant ASSIGNMENT expression
    (89) assignment -> . variant ASSIGNMENT error
    (67) convert -> . CONVERT type TO type variant
    (90) convert -> . CONVERT type TO type error
    (91) convert -> . CONVERT type TO error
    (92) convert -> . CONVERT type error
    (93) convert -> . CONVERT error
    (94) convert -> . convert error
    (68) digitize -> . DIGITIZE variant
    (95) digitize -> . DIGITIZE error
    (96) digitize -> . digitize error
    (72) while -> . WHILE bool_expression NEWLINE statements ENDW
    (73) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (74) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (75) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (76) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (77) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) command -> . COMMAND string_expression
    (97) command -> . COMMAND error
    (98) command -> . command error
    (99) statement_error -> . error
    (100) statement_error -> . statement_error error
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    $end            reduce using rule 1 (program -> statements .)
    NEWLINE         reduce using rule 14 (empty -> .)
    VARIANT         shift and go to state 14
    CONVERT         shift and go to state 17
    DIGITIZE        shift and go to state 18
    WHILE           shift and go to state 19
    UNTIL           shift and go to state 20
    IFLESS          shift and go to state 21
    IFNLESS         shift and go to state 22
    IFZERO          shift and go to state 23
    IFNZERO         shift and go to state 24
    IFHIGH          shift and go to state 25
    IFNHIGH         shift and go to state 26
    COMMAND         shift and go to state 27
    error           shift and go to state 16
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    statement                      shift and go to state 30
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    statement_error                shift and go to state 13
    variant                        shift and go to state 15

state 3

    (3) statements -> statement .

    VARIANT         reduce using rule 3 (statements -> statement .)
    CONVERT         reduce using rule 3 (statements -> statement .)
    DIGITIZE        reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    UNTIL           reduce using rule 3 (statements -> statement .)
    IFLESS          reduce using rule 3 (statements -> statement .)
    IFNLESS         reduce using rule 3 (statements -> statement .)
    IFZERO          reduce using rule 3 (statements -> statement .)
    IFNZERO         reduce using rule 3 (statements -> statement .)
    IFHIGH          reduce using rule 3 (statements -> statement .)
    IFNHIGH         reduce using rule 3 (statements -> statement .)
    COMMAND         reduce using rule 3 (statements -> statement .)
    error           reduce using rule 3 (statements -> statement .)
    NAME            reduce using rule 3 (statements -> statement .)
    PARAM           reduce using rule 3 (statements -> statement .)
    NEWLINE         reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    ENDW            reduce using rule 3 (statements -> statement .)
    ENDU            reduce using rule 3 (statements -> statement .)
    ENDIF           reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> empty . NEWLINE

    NEWLINE         shift and go to state 31


state 5

    (5) statement -> declaration . NEWLINE
    (83) declaration -> declaration . error

    NEWLINE         shift and go to state 32
    error           shift and go to state 33


state 6

    (6) statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 34


state 7

    (7) statement -> convert . NEWLINE
    (94) convert -> convert . error

    NEWLINE         shift and go to state 35
    error           shift and go to state 36


state 8

    (8) statement -> digitize . NEWLINE
    (96) digitize -> digitize . error

    NEWLINE         shift and go to state 37
    error           shift and go to state 38


state 9

    (9) statement -> while . NEWLINE

    NEWLINE         shift and go to state 39


state 10

    (10) statement -> until . NEWLINE

    NEWLINE         shift and go to state 40


state 11

    (11) statement -> if . NEWLINE

    NEWLINE         shift and go to state 41


state 12

    (12) statement -> command . NEWLINE
    (98) command -> command . error

    NEWLINE         shift and go to state 42
    error           shift and go to state 43


state 13

    (13) statement -> statement_error . NEWLINE
    (100) statement_error -> statement_error . error

    NEWLINE         shift and go to state 44
    error           shift and go to state 45


state 14

    (15) declaration -> VARIANT . variant
    (16) declaration -> VARIANT . variant ASSIGNMENT initialization
    (81) declaration -> VARIANT . error
    (82) declaration -> VARIANT . variant ASSIGNMENT error
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    error           shift and go to state 47
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    variant                        shift and go to state 46

state 15

    (66) assignment -> variant . ASSIGNMENT expression
    (89) assignment -> variant . ASSIGNMENT error

    ASSIGNMENT      shift and go to state 48


state 16

    (99) statement_error -> error .

    NEWLINE         reduce using rule 99 (statement_error -> error .)
    error           reduce using rule 99 (statement_error -> error .)


state 17

    (67) convert -> CONVERT . type TO type variant
    (90) convert -> CONVERT . type TO type error
    (91) convert -> CONVERT . type TO error
    (92) convert -> CONVERT . type error
    (93) convert -> CONVERT . error
    (69) type -> . BOOL
    (70) type -> . DIGIT
    (71) type -> . STRING

    error           shift and go to state 50
    BOOL            shift and go to state 51
    DIGIT           shift and go to state 52
    STRING          shift and go to state 53

    type                           shift and go to state 49

state 18

    (68) digitize -> DIGITIZE . variant
    (95) digitize -> DIGITIZE . error
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    error           shift and go to state 55
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    variant                        shift and go to state 54

state 19

    (72) while -> WHILE . bool_expression NEWLINE statements ENDW
    (42) bool_expression -> . bool_math_expression
    (43) bool_expression -> . bool_const
    (44) bool_expression -> . variant
    (54) bool_math_expression -> . bool_expression PLUS bool_expression
    (55) bool_math_expression -> . MINUS bool_expression
    (63) bool_const -> . TRUE
    (64) bool_const -> . FALSE
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    MINUS           shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    bool_expression                shift and go to state 56
    bool_math_expression           shift and go to state 57
    bool_const                     shift and go to state 58
    variant                        shift and go to state 59

state 20

    (73) until -> UNTIL . bool_expression NEWLINE statements ENDU
    (42) bool_expression -> . bool_math_expression
    (43) bool_expression -> . bool_const
    (44) bool_expression -> . variant
    (54) bool_math_expression -> . bool_expression PLUS bool_expression
    (55) bool_math_expression -> . MINUS bool_expression
    (63) bool_const -> . TRUE
    (64) bool_const -> . FALSE
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    MINUS           shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    bool_expression                shift and go to state 63
    bool_math_expression           shift and go to state 57
    bool_const                     shift and go to state 58
    variant                        shift and go to state 59

state 21

    (74) if -> IFLESS . decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (39) decimal_expression -> . dec_math_expression
    (40) decimal_expression -> . decimal_const
    (41) decimal_expression -> . variant
    (52) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (53) dec_math_expression -> . MINUS decimal_expression
    (62) decimal_const -> . DECIMAL
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    MINUS           shift and go to state 68
    DECIMAL         shift and go to state 69
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    decimal_expression             shift and go to state 64
    dec_math_expression            shift and go to state 65
    decimal_const                  shift and go to state 66
    variant                        shift and go to state 67

state 22

    (75) if -> IFNLESS . decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (39) decimal_expression -> . dec_math_expression
    (40) decimal_expression -> . decimal_const
    (41) decimal_expression -> . variant
    (52) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (53) dec_math_expression -> . MINUS decimal_expression
    (62) decimal_const -> . DECIMAL
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    MINUS           shift and go to state 68
    DECIMAL         shift and go to state 69
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    decimal_expression             shift and go to state 70
    dec_math_expression            shift and go to state 65
    decimal_const                  shift and go to state 66
    variant                        shift and go to state 67

state 23

    (76) if -> IFZERO . decimal_expression NEWLINE statements ENDIF
    (39) decimal_expression -> . dec_math_expression
    (40) decimal_expression -> . decimal_const
    (41) decimal_expression -> . variant
    (52) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (53) dec_math_expression -> . MINUS decimal_expression
    (62) decimal_const -> . DECIMAL
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    MINUS           shift and go to state 68
    DECIMAL         shift and go to state 69
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    decimal_expression             shift and go to state 71
    dec_math_expression            shift and go to state 65
    decimal_const                  shift and go to state 66
    variant                        shift and go to state 67

state 24

    (77) if -> IFNZERO . decimal_expression NEWLINE statements ENDIF
    (39) decimal_expression -> . dec_math_expression
    (40) decimal_expression -> . decimal_const
    (41) decimal_expression -> . variant
    (52) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (53) dec_math_expression -> . MINUS decimal_expression
    (62) decimal_const -> . DECIMAL
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    MINUS           shift and go to state 68
    DECIMAL         shift and go to state 69
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    decimal_expression             shift and go to state 72
    dec_math_expression            shift and go to state 65
    decimal_const                  shift and go to state 66
    variant                        shift and go to state 67

state 25

    (78) if -> IFHIGH . decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (39) decimal_expression -> . dec_math_expression
    (40) decimal_expression -> . decimal_const
    (41) decimal_expression -> . variant
    (52) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (53) dec_math_expression -> . MINUS decimal_expression
    (62) decimal_const -> . DECIMAL
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    MINUS           shift and go to state 68
    DECIMAL         shift and go to state 69
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    decimal_expression             shift and go to state 73
    dec_math_expression            shift and go to state 65
    decimal_const                  shift and go to state 66
    variant                        shift and go to state 67

state 26

    (79) if -> IFNHIGH . decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (39) decimal_expression -> . dec_math_expression
    (40) decimal_expression -> . decimal_const
    (41) decimal_expression -> . variant
    (52) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (53) dec_math_expression -> . MINUS decimal_expression
    (62) decimal_const -> . DECIMAL
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    MINUS           shift and go to state 68
    DECIMAL         shift and go to state 69
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    decimal_expression             shift and go to state 74
    dec_math_expression            shift and go to state 65
    decimal_const                  shift and go to state 66
    variant                        shift and go to state 67

state 27

    (80) command -> COMMAND . string_expression
    (97) command -> COMMAND . error
    (45) string_expression -> . string_math_expression
    (46) string_expression -> . string_const
    (47) string_expression -> . variant
    (56) string_math_expression -> . string_expression PLUS string_expression
    (57) string_math_expression -> . MINUS string_expression
    (65) string_const -> . LETTERS
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    error           shift and go to state 76
    MINUS           shift and go to state 80
    LETTERS         shift and go to state 81
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    string_expression              shift and go to state 75
    string_math_expression         shift and go to state 77
    string_const                   shift and go to state 78
    variant                        shift and go to state 79

state 28

    (17) variant -> NAME .
    (18) variant -> NAME . varsize
    (21) varsize -> . LSQBRACKET decimal_expression RSQBRACKET
    (22) varsize -> . LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET
    (84) varsize -> . LSQBRACKET error RSQBRACKET
    (85) varsize -> . LSQBRACKET error COMMA decimal_expression RSQBRACKET
    (86) varsize -> . LSQBRACKET decimal_expression COMMA error RSQBRACKET
    (87) varsize -> . LSQBRACKET error COMMA error RSQBRACKET
    (88) varsize -> . varsize error

    ASSIGNMENT      reduce using rule 17 (variant -> NAME .)
    NEWLINE         reduce using rule 17 (variant -> NAME .)
    error           reduce using rule 17 (variant -> NAME .)
    PLUS            reduce using rule 17 (variant -> NAME .)
    COMMA           reduce using rule 17 (variant -> NAME .)
    RSQBRACKET      reduce using rule 17 (variant -> NAME .)
    LSQBRACKET      shift and go to state 83

    varsize                        shift and go to state 82

state 29

    (19) variant -> PARAM .
    (20) variant -> PARAM . varsize
    (21) varsize -> . LSQBRACKET decimal_expression RSQBRACKET
    (22) varsize -> . LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET
    (84) varsize -> . LSQBRACKET error RSQBRACKET
    (85) varsize -> . LSQBRACKET error COMMA decimal_expression RSQBRACKET
    (86) varsize -> . LSQBRACKET decimal_expression COMMA error RSQBRACKET
    (87) varsize -> . LSQBRACKET error COMMA error RSQBRACKET
    (88) varsize -> . varsize error

    ASSIGNMENT      reduce using rule 19 (variant -> PARAM .)
    NEWLINE         reduce using rule 19 (variant -> PARAM .)
    error           reduce using rule 19 (variant -> PARAM .)
    PLUS            reduce using rule 19 (variant -> PARAM .)
    COMMA           reduce using rule 19 (variant -> PARAM .)
    RSQBRACKET      reduce using rule 19 (variant -> PARAM .)
    LSQBRACKET      shift and go to state 83

    varsize                        shift and go to state 84

state 30

    (2) statements -> statements statement .

    VARIANT         reduce using rule 2 (statements -> statements statement .)
    CONVERT         reduce using rule 2 (statements -> statements statement .)
    DIGITIZE        reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    UNTIL           reduce using rule 2 (statements -> statements statement .)
    IFLESS          reduce using rule 2 (statements -> statements statement .)
    IFNLESS         reduce using rule 2 (statements -> statements statement .)
    IFZERO          reduce using rule 2 (statements -> statements statement .)
    IFNZERO         reduce using rule 2 (statements -> statements statement .)
    IFHIGH          reduce using rule 2 (statements -> statements statement .)
    IFNHIGH         reduce using rule 2 (statements -> statements statement .)
    COMMAND         reduce using rule 2 (statements -> statements statement .)
    error           reduce using rule 2 (statements -> statements statement .)
    NAME            reduce using rule 2 (statements -> statements statement .)
    PARAM           reduce using rule 2 (statements -> statements statement .)
    NEWLINE         reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    ENDW            reduce using rule 2 (statements -> statements statement .)
    ENDU            reduce using rule 2 (statements -> statements statement .)
    ENDIF           reduce using rule 2 (statements -> statements statement .)


state 31

    (4) statement -> empty NEWLINE .

    VARIANT         reduce using rule 4 (statement -> empty NEWLINE .)
    CONVERT         reduce using rule 4 (statement -> empty NEWLINE .)
    DIGITIZE        reduce using rule 4 (statement -> empty NEWLINE .)
    WHILE           reduce using rule 4 (statement -> empty NEWLINE .)
    UNTIL           reduce using rule 4 (statement -> empty NEWLINE .)
    IFLESS          reduce using rule 4 (statement -> empty NEWLINE .)
    IFNLESS         reduce using rule 4 (statement -> empty NEWLINE .)
    IFZERO          reduce using rule 4 (statement -> empty NEWLINE .)
    IFNZERO         reduce using rule 4 (statement -> empty NEWLINE .)
    IFHIGH          reduce using rule 4 (statement -> empty NEWLINE .)
    IFNHIGH         reduce using rule 4 (statement -> empty NEWLINE .)
    COMMAND         reduce using rule 4 (statement -> empty NEWLINE .)
    error           reduce using rule 4 (statement -> empty NEWLINE .)
    NAME            reduce using rule 4 (statement -> empty NEWLINE .)
    PARAM           reduce using rule 4 (statement -> empty NEWLINE .)
    NEWLINE         reduce using rule 4 (statement -> empty NEWLINE .)
    $end            reduce using rule 4 (statement -> empty NEWLINE .)
    ENDW            reduce using rule 4 (statement -> empty NEWLINE .)
    ENDU            reduce using rule 4 (statement -> empty NEWLINE .)
    ENDIF           reduce using rule 4 (statement -> empty NEWLINE .)


state 32

    (5) statement -> declaration NEWLINE .

    VARIANT         reduce using rule 5 (statement -> declaration NEWLINE .)
    CONVERT         reduce using rule 5 (statement -> declaration NEWLINE .)
    DIGITIZE        reduce using rule 5 (statement -> declaration NEWLINE .)
    WHILE           reduce using rule 5 (statement -> declaration NEWLINE .)
    UNTIL           reduce using rule 5 (statement -> declaration NEWLINE .)
    IFLESS          reduce using rule 5 (statement -> declaration NEWLINE .)
    IFNLESS         reduce using rule 5 (statement -> declaration NEWLINE .)
    IFZERO          reduce using rule 5 (statement -> declaration NEWLINE .)
    IFNZERO         reduce using rule 5 (statement -> declaration NEWLINE .)
    IFHIGH          reduce using rule 5 (statement -> declaration NEWLINE .)
    IFNHIGH         reduce using rule 5 (statement -> declaration NEWLINE .)
    COMMAND         reduce using rule 5 (statement -> declaration NEWLINE .)
    error           reduce using rule 5 (statement -> declaration NEWLINE .)
    NAME            reduce using rule 5 (statement -> declaration NEWLINE .)
    PARAM           reduce using rule 5 (statement -> declaration NEWLINE .)
    NEWLINE         reduce using rule 5 (statement -> declaration NEWLINE .)
    $end            reduce using rule 5 (statement -> declaration NEWLINE .)
    ENDW            reduce using rule 5 (statement -> declaration NEWLINE .)
    ENDU            reduce using rule 5 (statement -> declaration NEWLINE .)
    ENDIF           reduce using rule 5 (statement -> declaration NEWLINE .)


state 33

    (83) declaration -> declaration error .

    NEWLINE         reduce using rule 83 (declaration -> declaration error .)
    error           reduce using rule 83 (declaration -> declaration error .)


state 34

    (6) statement -> assignment NEWLINE .

    VARIANT         reduce using rule 6 (statement -> assignment NEWLINE .)
    CONVERT         reduce using rule 6 (statement -> assignment NEWLINE .)
    DIGITIZE        reduce using rule 6 (statement -> assignment NEWLINE .)
    WHILE           reduce using rule 6 (statement -> assignment NEWLINE .)
    UNTIL           reduce using rule 6 (statement -> assignment NEWLINE .)
    IFLESS          reduce using rule 6 (statement -> assignment NEWLINE .)
    IFNLESS         reduce using rule 6 (statement -> assignment NEWLINE .)
    IFZERO          reduce using rule 6 (statement -> assignment NEWLINE .)
    IFNZERO         reduce using rule 6 (statement -> assignment NEWLINE .)
    IFHIGH          reduce using rule 6 (statement -> assignment NEWLINE .)
    IFNHIGH         reduce using rule 6 (statement -> assignment NEWLINE .)
    COMMAND         reduce using rule 6 (statement -> assignment NEWLINE .)
    error           reduce using rule 6 (statement -> assignment NEWLINE .)
    NAME            reduce using rule 6 (statement -> assignment NEWLINE .)
    PARAM           reduce using rule 6 (statement -> assignment NEWLINE .)
    NEWLINE         reduce using rule 6 (statement -> assignment NEWLINE .)
    $end            reduce using rule 6 (statement -> assignment NEWLINE .)
    ENDW            reduce using rule 6 (statement -> assignment NEWLINE .)
    ENDU            reduce using rule 6 (statement -> assignment NEWLINE .)
    ENDIF           reduce using rule 6 (statement -> assignment NEWLINE .)


state 35

    (7) statement -> convert NEWLINE .

    VARIANT         reduce using rule 7 (statement -> convert NEWLINE .)
    CONVERT         reduce using rule 7 (statement -> convert NEWLINE .)
    DIGITIZE        reduce using rule 7 (statement -> convert NEWLINE .)
    WHILE           reduce using rule 7 (statement -> convert NEWLINE .)
    UNTIL           reduce using rule 7 (statement -> convert NEWLINE .)
    IFLESS          reduce using rule 7 (statement -> convert NEWLINE .)
    IFNLESS         reduce using rule 7 (statement -> convert NEWLINE .)
    IFZERO          reduce using rule 7 (statement -> convert NEWLINE .)
    IFNZERO         reduce using rule 7 (statement -> convert NEWLINE .)
    IFHIGH          reduce using rule 7 (statement -> convert NEWLINE .)
    IFNHIGH         reduce using rule 7 (statement -> convert NEWLINE .)
    COMMAND         reduce using rule 7 (statement -> convert NEWLINE .)
    error           reduce using rule 7 (statement -> convert NEWLINE .)
    NAME            reduce using rule 7 (statement -> convert NEWLINE .)
    PARAM           reduce using rule 7 (statement -> convert NEWLINE .)
    NEWLINE         reduce using rule 7 (statement -> convert NEWLINE .)
    $end            reduce using rule 7 (statement -> convert NEWLINE .)
    ENDW            reduce using rule 7 (statement -> convert NEWLINE .)
    ENDU            reduce using rule 7 (statement -> convert NEWLINE .)
    ENDIF           reduce using rule 7 (statement -> convert NEWLINE .)


state 36

    (94) convert -> convert error .

    NEWLINE         reduce using rule 94 (convert -> convert error .)
    error           reduce using rule 94 (convert -> convert error .)


state 37

    (8) statement -> digitize NEWLINE .

    VARIANT         reduce using rule 8 (statement -> digitize NEWLINE .)
    CONVERT         reduce using rule 8 (statement -> digitize NEWLINE .)
    DIGITIZE        reduce using rule 8 (statement -> digitize NEWLINE .)
    WHILE           reduce using rule 8 (statement -> digitize NEWLINE .)
    UNTIL           reduce using rule 8 (statement -> digitize NEWLINE .)
    IFLESS          reduce using rule 8 (statement -> digitize NEWLINE .)
    IFNLESS         reduce using rule 8 (statement -> digitize NEWLINE .)
    IFZERO          reduce using rule 8 (statement -> digitize NEWLINE .)
    IFNZERO         reduce using rule 8 (statement -> digitize NEWLINE .)
    IFHIGH          reduce using rule 8 (statement -> digitize NEWLINE .)
    IFNHIGH         reduce using rule 8 (statement -> digitize NEWLINE .)
    COMMAND         reduce using rule 8 (statement -> digitize NEWLINE .)
    error           reduce using rule 8 (statement -> digitize NEWLINE .)
    NAME            reduce using rule 8 (statement -> digitize NEWLINE .)
    PARAM           reduce using rule 8 (statement -> digitize NEWLINE .)
    NEWLINE         reduce using rule 8 (statement -> digitize NEWLINE .)
    $end            reduce using rule 8 (statement -> digitize NEWLINE .)
    ENDW            reduce using rule 8 (statement -> digitize NEWLINE .)
    ENDU            reduce using rule 8 (statement -> digitize NEWLINE .)
    ENDIF           reduce using rule 8 (statement -> digitize NEWLINE .)


state 38

    (96) digitize -> digitize error .

    NEWLINE         reduce using rule 96 (digitize -> digitize error .)
    error           reduce using rule 96 (digitize -> digitize error .)


state 39

    (9) statement -> while NEWLINE .

    VARIANT         reduce using rule 9 (statement -> while NEWLINE .)
    CONVERT         reduce using rule 9 (statement -> while NEWLINE .)
    DIGITIZE        reduce using rule 9 (statement -> while NEWLINE .)
    WHILE           reduce using rule 9 (statement -> while NEWLINE .)
    UNTIL           reduce using rule 9 (statement -> while NEWLINE .)
    IFLESS          reduce using rule 9 (statement -> while NEWLINE .)
    IFNLESS         reduce using rule 9 (statement -> while NEWLINE .)
    IFZERO          reduce using rule 9 (statement -> while NEWLINE .)
    IFNZERO         reduce using rule 9 (statement -> while NEWLINE .)
    IFHIGH          reduce using rule 9 (statement -> while NEWLINE .)
    IFNHIGH         reduce using rule 9 (statement -> while NEWLINE .)
    COMMAND         reduce using rule 9 (statement -> while NEWLINE .)
    error           reduce using rule 9 (statement -> while NEWLINE .)
    NAME            reduce using rule 9 (statement -> while NEWLINE .)
    PARAM           reduce using rule 9 (statement -> while NEWLINE .)
    NEWLINE         reduce using rule 9 (statement -> while NEWLINE .)
    $end            reduce using rule 9 (statement -> while NEWLINE .)
    ENDW            reduce using rule 9 (statement -> while NEWLINE .)
    ENDU            reduce using rule 9 (statement -> while NEWLINE .)
    ENDIF           reduce using rule 9 (statement -> while NEWLINE .)


state 40

    (10) statement -> until NEWLINE .

    VARIANT         reduce using rule 10 (statement -> until NEWLINE .)
    CONVERT         reduce using rule 10 (statement -> until NEWLINE .)
    DIGITIZE        reduce using rule 10 (statement -> until NEWLINE .)
    WHILE           reduce using rule 10 (statement -> until NEWLINE .)
    UNTIL           reduce using rule 10 (statement -> until NEWLINE .)
    IFLESS          reduce using rule 10 (statement -> until NEWLINE .)
    IFNLESS         reduce using rule 10 (statement -> until NEWLINE .)
    IFZERO          reduce using rule 10 (statement -> until NEWLINE .)
    IFNZERO         reduce using rule 10 (statement -> until NEWLINE .)
    IFHIGH          reduce using rule 10 (statement -> until NEWLINE .)
    IFNHIGH         reduce using rule 10 (statement -> until NEWLINE .)
    COMMAND         reduce using rule 10 (statement -> until NEWLINE .)
    error           reduce using rule 10 (statement -> until NEWLINE .)
    NAME            reduce using rule 10 (statement -> until NEWLINE .)
    PARAM           reduce using rule 10 (statement -> until NEWLINE .)
    NEWLINE         reduce using rule 10 (statement -> until NEWLINE .)
    $end            reduce using rule 10 (statement -> until NEWLINE .)
    ENDW            reduce using rule 10 (statement -> until NEWLINE .)
    ENDU            reduce using rule 10 (statement -> until NEWLINE .)
    ENDIF           reduce using rule 10 (statement -> until NEWLINE .)


state 41

    (11) statement -> if NEWLINE .

    VARIANT         reduce using rule 11 (statement -> if NEWLINE .)
    CONVERT         reduce using rule 11 (statement -> if NEWLINE .)
    DIGITIZE        reduce using rule 11 (statement -> if NEWLINE .)
    WHILE           reduce using rule 11 (statement -> if NEWLINE .)
    UNTIL           reduce using rule 11 (statement -> if NEWLINE .)
    IFLESS          reduce using rule 11 (statement -> if NEWLINE .)
    IFNLESS         reduce using rule 11 (statement -> if NEWLINE .)
    IFZERO          reduce using rule 11 (statement -> if NEWLINE .)
    IFNZERO         reduce using rule 11 (statement -> if NEWLINE .)
    IFHIGH          reduce using rule 11 (statement -> if NEWLINE .)
    IFNHIGH         reduce using rule 11 (statement -> if NEWLINE .)
    COMMAND         reduce using rule 11 (statement -> if NEWLINE .)
    error           reduce using rule 11 (statement -> if NEWLINE .)
    NAME            reduce using rule 11 (statement -> if NEWLINE .)
    PARAM           reduce using rule 11 (statement -> if NEWLINE .)
    NEWLINE         reduce using rule 11 (statement -> if NEWLINE .)
    $end            reduce using rule 11 (statement -> if NEWLINE .)
    ENDW            reduce using rule 11 (statement -> if NEWLINE .)
    ENDU            reduce using rule 11 (statement -> if NEWLINE .)
    ENDIF           reduce using rule 11 (statement -> if NEWLINE .)


state 42

    (12) statement -> command NEWLINE .

    VARIANT         reduce using rule 12 (statement -> command NEWLINE .)
    CONVERT         reduce using rule 12 (statement -> command NEWLINE .)
    DIGITIZE        reduce using rule 12 (statement -> command NEWLINE .)
    WHILE           reduce using rule 12 (statement -> command NEWLINE .)
    UNTIL           reduce using rule 12 (statement -> command NEWLINE .)
    IFLESS          reduce using rule 12 (statement -> command NEWLINE .)
    IFNLESS         reduce using rule 12 (statement -> command NEWLINE .)
    IFZERO          reduce using rule 12 (statement -> command NEWLINE .)
    IFNZERO         reduce using rule 12 (statement -> command NEWLINE .)
    IFHIGH          reduce using rule 12 (statement -> command NEWLINE .)
    IFNHIGH         reduce using rule 12 (statement -> command NEWLINE .)
    COMMAND         reduce using rule 12 (statement -> command NEWLINE .)
    error           reduce using rule 12 (statement -> command NEWLINE .)
    NAME            reduce using rule 12 (statement -> command NEWLINE .)
    PARAM           reduce using rule 12 (statement -> command NEWLINE .)
    NEWLINE         reduce using rule 12 (statement -> command NEWLINE .)
    $end            reduce using rule 12 (statement -> command NEWLINE .)
    ENDW            reduce using rule 12 (statement -> command NEWLINE .)
    ENDU            reduce using rule 12 (statement -> command NEWLINE .)
    ENDIF           reduce using rule 12 (statement -> command NEWLINE .)


state 43

    (98) command -> command error .

    NEWLINE         reduce using rule 98 (command -> command error .)
    error           reduce using rule 98 (command -> command error .)


state 44

    (13) statement -> statement_error NEWLINE .

    VARIANT         reduce using rule 13 (statement -> statement_error NEWLINE .)
    CONVERT         reduce using rule 13 (statement -> statement_error NEWLINE .)
    DIGITIZE        reduce using rule 13 (statement -> statement_error NEWLINE .)
    WHILE           reduce using rule 13 (statement -> statement_error NEWLINE .)
    UNTIL           reduce using rule 13 (statement -> statement_error NEWLINE .)
    IFLESS          reduce using rule 13 (statement -> statement_error NEWLINE .)
    IFNLESS         reduce using rule 13 (statement -> statement_error NEWLINE .)
    IFZERO          reduce using rule 13 (statement -> statement_error NEWLINE .)
    IFNZERO         reduce using rule 13 (statement -> statement_error NEWLINE .)
    IFHIGH          reduce using rule 13 (statement -> statement_error NEWLINE .)
    IFNHIGH         reduce using rule 13 (statement -> statement_error NEWLINE .)
    COMMAND         reduce using rule 13 (statement -> statement_error NEWLINE .)
    error           reduce using rule 13 (statement -> statement_error NEWLINE .)
    NAME            reduce using rule 13 (statement -> statement_error NEWLINE .)
    PARAM           reduce using rule 13 (statement -> statement_error NEWLINE .)
    NEWLINE         reduce using rule 13 (statement -> statement_error NEWLINE .)
    $end            reduce using rule 13 (statement -> statement_error NEWLINE .)
    ENDW            reduce using rule 13 (statement -> statement_error NEWLINE .)
    ENDU            reduce using rule 13 (statement -> statement_error NEWLINE .)
    ENDIF           reduce using rule 13 (statement -> statement_error NEWLINE .)


state 45

    (100) statement_error -> statement_error error .

    NEWLINE         reduce using rule 100 (statement_error -> statement_error error .)
    error           reduce using rule 100 (statement_error -> statement_error error .)


state 46

    (15) declaration -> VARIANT variant .
    (16) declaration -> VARIANT variant . ASSIGNMENT initialization
    (82) declaration -> VARIANT variant . ASSIGNMENT error

    NEWLINE         reduce using rule 15 (declaration -> VARIANT variant .)
    error           reduce using rule 15 (declaration -> VARIANT variant .)
    ASSIGNMENT      shift and go to state 85


state 47

    (81) declaration -> VARIANT error .

    NEWLINE         reduce using rule 81 (declaration -> VARIANT error .)
    error           reduce using rule 81 (declaration -> VARIANT error .)


state 48

    (66) assignment -> variant ASSIGNMENT . expression
    (89) assignment -> variant ASSIGNMENT . error
    (36) expression -> . math_expression
    (37) expression -> . const
    (38) expression -> . variant
    (48) math_expression -> . expression PLUS expression
    (49) math_expression -> . MINUS expression
    (58) const -> . TRUE
    (59) const -> . FALSE
    (60) const -> . DECIMAL
    (61) const -> . LETTERS
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    error           shift and go to state 88
    MINUS           shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    DECIMAL         shift and go to state 94
    LETTERS         shift and go to state 95
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    variant                        shift and go to state 86
    expression                     shift and go to state 87
    math_expression                shift and go to state 89
    const                          shift and go to state 90

state 49

    (67) convert -> CONVERT type . TO type variant
    (90) convert -> CONVERT type . TO type error
    (91) convert -> CONVERT type . TO error
    (92) convert -> CONVERT type . error

    TO              shift and go to state 96
    error           shift and go to state 97


state 50

    (93) convert -> CONVERT error .

    NEWLINE         reduce using rule 93 (convert -> CONVERT error .)
    error           reduce using rule 93 (convert -> CONVERT error .)


state 51

    (69) type -> BOOL .

    TO              reduce using rule 69 (type -> BOOL .)
    error           reduce using rule 69 (type -> BOOL .)
    NAME            reduce using rule 69 (type -> BOOL .)
    PARAM           reduce using rule 69 (type -> BOOL .)


state 52

    (70) type -> DIGIT .

    TO              reduce using rule 70 (type -> DIGIT .)
    error           reduce using rule 70 (type -> DIGIT .)
    NAME            reduce using rule 70 (type -> DIGIT .)
    PARAM           reduce using rule 70 (type -> DIGIT .)


state 53

    (71) type -> STRING .

    TO              reduce using rule 71 (type -> STRING .)
    error           reduce using rule 71 (type -> STRING .)
    NAME            reduce using rule 71 (type -> STRING .)
    PARAM           reduce using rule 71 (type -> STRING .)


state 54

    (68) digitize -> DIGITIZE variant .

    NEWLINE         reduce using rule 68 (digitize -> DIGITIZE variant .)
    error           reduce using rule 68 (digitize -> DIGITIZE variant .)


state 55

    (95) digitize -> DIGITIZE error .

    NEWLINE         reduce using rule 95 (digitize -> DIGITIZE error .)
    error           reduce using rule 95 (digitize -> DIGITIZE error .)


state 56

    (72) while -> WHILE bool_expression . NEWLINE statements ENDW
    (54) bool_math_expression -> bool_expression . PLUS bool_expression

    NEWLINE         shift and go to state 98
    PLUS            shift and go to state 99


state 57

    (42) bool_expression -> bool_math_expression .

    NEWLINE         reduce using rule 42 (bool_expression -> bool_math_expression .)
    PLUS            reduce using rule 42 (bool_expression -> bool_math_expression .)


state 58

    (43) bool_expression -> bool_const .

    NEWLINE         reduce using rule 43 (bool_expression -> bool_const .)
    PLUS            reduce using rule 43 (bool_expression -> bool_const .)


state 59

    (44) bool_expression -> variant .

    NEWLINE         reduce using rule 44 (bool_expression -> variant .)
    PLUS            reduce using rule 44 (bool_expression -> variant .)


state 60

    (55) bool_math_expression -> MINUS . bool_expression
    (42) bool_expression -> . bool_math_expression
    (43) bool_expression -> . bool_const
    (44) bool_expression -> . variant
    (54) bool_math_expression -> . bool_expression PLUS bool_expression
    (55) bool_math_expression -> . MINUS bool_expression
    (63) bool_const -> . TRUE
    (64) bool_const -> . FALSE
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    MINUS           shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    bool_expression                shift and go to state 100
    bool_math_expression           shift and go to state 57
    bool_const                     shift and go to state 58
    variant                        shift and go to state 59

state 61

    (63) bool_const -> TRUE .

    NEWLINE         reduce using rule 63 (bool_const -> TRUE .)
    PLUS            reduce using rule 63 (bool_const -> TRUE .)


state 62

    (64) bool_const -> FALSE .

    NEWLINE         reduce using rule 64 (bool_const -> FALSE .)
    PLUS            reduce using rule 64 (bool_const -> FALSE .)


state 63

    (73) until -> UNTIL bool_expression . NEWLINE statements ENDU
    (54) bool_math_expression -> bool_expression . PLUS bool_expression

    NEWLINE         shift and go to state 101
    PLUS            shift and go to state 99


state 64

    (74) if -> IFLESS decimal_expression . COMMA decimal_expression NEWLINE statements ENDIF
    (52) dec_math_expression -> decimal_expression . PLUS decimal_expression

    COMMA           shift and go to state 102
    PLUS            shift and go to state 103


state 65

    (39) decimal_expression -> dec_math_expression .

    COMMA           reduce using rule 39 (decimal_expression -> dec_math_expression .)
    PLUS            reduce using rule 39 (decimal_expression -> dec_math_expression .)
    NEWLINE         reduce using rule 39 (decimal_expression -> dec_math_expression .)
    RSQBRACKET      reduce using rule 39 (decimal_expression -> dec_math_expression .)


state 66

    (40) decimal_expression -> decimal_const .

    COMMA           reduce using rule 40 (decimal_expression -> decimal_const .)
    PLUS            reduce using rule 40 (decimal_expression -> decimal_const .)
    NEWLINE         reduce using rule 40 (decimal_expression -> decimal_const .)
    RSQBRACKET      reduce using rule 40 (decimal_expression -> decimal_const .)


state 67

    (41) decimal_expression -> variant .

    COMMA           reduce using rule 41 (decimal_expression -> variant .)
    PLUS            reduce using rule 41 (decimal_expression -> variant .)
    NEWLINE         reduce using rule 41 (decimal_expression -> variant .)
    RSQBRACKET      reduce using rule 41 (decimal_expression -> variant .)


state 68

    (53) dec_math_expression -> MINUS . decimal_expression
    (39) decimal_expression -> . dec_math_expression
    (40) decimal_expression -> . decimal_const
    (41) decimal_expression -> . variant
    (52) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (53) dec_math_expression -> . MINUS decimal_expression
    (62) decimal_const -> . DECIMAL
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    MINUS           shift and go to state 68
    DECIMAL         shift and go to state 69
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    decimal_expression             shift and go to state 104
    dec_math_expression            shift and go to state 65
    decimal_const                  shift and go to state 66
    variant                        shift and go to state 67

state 69

    (62) decimal_const -> DECIMAL .

    COMMA           reduce using rule 62 (decimal_const -> DECIMAL .)
    PLUS            reduce using rule 62 (decimal_const -> DECIMAL .)
    NEWLINE         reduce using rule 62 (decimal_const -> DECIMAL .)
    RSQBRACKET      reduce using rule 62 (decimal_const -> DECIMAL .)


state 70

    (75) if -> IFNLESS decimal_expression . COMMA decimal_expression NEWLINE statements ENDIF
    (52) dec_math_expression -> decimal_expression . PLUS decimal_expression

    COMMA           shift and go to state 105
    PLUS            shift and go to state 103


state 71

    (76) if -> IFZERO decimal_expression . NEWLINE statements ENDIF
    (52) dec_math_expression -> decimal_expression . PLUS decimal_expression

    NEWLINE         shift and go to state 106
    PLUS            shift and go to state 103


state 72

    (77) if -> IFNZERO decimal_expression . NEWLINE statements ENDIF
    (52) dec_math_expression -> decimal_expression . PLUS decimal_expression

    NEWLINE         shift and go to state 107
    PLUS            shift and go to state 103


state 73

    (78) if -> IFHIGH decimal_expression . COMMA decimal_expression NEWLINE statements ENDIF
    (52) dec_math_expression -> decimal_expression . PLUS decimal_expression

    COMMA           shift and go to state 108
    PLUS            shift and go to state 103


state 74

    (79) if -> IFNHIGH decimal_expression . COMMA decimal_expression NEWLINE statements ENDIF
    (52) dec_math_expression -> decimal_expression . PLUS decimal_expression

    COMMA           shift and go to state 109
    PLUS            shift and go to state 103


state 75

    (80) command -> COMMAND string_expression .
    (56) string_math_expression -> string_expression . PLUS string_expression

    NEWLINE         reduce using rule 80 (command -> COMMAND string_expression .)
    error           reduce using rule 80 (command -> COMMAND string_expression .)
    PLUS            shift and go to state 110


state 76

    (97) command -> COMMAND error .

    NEWLINE         reduce using rule 97 (command -> COMMAND error .)
    error           reduce using rule 97 (command -> COMMAND error .)


state 77

    (45) string_expression -> string_math_expression .

    PLUS            reduce using rule 45 (string_expression -> string_math_expression .)
    NEWLINE         reduce using rule 45 (string_expression -> string_math_expression .)
    error           reduce using rule 45 (string_expression -> string_math_expression .)


state 78

    (46) string_expression -> string_const .

    PLUS            reduce using rule 46 (string_expression -> string_const .)
    NEWLINE         reduce using rule 46 (string_expression -> string_const .)
    error           reduce using rule 46 (string_expression -> string_const .)


state 79

    (47) string_expression -> variant .

    PLUS            reduce using rule 47 (string_expression -> variant .)
    NEWLINE         reduce using rule 47 (string_expression -> variant .)
    error           reduce using rule 47 (string_expression -> variant .)


state 80

    (57) string_math_expression -> MINUS . string_expression
    (45) string_expression -> . string_math_expression
    (46) string_expression -> . string_const
    (47) string_expression -> . variant
    (56) string_math_expression -> . string_expression PLUS string_expression
    (57) string_math_expression -> . MINUS string_expression
    (65) string_const -> . LETTERS
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    MINUS           shift and go to state 80
    LETTERS         shift and go to state 81
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    string_expression              shift and go to state 111
    string_math_expression         shift and go to state 77
    string_const                   shift and go to state 78
    variant                        shift and go to state 79

state 81

    (65) string_const -> LETTERS .

    PLUS            reduce using rule 65 (string_const -> LETTERS .)
    NEWLINE         reduce using rule 65 (string_const -> LETTERS .)
    error           reduce using rule 65 (string_const -> LETTERS .)


state 82

    (18) variant -> NAME varsize .
    (88) varsize -> varsize . error

  ! shift/reduce conflict for error resolved as shift
    ASSIGNMENT      reduce using rule 18 (variant -> NAME varsize .)
    NEWLINE         reduce using rule 18 (variant -> NAME varsize .)
    PLUS            reduce using rule 18 (variant -> NAME varsize .)
    COMMA           reduce using rule 18 (variant -> NAME varsize .)
    RSQBRACKET      reduce using rule 18 (variant -> NAME varsize .)
    error           shift and go to state 112

  ! error           [ reduce using rule 18 (variant -> NAME varsize .) ]


state 83

    (21) varsize -> LSQBRACKET . decimal_expression RSQBRACKET
    (22) varsize -> LSQBRACKET . decimal_expression COMMA decimal_expression RSQBRACKET
    (84) varsize -> LSQBRACKET . error RSQBRACKET
    (85) varsize -> LSQBRACKET . error COMMA decimal_expression RSQBRACKET
    (86) varsize -> LSQBRACKET . decimal_expression COMMA error RSQBRACKET
    (87) varsize -> LSQBRACKET . error COMMA error RSQBRACKET
    (39) decimal_expression -> . dec_math_expression
    (40) decimal_expression -> . decimal_const
    (41) decimal_expression -> . variant
    (52) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (53) dec_math_expression -> . MINUS decimal_expression
    (62) decimal_const -> . DECIMAL
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    error           shift and go to state 114
    MINUS           shift and go to state 68
    DECIMAL         shift and go to state 69
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    decimal_expression             shift and go to state 113
    dec_math_expression            shift and go to state 65
    decimal_const                  shift and go to state 66
    variant                        shift and go to state 67

state 84

    (20) variant -> PARAM varsize .
    (88) varsize -> varsize . error

  ! shift/reduce conflict for error resolved as shift
    ASSIGNMENT      reduce using rule 20 (variant -> PARAM varsize .)
    NEWLINE         reduce using rule 20 (variant -> PARAM varsize .)
    PLUS            reduce using rule 20 (variant -> PARAM varsize .)
    COMMA           reduce using rule 20 (variant -> PARAM varsize .)
    RSQBRACKET      reduce using rule 20 (variant -> PARAM varsize .)
    error           shift and go to state 112

  ! error           [ reduce using rule 20 (variant -> PARAM varsize .) ]


state 85

    (16) declaration -> VARIANT variant ASSIGNMENT . initialization
    (82) declaration -> VARIANT variant ASSIGNMENT . error
    (23) initialization -> . LBRACE init_lists RBRACE

    error           shift and go to state 116
    LBRACE          shift and go to state 117

    initialization                 shift and go to state 115

state 86

    (38) expression -> variant .

    PLUS            reduce using rule 38 (expression -> variant .)
    NEWLINE         reduce using rule 38 (expression -> variant .)


state 87

    (66) assignment -> variant ASSIGNMENT expression .
    (48) math_expression -> expression . PLUS expression

    NEWLINE         reduce using rule 66 (assignment -> variant ASSIGNMENT expression .)
    PLUS            shift and go to state 118


state 88

    (89) assignment -> variant ASSIGNMENT error .

    NEWLINE         reduce using rule 89 (assignment -> variant ASSIGNMENT error .)


state 89

    (36) expression -> math_expression .

    PLUS            reduce using rule 36 (expression -> math_expression .)
    NEWLINE         reduce using rule 36 (expression -> math_expression .)


state 90

    (37) expression -> const .

    PLUS            reduce using rule 37 (expression -> const .)
    NEWLINE         reduce using rule 37 (expression -> const .)


state 91

    (49) math_expression -> MINUS . expression
    (36) expression -> . math_expression
    (37) expression -> . const
    (38) expression -> . variant
    (48) math_expression -> . expression PLUS expression
    (49) math_expression -> . MINUS expression
    (58) const -> . TRUE
    (59) const -> . FALSE
    (60) const -> . DECIMAL
    (61) const -> . LETTERS
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    MINUS           shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    DECIMAL         shift and go to state 94
    LETTERS         shift and go to state 95
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    expression                     shift and go to state 119
    math_expression                shift and go to state 89
    const                          shift and go to state 90
    variant                        shift and go to state 86

state 92

    (58) const -> TRUE .

    PLUS            reduce using rule 58 (const -> TRUE .)
    NEWLINE         reduce using rule 58 (const -> TRUE .)
    SEMICOLON       reduce using rule 58 (const -> TRUE .)
    COMMA           reduce using rule 58 (const -> TRUE .)


state 93

    (59) const -> FALSE .

    PLUS            reduce using rule 59 (const -> FALSE .)
    NEWLINE         reduce using rule 59 (const -> FALSE .)
    SEMICOLON       reduce using rule 59 (const -> FALSE .)
    COMMA           reduce using rule 59 (const -> FALSE .)


state 94

    (60) const -> DECIMAL .

    PLUS            reduce using rule 60 (const -> DECIMAL .)
    NEWLINE         reduce using rule 60 (const -> DECIMAL .)
    SEMICOLON       reduce using rule 60 (const -> DECIMAL .)
    COMMA           reduce using rule 60 (const -> DECIMAL .)


state 95

    (61) const -> LETTERS .

    PLUS            reduce using rule 61 (const -> LETTERS .)
    NEWLINE         reduce using rule 61 (const -> LETTERS .)
    SEMICOLON       reduce using rule 61 (const -> LETTERS .)
    COMMA           reduce using rule 61 (const -> LETTERS .)


state 96

    (67) convert -> CONVERT type TO . type variant
    (90) convert -> CONVERT type TO . type error
    (91) convert -> CONVERT type TO . error
    (69) type -> . BOOL
    (70) type -> . DIGIT
    (71) type -> . STRING

    error           shift and go to state 121
    BOOL            shift and go to state 51
    DIGIT           shift and go to state 52
    STRING          shift and go to state 53

    type                           shift and go to state 120

state 97

    (92) convert -> CONVERT type error .

    NEWLINE         reduce using rule 92 (convert -> CONVERT type error .)
    error           reduce using rule 92 (convert -> CONVERT type error .)


state 98

    (72) while -> WHILE bool_expression NEWLINE . statements ENDW
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . statement_error NEWLINE
    (14) empty -> .
    (15) declaration -> . VARIANT variant
    (16) declaration -> . VARIANT variant ASSIGNMENT initialization
    (81) declaration -> . VARIANT error
    (82) declaration -> . VARIANT variant ASSIGNMENT error
    (83) declaration -> . declaration error
    (66) assignment -> . variant ASSIGNMENT expression
    (89) assignment -> . variant ASSIGNMENT error
    (67) convert -> . CONVERT type TO type variant
    (90) convert -> . CONVERT type TO type error
    (91) convert -> . CONVERT type TO error
    (92) convert -> . CONVERT type error
    (93) convert -> . CONVERT error
    (94) convert -> . convert error
    (68) digitize -> . DIGITIZE variant
    (95) digitize -> . DIGITIZE error
    (96) digitize -> . digitize error
    (72) while -> . WHILE bool_expression NEWLINE statements ENDW
    (73) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (74) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (75) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (76) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (77) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) command -> . COMMAND string_expression
    (97) command -> . COMMAND error
    (98) command -> . command error
    (99) statement_error -> . error
    (100) statement_error -> . statement_error error
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    NEWLINE         reduce using rule 14 (empty -> .)
    VARIANT         shift and go to state 14
    CONVERT         shift and go to state 17
    DIGITIZE        shift and go to state 18
    WHILE           shift and go to state 19
    UNTIL           shift and go to state 20
    IFLESS          shift and go to state 21
    IFNLESS         shift and go to state 22
    IFZERO          shift and go to state 23
    IFNZERO         shift and go to state 24
    IFHIGH          shift and go to state 25
    IFNHIGH         shift and go to state 26
    COMMAND         shift and go to state 27
    error           shift and go to state 16
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    statements                     shift and go to state 122
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    statement_error                shift and go to state 13
    variant                        shift and go to state 15

state 99

    (54) bool_math_expression -> bool_expression PLUS . bool_expression
    (42) bool_expression -> . bool_math_expression
    (43) bool_expression -> . bool_const
    (44) bool_expression -> . variant
    (54) bool_math_expression -> . bool_expression PLUS bool_expression
    (55) bool_math_expression -> . MINUS bool_expression
    (63) bool_const -> . TRUE
    (64) bool_const -> . FALSE
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    MINUS           shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    bool_expression                shift and go to state 123
    bool_math_expression           shift and go to state 57
    bool_const                     shift and go to state 58
    variant                        shift and go to state 59

state 100

    (55) bool_math_expression -> MINUS bool_expression .
    (54) bool_math_expression -> bool_expression . PLUS bool_expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 55 (bool_math_expression -> MINUS bool_expression .)
    PLUS            shift and go to state 99

  ! PLUS            [ reduce using rule 55 (bool_math_expression -> MINUS bool_expression .) ]


state 101

    (73) until -> UNTIL bool_expression NEWLINE . statements ENDU
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . statement_error NEWLINE
    (14) empty -> .
    (15) declaration -> . VARIANT variant
    (16) declaration -> . VARIANT variant ASSIGNMENT initialization
    (81) declaration -> . VARIANT error
    (82) declaration -> . VARIANT variant ASSIGNMENT error
    (83) declaration -> . declaration error
    (66) assignment -> . variant ASSIGNMENT expression
    (89) assignment -> . variant ASSIGNMENT error
    (67) convert -> . CONVERT type TO type variant
    (90) convert -> . CONVERT type TO type error
    (91) convert -> . CONVERT type TO error
    (92) convert -> . CONVERT type error
    (93) convert -> . CONVERT error
    (94) convert -> . convert error
    (68) digitize -> . DIGITIZE variant
    (95) digitize -> . DIGITIZE error
    (96) digitize -> . digitize error
    (72) while -> . WHILE bool_expression NEWLINE statements ENDW
    (73) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (74) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (75) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (76) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (77) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) command -> . COMMAND string_expression
    (97) command -> . COMMAND error
    (98) command -> . command error
    (99) statement_error -> . error
    (100) statement_error -> . statement_error error
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    NEWLINE         reduce using rule 14 (empty -> .)
    VARIANT         shift and go to state 14
    CONVERT         shift and go to state 17
    DIGITIZE        shift and go to state 18
    WHILE           shift and go to state 19
    UNTIL           shift and go to state 20
    IFLESS          shift and go to state 21
    IFNLESS         shift and go to state 22
    IFZERO          shift and go to state 23
    IFNZERO         shift and go to state 24
    IFHIGH          shift and go to state 25
    IFNHIGH         shift and go to state 26
    COMMAND         shift and go to state 27
    error           shift and go to state 16
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    statements                     shift and go to state 124
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    statement_error                shift and go to state 13
    variant                        shift and go to state 15

state 102

    (74) if -> IFLESS decimal_expression COMMA . decimal_expression NEWLINE statements ENDIF
    (39) decimal_expression -> . dec_math_expression
    (40) decimal_expression -> . decimal_const
    (41) decimal_expression -> . variant
    (52) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (53) dec_math_expression -> . MINUS decimal_expression
    (62) decimal_const -> . DECIMAL
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    MINUS           shift and go to state 68
    DECIMAL         shift and go to state 69
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    decimal_expression             shift and go to state 125
    dec_math_expression            shift and go to state 65
    decimal_const                  shift and go to state 66
    variant                        shift and go to state 67

state 103

    (52) dec_math_expression -> decimal_expression PLUS . decimal_expression
    (39) decimal_expression -> . dec_math_expression
    (40) decimal_expression -> . decimal_const
    (41) decimal_expression -> . variant
    (52) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (53) dec_math_expression -> . MINUS decimal_expression
    (62) decimal_const -> . DECIMAL
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    MINUS           shift and go to state 68
    DECIMAL         shift and go to state 69
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    decimal_expression             shift and go to state 126
    dec_math_expression            shift and go to state 65
    decimal_const                  shift and go to state 66
    variant                        shift and go to state 67

state 104

    (53) dec_math_expression -> MINUS decimal_expression .
    (52) dec_math_expression -> decimal_expression . PLUS decimal_expression

  ! shift/reduce conflict for PLUS resolved as shift
    COMMA           reduce using rule 53 (dec_math_expression -> MINUS decimal_expression .)
    NEWLINE         reduce using rule 53 (dec_math_expression -> MINUS decimal_expression .)
    RSQBRACKET      reduce using rule 53 (dec_math_expression -> MINUS decimal_expression .)
    PLUS            shift and go to state 103

  ! PLUS            [ reduce using rule 53 (dec_math_expression -> MINUS decimal_expression .) ]


state 105

    (75) if -> IFNLESS decimal_expression COMMA . decimal_expression NEWLINE statements ENDIF
    (39) decimal_expression -> . dec_math_expression
    (40) decimal_expression -> . decimal_const
    (41) decimal_expression -> . variant
    (52) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (53) dec_math_expression -> . MINUS decimal_expression
    (62) decimal_const -> . DECIMAL
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    MINUS           shift and go to state 68
    DECIMAL         shift and go to state 69
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    decimal_expression             shift and go to state 127
    dec_math_expression            shift and go to state 65
    decimal_const                  shift and go to state 66
    variant                        shift and go to state 67

state 106

    (76) if -> IFZERO decimal_expression NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . statement_error NEWLINE
    (14) empty -> .
    (15) declaration -> . VARIANT variant
    (16) declaration -> . VARIANT variant ASSIGNMENT initialization
    (81) declaration -> . VARIANT error
    (82) declaration -> . VARIANT variant ASSIGNMENT error
    (83) declaration -> . declaration error
    (66) assignment -> . variant ASSIGNMENT expression
    (89) assignment -> . variant ASSIGNMENT error
    (67) convert -> . CONVERT type TO type variant
    (90) convert -> . CONVERT type TO type error
    (91) convert -> . CONVERT type TO error
    (92) convert -> . CONVERT type error
    (93) convert -> . CONVERT error
    (94) convert -> . convert error
    (68) digitize -> . DIGITIZE variant
    (95) digitize -> . DIGITIZE error
    (96) digitize -> . digitize error
    (72) while -> . WHILE bool_expression NEWLINE statements ENDW
    (73) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (74) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (75) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (76) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (77) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) command -> . COMMAND string_expression
    (97) command -> . COMMAND error
    (98) command -> . command error
    (99) statement_error -> . error
    (100) statement_error -> . statement_error error
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    NEWLINE         reduce using rule 14 (empty -> .)
    VARIANT         shift and go to state 14
    CONVERT         shift and go to state 17
    DIGITIZE        shift and go to state 18
    WHILE           shift and go to state 19
    UNTIL           shift and go to state 20
    IFLESS          shift and go to state 21
    IFNLESS         shift and go to state 22
    IFZERO          shift and go to state 23
    IFNZERO         shift and go to state 24
    IFHIGH          shift and go to state 25
    IFNHIGH         shift and go to state 26
    COMMAND         shift and go to state 27
    error           shift and go to state 16
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    statements                     shift and go to state 128
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    statement_error                shift and go to state 13
    variant                        shift and go to state 15

state 107

    (77) if -> IFNZERO decimal_expression NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . statement_error NEWLINE
    (14) empty -> .
    (15) declaration -> . VARIANT variant
    (16) declaration -> . VARIANT variant ASSIGNMENT initialization
    (81) declaration -> . VARIANT error
    (82) declaration -> . VARIANT variant ASSIGNMENT error
    (83) declaration -> . declaration error
    (66) assignment -> . variant ASSIGNMENT expression
    (89) assignment -> . variant ASSIGNMENT error
    (67) convert -> . CONVERT type TO type variant
    (90) convert -> . CONVERT type TO type error
    (91) convert -> . CONVERT type TO error
    (92) convert -> . CONVERT type error
    (93) convert -> . CONVERT error
    (94) convert -> . convert error
    (68) digitize -> . DIGITIZE variant
    (95) digitize -> . DIGITIZE error
    (96) digitize -> . digitize error
    (72) while -> . WHILE bool_expression NEWLINE statements ENDW
    (73) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (74) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (75) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (76) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (77) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) command -> . COMMAND string_expression
    (97) command -> . COMMAND error
    (98) command -> . command error
    (99) statement_error -> . error
    (100) statement_error -> . statement_error error
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    NEWLINE         reduce using rule 14 (empty -> .)
    VARIANT         shift and go to state 14
    CONVERT         shift and go to state 17
    DIGITIZE        shift and go to state 18
    WHILE           shift and go to state 19
    UNTIL           shift and go to state 20
    IFLESS          shift and go to state 21
    IFNLESS         shift and go to state 22
    IFZERO          shift and go to state 23
    IFNZERO         shift and go to state 24
    IFHIGH          shift and go to state 25
    IFNHIGH         shift and go to state 26
    COMMAND         shift and go to state 27
    error           shift and go to state 16
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    statements                     shift and go to state 129
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    statement_error                shift and go to state 13
    variant                        shift and go to state 15

state 108

    (78) if -> IFHIGH decimal_expression COMMA . decimal_expression NEWLINE statements ENDIF
    (39) decimal_expression -> . dec_math_expression
    (40) decimal_expression -> . decimal_const
    (41) decimal_expression -> . variant
    (52) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (53) dec_math_expression -> . MINUS decimal_expression
    (62) decimal_const -> . DECIMAL
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    MINUS           shift and go to state 68
    DECIMAL         shift and go to state 69
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    decimal_expression             shift and go to state 130
    dec_math_expression            shift and go to state 65
    decimal_const                  shift and go to state 66
    variant                        shift and go to state 67

state 109

    (79) if -> IFNHIGH decimal_expression COMMA . decimal_expression NEWLINE statements ENDIF
    (39) decimal_expression -> . dec_math_expression
    (40) decimal_expression -> . decimal_const
    (41) decimal_expression -> . variant
    (52) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (53) dec_math_expression -> . MINUS decimal_expression
    (62) decimal_const -> . DECIMAL
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    MINUS           shift and go to state 68
    DECIMAL         shift and go to state 69
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    decimal_expression             shift and go to state 131
    dec_math_expression            shift and go to state 65
    decimal_const                  shift and go to state 66
    variant                        shift and go to state 67

state 110

    (56) string_math_expression -> string_expression PLUS . string_expression
    (45) string_expression -> . string_math_expression
    (46) string_expression -> . string_const
    (47) string_expression -> . variant
    (56) string_math_expression -> . string_expression PLUS string_expression
    (57) string_math_expression -> . MINUS string_expression
    (65) string_const -> . LETTERS
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    MINUS           shift and go to state 80
    LETTERS         shift and go to state 81
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    string_expression              shift and go to state 132
    string_math_expression         shift and go to state 77
    string_const                   shift and go to state 78
    variant                        shift and go to state 79

state 111

    (57) string_math_expression -> MINUS string_expression .
    (56) string_math_expression -> string_expression . PLUS string_expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 57 (string_math_expression -> MINUS string_expression .)
    error           reduce using rule 57 (string_math_expression -> MINUS string_expression .)
    PLUS            shift and go to state 110

  ! PLUS            [ reduce using rule 57 (string_math_expression -> MINUS string_expression .) ]


state 112

    (88) varsize -> varsize error .

    error           reduce using rule 88 (varsize -> varsize error .)
    ASSIGNMENT      reduce using rule 88 (varsize -> varsize error .)
    NEWLINE         reduce using rule 88 (varsize -> varsize error .)
    PLUS            reduce using rule 88 (varsize -> varsize error .)
    COMMA           reduce using rule 88 (varsize -> varsize error .)
    RSQBRACKET      reduce using rule 88 (varsize -> varsize error .)


state 113

    (21) varsize -> LSQBRACKET decimal_expression . RSQBRACKET
    (22) varsize -> LSQBRACKET decimal_expression . COMMA decimal_expression RSQBRACKET
    (86) varsize -> LSQBRACKET decimal_expression . COMMA error RSQBRACKET
    (52) dec_math_expression -> decimal_expression . PLUS decimal_expression

    RSQBRACKET      shift and go to state 133
    COMMA           shift and go to state 134
    PLUS            shift and go to state 103


state 114

    (84) varsize -> LSQBRACKET error . RSQBRACKET
    (85) varsize -> LSQBRACKET error . COMMA decimal_expression RSQBRACKET
    (87) varsize -> LSQBRACKET error . COMMA error RSQBRACKET

    RSQBRACKET      shift and go to state 135
    COMMA           shift and go to state 136


state 115

    (16) declaration -> VARIANT variant ASSIGNMENT initialization .

    NEWLINE         reduce using rule 16 (declaration -> VARIANT variant ASSIGNMENT initialization .)
    error           reduce using rule 16 (declaration -> VARIANT variant ASSIGNMENT initialization .)


state 116

    (82) declaration -> VARIANT variant ASSIGNMENT error .

    NEWLINE         reduce using rule 82 (declaration -> VARIANT variant ASSIGNMENT error .)
    error           reduce using rule 82 (declaration -> VARIANT variant ASSIGNMENT error .)


state 117

    (23) initialization -> LBRACE . init_lists RBRACE
    (24) init_lists -> . init_lists init_list
    (25) init_lists -> . init_list
    (26) init_list -> . LBRACE inits RBRACE
    (27) init_list -> . LBRACE RBRACE

    LBRACE          shift and go to state 137

    init_lists                     shift and go to state 138
    init_list                      shift and go to state 139

state 118

    (48) math_expression -> expression PLUS . expression
    (36) expression -> . math_expression
    (37) expression -> . const
    (38) expression -> . variant
    (48) math_expression -> . expression PLUS expression
    (49) math_expression -> . MINUS expression
    (58) const -> . TRUE
    (59) const -> . FALSE
    (60) const -> . DECIMAL
    (61) const -> . LETTERS
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    MINUS           shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    DECIMAL         shift and go to state 94
    LETTERS         shift and go to state 95
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    expression                     shift and go to state 140
    math_expression                shift and go to state 89
    const                          shift and go to state 90
    variant                        shift and go to state 86

state 119

    (49) math_expression -> MINUS expression .
    (48) math_expression -> expression . PLUS expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 49 (math_expression -> MINUS expression .)
    PLUS            shift and go to state 118

  ! PLUS            [ reduce using rule 49 (math_expression -> MINUS expression .) ]


state 120

    (67) convert -> CONVERT type TO type . variant
    (90) convert -> CONVERT type TO type . error
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    error           shift and go to state 142
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    variant                        shift and go to state 141

state 121

    (91) convert -> CONVERT type TO error .

    NEWLINE         reduce using rule 91 (convert -> CONVERT type TO error .)
    error           reduce using rule 91 (convert -> CONVERT type TO error .)


state 122

    (72) while -> WHILE bool_expression NEWLINE statements . ENDW
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . statement_error NEWLINE
    (14) empty -> .
    (15) declaration -> . VARIANT variant
    (16) declaration -> . VARIANT variant ASSIGNMENT initialization
    (81) declaration -> . VARIANT error
    (82) declaration -> . VARIANT variant ASSIGNMENT error
    (83) declaration -> . declaration error
    (66) assignment -> . variant ASSIGNMENT expression
    (89) assignment -> . variant ASSIGNMENT error
    (67) convert -> . CONVERT type TO type variant
    (90) convert -> . CONVERT type TO type error
    (91) convert -> . CONVERT type TO error
    (92) convert -> . CONVERT type error
    (93) convert -> . CONVERT error
    (94) convert -> . convert error
    (68) digitize -> . DIGITIZE variant
    (95) digitize -> . DIGITIZE error
    (96) digitize -> . digitize error
    (72) while -> . WHILE bool_expression NEWLINE statements ENDW
    (73) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (74) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (75) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (76) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (77) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) command -> . COMMAND string_expression
    (97) command -> . COMMAND error
    (98) command -> . command error
    (99) statement_error -> . error
    (100) statement_error -> . statement_error error
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    ENDW            shift and go to state 143
    NEWLINE         reduce using rule 14 (empty -> .)
    VARIANT         shift and go to state 14
    CONVERT         shift and go to state 17
    DIGITIZE        shift and go to state 18
    WHILE           shift and go to state 19
    UNTIL           shift and go to state 20
    IFLESS          shift and go to state 21
    IFNLESS         shift and go to state 22
    IFZERO          shift and go to state 23
    IFNZERO         shift and go to state 24
    IFHIGH          shift and go to state 25
    IFNHIGH         shift and go to state 26
    COMMAND         shift and go to state 27
    error           shift and go to state 16
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    statement                      shift and go to state 30
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    statement_error                shift and go to state 13
    variant                        shift and go to state 15

state 123

    (54) bool_math_expression -> bool_expression PLUS bool_expression .
    (54) bool_math_expression -> bool_expression . PLUS bool_expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 54 (bool_math_expression -> bool_expression PLUS bool_expression .)
    PLUS            shift and go to state 99

  ! PLUS            [ reduce using rule 54 (bool_math_expression -> bool_expression PLUS bool_expression .) ]


state 124

    (73) until -> UNTIL bool_expression NEWLINE statements . ENDU
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . statement_error NEWLINE
    (14) empty -> .
    (15) declaration -> . VARIANT variant
    (16) declaration -> . VARIANT variant ASSIGNMENT initialization
    (81) declaration -> . VARIANT error
    (82) declaration -> . VARIANT variant ASSIGNMENT error
    (83) declaration -> . declaration error
    (66) assignment -> . variant ASSIGNMENT expression
    (89) assignment -> . variant ASSIGNMENT error
    (67) convert -> . CONVERT type TO type variant
    (90) convert -> . CONVERT type TO type error
    (91) convert -> . CONVERT type TO error
    (92) convert -> . CONVERT type error
    (93) convert -> . CONVERT error
    (94) convert -> . convert error
    (68) digitize -> . DIGITIZE variant
    (95) digitize -> . DIGITIZE error
    (96) digitize -> . digitize error
    (72) while -> . WHILE bool_expression NEWLINE statements ENDW
    (73) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (74) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (75) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (76) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (77) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) command -> . COMMAND string_expression
    (97) command -> . COMMAND error
    (98) command -> . command error
    (99) statement_error -> . error
    (100) statement_error -> . statement_error error
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    ENDU            shift and go to state 144
    NEWLINE         reduce using rule 14 (empty -> .)
    VARIANT         shift and go to state 14
    CONVERT         shift and go to state 17
    DIGITIZE        shift and go to state 18
    WHILE           shift and go to state 19
    UNTIL           shift and go to state 20
    IFLESS          shift and go to state 21
    IFNLESS         shift and go to state 22
    IFZERO          shift and go to state 23
    IFNZERO         shift and go to state 24
    IFHIGH          shift and go to state 25
    IFNHIGH         shift and go to state 26
    COMMAND         shift and go to state 27
    error           shift and go to state 16
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    statement                      shift and go to state 30
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    statement_error                shift and go to state 13
    variant                        shift and go to state 15

state 125

    (74) if -> IFLESS decimal_expression COMMA decimal_expression . NEWLINE statements ENDIF
    (52) dec_math_expression -> decimal_expression . PLUS decimal_expression

    NEWLINE         shift and go to state 145
    PLUS            shift and go to state 103


state 126

    (52) dec_math_expression -> decimal_expression PLUS decimal_expression .
    (52) dec_math_expression -> decimal_expression . PLUS decimal_expression

  ! shift/reduce conflict for PLUS resolved as shift
    COMMA           reduce using rule 52 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    NEWLINE         reduce using rule 52 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    RSQBRACKET      reduce using rule 52 (dec_math_expression -> decimal_expression PLUS decimal_expression .)
    PLUS            shift and go to state 103

  ! PLUS            [ reduce using rule 52 (dec_math_expression -> decimal_expression PLUS decimal_expression .) ]


state 127

    (75) if -> IFNLESS decimal_expression COMMA decimal_expression . NEWLINE statements ENDIF
    (52) dec_math_expression -> decimal_expression . PLUS decimal_expression

    NEWLINE         shift and go to state 146
    PLUS            shift and go to state 103


state 128

    (76) if -> IFZERO decimal_expression NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . statement_error NEWLINE
    (14) empty -> .
    (15) declaration -> . VARIANT variant
    (16) declaration -> . VARIANT variant ASSIGNMENT initialization
    (81) declaration -> . VARIANT error
    (82) declaration -> . VARIANT variant ASSIGNMENT error
    (83) declaration -> . declaration error
    (66) assignment -> . variant ASSIGNMENT expression
    (89) assignment -> . variant ASSIGNMENT error
    (67) convert -> . CONVERT type TO type variant
    (90) convert -> . CONVERT type TO type error
    (91) convert -> . CONVERT type TO error
    (92) convert -> . CONVERT type error
    (93) convert -> . CONVERT error
    (94) convert -> . convert error
    (68) digitize -> . DIGITIZE variant
    (95) digitize -> . DIGITIZE error
    (96) digitize -> . digitize error
    (72) while -> . WHILE bool_expression NEWLINE statements ENDW
    (73) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (74) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (75) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (76) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (77) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) command -> . COMMAND string_expression
    (97) command -> . COMMAND error
    (98) command -> . command error
    (99) statement_error -> . error
    (100) statement_error -> . statement_error error
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    ENDIF           shift and go to state 147
    NEWLINE         reduce using rule 14 (empty -> .)
    VARIANT         shift and go to state 14
    CONVERT         shift and go to state 17
    DIGITIZE        shift and go to state 18
    WHILE           shift and go to state 19
    UNTIL           shift and go to state 20
    IFLESS          shift and go to state 21
    IFNLESS         shift and go to state 22
    IFZERO          shift and go to state 23
    IFNZERO         shift and go to state 24
    IFHIGH          shift and go to state 25
    IFNHIGH         shift and go to state 26
    COMMAND         shift and go to state 27
    error           shift and go to state 16
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    statement                      shift and go to state 30
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    statement_error                shift and go to state 13
    variant                        shift and go to state 15

state 129

    (77) if -> IFNZERO decimal_expression NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . statement_error NEWLINE
    (14) empty -> .
    (15) declaration -> . VARIANT variant
    (16) declaration -> . VARIANT variant ASSIGNMENT initialization
    (81) declaration -> . VARIANT error
    (82) declaration -> . VARIANT variant ASSIGNMENT error
    (83) declaration -> . declaration error
    (66) assignment -> . variant ASSIGNMENT expression
    (89) assignment -> . variant ASSIGNMENT error
    (67) convert -> . CONVERT type TO type variant
    (90) convert -> . CONVERT type TO type error
    (91) convert -> . CONVERT type TO error
    (92) convert -> . CONVERT type error
    (93) convert -> . CONVERT error
    (94) convert -> . convert error
    (68) digitize -> . DIGITIZE variant
    (95) digitize -> . DIGITIZE error
    (96) digitize -> . digitize error
    (72) while -> . WHILE bool_expression NEWLINE statements ENDW
    (73) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (74) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (75) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (76) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (77) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) command -> . COMMAND string_expression
    (97) command -> . COMMAND error
    (98) command -> . command error
    (99) statement_error -> . error
    (100) statement_error -> . statement_error error
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    ENDIF           shift and go to state 148
    NEWLINE         reduce using rule 14 (empty -> .)
    VARIANT         shift and go to state 14
    CONVERT         shift and go to state 17
    DIGITIZE        shift and go to state 18
    WHILE           shift and go to state 19
    UNTIL           shift and go to state 20
    IFLESS          shift and go to state 21
    IFNLESS         shift and go to state 22
    IFZERO          shift and go to state 23
    IFNZERO         shift and go to state 24
    IFHIGH          shift and go to state 25
    IFNHIGH         shift and go to state 26
    COMMAND         shift and go to state 27
    error           shift and go to state 16
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    statement                      shift and go to state 30
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    statement_error                shift and go to state 13
    variant                        shift and go to state 15

state 130

    (78) if -> IFHIGH decimal_expression COMMA decimal_expression . NEWLINE statements ENDIF
    (52) dec_math_expression -> decimal_expression . PLUS decimal_expression

    NEWLINE         shift and go to state 149
    PLUS            shift and go to state 103


state 131

    (79) if -> IFNHIGH decimal_expression COMMA decimal_expression . NEWLINE statements ENDIF
    (52) dec_math_expression -> decimal_expression . PLUS decimal_expression

    NEWLINE         shift and go to state 150
    PLUS            shift and go to state 103


state 132

    (56) string_math_expression -> string_expression PLUS string_expression .
    (56) string_math_expression -> string_expression . PLUS string_expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 56 (string_math_expression -> string_expression PLUS string_expression .)
    error           reduce using rule 56 (string_math_expression -> string_expression PLUS string_expression .)
    PLUS            shift and go to state 110

  ! PLUS            [ reduce using rule 56 (string_math_expression -> string_expression PLUS string_expression .) ]


state 133

    (21) varsize -> LSQBRACKET decimal_expression RSQBRACKET .

    error           reduce using rule 21 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    ASSIGNMENT      reduce using rule 21 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    NEWLINE         reduce using rule 21 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    PLUS            reduce using rule 21 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    COMMA           reduce using rule 21 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)
    RSQBRACKET      reduce using rule 21 (varsize -> LSQBRACKET decimal_expression RSQBRACKET .)


state 134

    (22) varsize -> LSQBRACKET decimal_expression COMMA . decimal_expression RSQBRACKET
    (86) varsize -> LSQBRACKET decimal_expression COMMA . error RSQBRACKET
    (39) decimal_expression -> . dec_math_expression
    (40) decimal_expression -> . decimal_const
    (41) decimal_expression -> . variant
    (52) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (53) dec_math_expression -> . MINUS decimal_expression
    (62) decimal_const -> . DECIMAL
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    error           shift and go to state 152
    MINUS           shift and go to state 68
    DECIMAL         shift and go to state 69
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    decimal_expression             shift and go to state 151
    dec_math_expression            shift and go to state 65
    decimal_const                  shift and go to state 66
    variant                        shift and go to state 67

state 135

    (84) varsize -> LSQBRACKET error RSQBRACKET .

    error           reduce using rule 84 (varsize -> LSQBRACKET error RSQBRACKET .)
    ASSIGNMENT      reduce using rule 84 (varsize -> LSQBRACKET error RSQBRACKET .)
    NEWLINE         reduce using rule 84 (varsize -> LSQBRACKET error RSQBRACKET .)
    PLUS            reduce using rule 84 (varsize -> LSQBRACKET error RSQBRACKET .)
    COMMA           reduce using rule 84 (varsize -> LSQBRACKET error RSQBRACKET .)
    RSQBRACKET      reduce using rule 84 (varsize -> LSQBRACKET error RSQBRACKET .)


state 136

    (85) varsize -> LSQBRACKET error COMMA . decimal_expression RSQBRACKET
    (87) varsize -> LSQBRACKET error COMMA . error RSQBRACKET
    (39) decimal_expression -> . dec_math_expression
    (40) decimal_expression -> . decimal_const
    (41) decimal_expression -> . variant
    (52) dec_math_expression -> . decimal_expression PLUS decimal_expression
    (53) dec_math_expression -> . MINUS decimal_expression
    (62) decimal_const -> . DECIMAL
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    error           shift and go to state 153
    MINUS           shift and go to state 68
    DECIMAL         shift and go to state 69
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    decimal_expression             shift and go to state 154
    dec_math_expression            shift and go to state 65
    decimal_const                  shift and go to state 66
    variant                        shift and go to state 67

state 137

    (26) init_list -> LBRACE . inits RBRACE
    (27) init_list -> LBRACE . RBRACE
    (28) inits -> . inits init
    (29) inits -> . init
    (30) init -> . const_expressions COMMA const_expression SEMICOLON
    (31) init -> . const_expression SEMICOLON
    (32) const_expressions -> . const_expressions COMMA const_expression
    (33) const_expressions -> . const_expression
    (34) const_expression -> . const_math_expression
    (35) const_expression -> . const
    (50) const_math_expression -> . const_expression PLUS const_expression
    (51) const_math_expression -> . MINUS const_expression
    (58) const -> . TRUE
    (59) const -> . FALSE
    (60) const -> . DECIMAL
    (61) const -> . LETTERS

    RBRACE          shift and go to state 156
    MINUS           shift and go to state 162
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    DECIMAL         shift and go to state 94
    LETTERS         shift and go to state 95

    inits                          shift and go to state 155
    init                           shift and go to state 157
    const_expressions              shift and go to state 158
    const_expression               shift and go to state 159
    const_math_expression          shift and go to state 160
    const                          shift and go to state 161

state 138

    (23) initialization -> LBRACE init_lists . RBRACE
    (24) init_lists -> init_lists . init_list
    (26) init_list -> . LBRACE inits RBRACE
    (27) init_list -> . LBRACE RBRACE

    RBRACE          shift and go to state 163
    LBRACE          shift and go to state 137

    init_list                      shift and go to state 164

state 139

    (25) init_lists -> init_list .

    RBRACE          reduce using rule 25 (init_lists -> init_list .)
    LBRACE          reduce using rule 25 (init_lists -> init_list .)


state 140

    (48) math_expression -> expression PLUS expression .
    (48) math_expression -> expression . PLUS expression

  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 48 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 118

  ! PLUS            [ reduce using rule 48 (math_expression -> expression PLUS expression .) ]


state 141

    (67) convert -> CONVERT type TO type variant .

    NEWLINE         reduce using rule 67 (convert -> CONVERT type TO type variant .)
    error           reduce using rule 67 (convert -> CONVERT type TO type variant .)


state 142

    (90) convert -> CONVERT type TO type error .

    NEWLINE         reduce using rule 90 (convert -> CONVERT type TO type error .)
    error           reduce using rule 90 (convert -> CONVERT type TO type error .)


state 143

    (72) while -> WHILE bool_expression NEWLINE statements ENDW .

    NEWLINE         reduce using rule 72 (while -> WHILE bool_expression NEWLINE statements ENDW .)


state 144

    (73) until -> UNTIL bool_expression NEWLINE statements ENDU .

    NEWLINE         reduce using rule 73 (until -> UNTIL bool_expression NEWLINE statements ENDU .)


state 145

    (74) if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . statement_error NEWLINE
    (14) empty -> .
    (15) declaration -> . VARIANT variant
    (16) declaration -> . VARIANT variant ASSIGNMENT initialization
    (81) declaration -> . VARIANT error
    (82) declaration -> . VARIANT variant ASSIGNMENT error
    (83) declaration -> . declaration error
    (66) assignment -> . variant ASSIGNMENT expression
    (89) assignment -> . variant ASSIGNMENT error
    (67) convert -> . CONVERT type TO type variant
    (90) convert -> . CONVERT type TO type error
    (91) convert -> . CONVERT type TO error
    (92) convert -> . CONVERT type error
    (93) convert -> . CONVERT error
    (94) convert -> . convert error
    (68) digitize -> . DIGITIZE variant
    (95) digitize -> . DIGITIZE error
    (96) digitize -> . digitize error
    (72) while -> . WHILE bool_expression NEWLINE statements ENDW
    (73) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (74) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (75) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (76) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (77) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) command -> . COMMAND string_expression
    (97) command -> . COMMAND error
    (98) command -> . command error
    (99) statement_error -> . error
    (100) statement_error -> . statement_error error
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    NEWLINE         reduce using rule 14 (empty -> .)
    VARIANT         shift and go to state 14
    CONVERT         shift and go to state 17
    DIGITIZE        shift and go to state 18
    WHILE           shift and go to state 19
    UNTIL           shift and go to state 20
    IFLESS          shift and go to state 21
    IFNLESS         shift and go to state 22
    IFZERO          shift and go to state 23
    IFNZERO         shift and go to state 24
    IFHIGH          shift and go to state 25
    IFNHIGH         shift and go to state 26
    COMMAND         shift and go to state 27
    error           shift and go to state 16
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    statements                     shift and go to state 165
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    statement_error                shift and go to state 13
    variant                        shift and go to state 15

state 146

    (75) if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . statement_error NEWLINE
    (14) empty -> .
    (15) declaration -> . VARIANT variant
    (16) declaration -> . VARIANT variant ASSIGNMENT initialization
    (81) declaration -> . VARIANT error
    (82) declaration -> . VARIANT variant ASSIGNMENT error
    (83) declaration -> . declaration error
    (66) assignment -> . variant ASSIGNMENT expression
    (89) assignment -> . variant ASSIGNMENT error
    (67) convert -> . CONVERT type TO type variant
    (90) convert -> . CONVERT type TO type error
    (91) convert -> . CONVERT type TO error
    (92) convert -> . CONVERT type error
    (93) convert -> . CONVERT error
    (94) convert -> . convert error
    (68) digitize -> . DIGITIZE variant
    (95) digitize -> . DIGITIZE error
    (96) digitize -> . digitize error
    (72) while -> . WHILE bool_expression NEWLINE statements ENDW
    (73) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (74) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (75) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (76) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (77) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) command -> . COMMAND string_expression
    (97) command -> . COMMAND error
    (98) command -> . command error
    (99) statement_error -> . error
    (100) statement_error -> . statement_error error
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    NEWLINE         reduce using rule 14 (empty -> .)
    VARIANT         shift and go to state 14
    CONVERT         shift and go to state 17
    DIGITIZE        shift and go to state 18
    WHILE           shift and go to state 19
    UNTIL           shift and go to state 20
    IFLESS          shift and go to state 21
    IFNLESS         shift and go to state 22
    IFZERO          shift and go to state 23
    IFNZERO         shift and go to state 24
    IFHIGH          shift and go to state 25
    IFNHIGH         shift and go to state 26
    COMMAND         shift and go to state 27
    error           shift and go to state 16
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    statements                     shift and go to state 166
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    statement_error                shift and go to state 13
    variant                        shift and go to state 15

state 147

    (76) if -> IFZERO decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 76 (if -> IFZERO decimal_expression NEWLINE statements ENDIF .)


state 148

    (77) if -> IFNZERO decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 77 (if -> IFNZERO decimal_expression NEWLINE statements ENDIF .)


state 149

    (78) if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . statement_error NEWLINE
    (14) empty -> .
    (15) declaration -> . VARIANT variant
    (16) declaration -> . VARIANT variant ASSIGNMENT initialization
    (81) declaration -> . VARIANT error
    (82) declaration -> . VARIANT variant ASSIGNMENT error
    (83) declaration -> . declaration error
    (66) assignment -> . variant ASSIGNMENT expression
    (89) assignment -> . variant ASSIGNMENT error
    (67) convert -> . CONVERT type TO type variant
    (90) convert -> . CONVERT type TO type error
    (91) convert -> . CONVERT type TO error
    (92) convert -> . CONVERT type error
    (93) convert -> . CONVERT error
    (94) convert -> . convert error
    (68) digitize -> . DIGITIZE variant
    (95) digitize -> . DIGITIZE error
    (96) digitize -> . digitize error
    (72) while -> . WHILE bool_expression NEWLINE statements ENDW
    (73) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (74) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (75) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (76) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (77) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) command -> . COMMAND string_expression
    (97) command -> . COMMAND error
    (98) command -> . command error
    (99) statement_error -> . error
    (100) statement_error -> . statement_error error
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    NEWLINE         reduce using rule 14 (empty -> .)
    VARIANT         shift and go to state 14
    CONVERT         shift and go to state 17
    DIGITIZE        shift and go to state 18
    WHILE           shift and go to state 19
    UNTIL           shift and go to state 20
    IFLESS          shift and go to state 21
    IFNLESS         shift and go to state 22
    IFZERO          shift and go to state 23
    IFNZERO         shift and go to state 24
    IFHIGH          shift and go to state 25
    IFNHIGH         shift and go to state 26
    COMMAND         shift and go to state 27
    error           shift and go to state 16
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    statements                     shift and go to state 167
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    statement_error                shift and go to state 13
    variant                        shift and go to state 15

state 150

    (79) if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE . statements ENDIF
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . statement_error NEWLINE
    (14) empty -> .
    (15) declaration -> . VARIANT variant
    (16) declaration -> . VARIANT variant ASSIGNMENT initialization
    (81) declaration -> . VARIANT error
    (82) declaration -> . VARIANT variant ASSIGNMENT error
    (83) declaration -> . declaration error
    (66) assignment -> . variant ASSIGNMENT expression
    (89) assignment -> . variant ASSIGNMENT error
    (67) convert -> . CONVERT type TO type variant
    (90) convert -> . CONVERT type TO type error
    (91) convert -> . CONVERT type TO error
    (92) convert -> . CONVERT type error
    (93) convert -> . CONVERT error
    (94) convert -> . convert error
    (68) digitize -> . DIGITIZE variant
    (95) digitize -> . DIGITIZE error
    (96) digitize -> . digitize error
    (72) while -> . WHILE bool_expression NEWLINE statements ENDW
    (73) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (74) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (75) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (76) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (77) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) command -> . COMMAND string_expression
    (97) command -> . COMMAND error
    (98) command -> . command error
    (99) statement_error -> . error
    (100) statement_error -> . statement_error error
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    NEWLINE         reduce using rule 14 (empty -> .)
    VARIANT         shift and go to state 14
    CONVERT         shift and go to state 17
    DIGITIZE        shift and go to state 18
    WHILE           shift and go to state 19
    UNTIL           shift and go to state 20
    IFLESS          shift and go to state 21
    IFNLESS         shift and go to state 22
    IFZERO          shift and go to state 23
    IFNZERO         shift and go to state 24
    IFHIGH          shift and go to state 25
    IFNHIGH         shift and go to state 26
    COMMAND         shift and go to state 27
    error           shift and go to state 16
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    statements                     shift and go to state 168
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    statement_error                shift and go to state 13
    variant                        shift and go to state 15

state 151

    (22) varsize -> LSQBRACKET decimal_expression COMMA decimal_expression . RSQBRACKET
    (52) dec_math_expression -> decimal_expression . PLUS decimal_expression

    RSQBRACKET      shift and go to state 169
    PLUS            shift and go to state 103


state 152

    (86) varsize -> LSQBRACKET decimal_expression COMMA error . RSQBRACKET

    RSQBRACKET      shift and go to state 170


state 153

    (87) varsize -> LSQBRACKET error COMMA error . RSQBRACKET

    RSQBRACKET      shift and go to state 171


state 154

    (85) varsize -> LSQBRACKET error COMMA decimal_expression . RSQBRACKET
    (52) dec_math_expression -> decimal_expression . PLUS decimal_expression

    RSQBRACKET      shift and go to state 172
    PLUS            shift and go to state 103


state 155

    (26) init_list -> LBRACE inits . RBRACE
    (28) inits -> inits . init
    (30) init -> . const_expressions COMMA const_expression SEMICOLON
    (31) init -> . const_expression SEMICOLON
    (32) const_expressions -> . const_expressions COMMA const_expression
    (33) const_expressions -> . const_expression
    (34) const_expression -> . const_math_expression
    (35) const_expression -> . const
    (50) const_math_expression -> . const_expression PLUS const_expression
    (51) const_math_expression -> . MINUS const_expression
    (58) const -> . TRUE
    (59) const -> . FALSE
    (60) const -> . DECIMAL
    (61) const -> . LETTERS

    RBRACE          shift and go to state 173
    MINUS           shift and go to state 162
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    DECIMAL         shift and go to state 94
    LETTERS         shift and go to state 95

    init                           shift and go to state 174
    const_expressions              shift and go to state 158
    const_expression               shift and go to state 159
    const_math_expression          shift and go to state 160
    const                          shift and go to state 161

state 156

    (27) init_list -> LBRACE RBRACE .

    RBRACE          reduce using rule 27 (init_list -> LBRACE RBRACE .)
    LBRACE          reduce using rule 27 (init_list -> LBRACE RBRACE .)


state 157

    (29) inits -> init .

    RBRACE          reduce using rule 29 (inits -> init .)
    MINUS           reduce using rule 29 (inits -> init .)
    TRUE            reduce using rule 29 (inits -> init .)
    FALSE           reduce using rule 29 (inits -> init .)
    DECIMAL         reduce using rule 29 (inits -> init .)
    LETTERS         reduce using rule 29 (inits -> init .)


state 158

    (30) init -> const_expressions . COMMA const_expression SEMICOLON
    (32) const_expressions -> const_expressions . COMMA const_expression

    COMMA           shift and go to state 175


state 159

    (31) init -> const_expression . SEMICOLON
    (33) const_expressions -> const_expression .
    (50) const_math_expression -> const_expression . PLUS const_expression

    SEMICOLON       shift and go to state 176
    COMMA           reduce using rule 33 (const_expressions -> const_expression .)
    PLUS            shift and go to state 177


state 160

    (34) const_expression -> const_math_expression .

    SEMICOLON       reduce using rule 34 (const_expression -> const_math_expression .)
    PLUS            reduce using rule 34 (const_expression -> const_math_expression .)
    COMMA           reduce using rule 34 (const_expression -> const_math_expression .)


state 161

    (35) const_expression -> const .

    SEMICOLON       reduce using rule 35 (const_expression -> const .)
    PLUS            reduce using rule 35 (const_expression -> const .)
    COMMA           reduce using rule 35 (const_expression -> const .)


state 162

    (51) const_math_expression -> MINUS . const_expression
    (34) const_expression -> . const_math_expression
    (35) const_expression -> . const
    (50) const_math_expression -> . const_expression PLUS const_expression
    (51) const_math_expression -> . MINUS const_expression
    (58) const -> . TRUE
    (59) const -> . FALSE
    (60) const -> . DECIMAL
    (61) const -> . LETTERS

    MINUS           shift and go to state 162
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    DECIMAL         shift and go to state 94
    LETTERS         shift and go to state 95

    const_expression               shift and go to state 178
    const_math_expression          shift and go to state 160
    const                          shift and go to state 161

state 163

    (23) initialization -> LBRACE init_lists RBRACE .

    NEWLINE         reduce using rule 23 (initialization -> LBRACE init_lists RBRACE .)
    error           reduce using rule 23 (initialization -> LBRACE init_lists RBRACE .)


state 164

    (24) init_lists -> init_lists init_list .

    RBRACE          reduce using rule 24 (init_lists -> init_lists init_list .)
    LBRACE          reduce using rule 24 (init_lists -> init_lists init_list .)


state 165

    (74) if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . statement_error NEWLINE
    (14) empty -> .
    (15) declaration -> . VARIANT variant
    (16) declaration -> . VARIANT variant ASSIGNMENT initialization
    (81) declaration -> . VARIANT error
    (82) declaration -> . VARIANT variant ASSIGNMENT error
    (83) declaration -> . declaration error
    (66) assignment -> . variant ASSIGNMENT expression
    (89) assignment -> . variant ASSIGNMENT error
    (67) convert -> . CONVERT type TO type variant
    (90) convert -> . CONVERT type TO type error
    (91) convert -> . CONVERT type TO error
    (92) convert -> . CONVERT type error
    (93) convert -> . CONVERT error
    (94) convert -> . convert error
    (68) digitize -> . DIGITIZE variant
    (95) digitize -> . DIGITIZE error
    (96) digitize -> . digitize error
    (72) while -> . WHILE bool_expression NEWLINE statements ENDW
    (73) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (74) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (75) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (76) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (77) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) command -> . COMMAND string_expression
    (97) command -> . COMMAND error
    (98) command -> . command error
    (99) statement_error -> . error
    (100) statement_error -> . statement_error error
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    ENDIF           shift and go to state 179
    NEWLINE         reduce using rule 14 (empty -> .)
    VARIANT         shift and go to state 14
    CONVERT         shift and go to state 17
    DIGITIZE        shift and go to state 18
    WHILE           shift and go to state 19
    UNTIL           shift and go to state 20
    IFLESS          shift and go to state 21
    IFNLESS         shift and go to state 22
    IFZERO          shift and go to state 23
    IFNZERO         shift and go to state 24
    IFHIGH          shift and go to state 25
    IFNHIGH         shift and go to state 26
    COMMAND         shift and go to state 27
    error           shift and go to state 16
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    statement                      shift and go to state 30
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    statement_error                shift and go to state 13
    variant                        shift and go to state 15

state 166

    (75) if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . statement_error NEWLINE
    (14) empty -> .
    (15) declaration -> . VARIANT variant
    (16) declaration -> . VARIANT variant ASSIGNMENT initialization
    (81) declaration -> . VARIANT error
    (82) declaration -> . VARIANT variant ASSIGNMENT error
    (83) declaration -> . declaration error
    (66) assignment -> . variant ASSIGNMENT expression
    (89) assignment -> . variant ASSIGNMENT error
    (67) convert -> . CONVERT type TO type variant
    (90) convert -> . CONVERT type TO type error
    (91) convert -> . CONVERT type TO error
    (92) convert -> . CONVERT type error
    (93) convert -> . CONVERT error
    (94) convert -> . convert error
    (68) digitize -> . DIGITIZE variant
    (95) digitize -> . DIGITIZE error
    (96) digitize -> . digitize error
    (72) while -> . WHILE bool_expression NEWLINE statements ENDW
    (73) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (74) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (75) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (76) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (77) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) command -> . COMMAND string_expression
    (97) command -> . COMMAND error
    (98) command -> . command error
    (99) statement_error -> . error
    (100) statement_error -> . statement_error error
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    ENDIF           shift and go to state 180
    NEWLINE         reduce using rule 14 (empty -> .)
    VARIANT         shift and go to state 14
    CONVERT         shift and go to state 17
    DIGITIZE        shift and go to state 18
    WHILE           shift and go to state 19
    UNTIL           shift and go to state 20
    IFLESS          shift and go to state 21
    IFNLESS         shift and go to state 22
    IFZERO          shift and go to state 23
    IFNZERO         shift and go to state 24
    IFHIGH          shift and go to state 25
    IFNHIGH         shift and go to state 26
    COMMAND         shift and go to state 27
    error           shift and go to state 16
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    statement                      shift and go to state 30
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    statement_error                shift and go to state 13
    variant                        shift and go to state 15

state 167

    (78) if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . statement_error NEWLINE
    (14) empty -> .
    (15) declaration -> . VARIANT variant
    (16) declaration -> . VARIANT variant ASSIGNMENT initialization
    (81) declaration -> . VARIANT error
    (82) declaration -> . VARIANT variant ASSIGNMENT error
    (83) declaration -> . declaration error
    (66) assignment -> . variant ASSIGNMENT expression
    (89) assignment -> . variant ASSIGNMENT error
    (67) convert -> . CONVERT type TO type variant
    (90) convert -> . CONVERT type TO type error
    (91) convert -> . CONVERT type TO error
    (92) convert -> . CONVERT type error
    (93) convert -> . CONVERT error
    (94) convert -> . convert error
    (68) digitize -> . DIGITIZE variant
    (95) digitize -> . DIGITIZE error
    (96) digitize -> . digitize error
    (72) while -> . WHILE bool_expression NEWLINE statements ENDW
    (73) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (74) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (75) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (76) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (77) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) command -> . COMMAND string_expression
    (97) command -> . COMMAND error
    (98) command -> . command error
    (99) statement_error -> . error
    (100) statement_error -> . statement_error error
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    ENDIF           shift and go to state 181
    NEWLINE         reduce using rule 14 (empty -> .)
    VARIANT         shift and go to state 14
    CONVERT         shift and go to state 17
    DIGITIZE        shift and go to state 18
    WHILE           shift and go to state 19
    UNTIL           shift and go to state 20
    IFLESS          shift and go to state 21
    IFNLESS         shift and go to state 22
    IFZERO          shift and go to state 23
    IFNZERO         shift and go to state 24
    IFHIGH          shift and go to state 25
    IFNHIGH         shift and go to state 26
    COMMAND         shift and go to state 27
    error           shift and go to state 16
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    statement                      shift and go to state 30
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    statement_error                shift and go to state 13
    variant                        shift and go to state 15

state 168

    (79) if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements . ENDIF
    (2) statements -> statements . statement
    (4) statement -> . empty NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . convert NEWLINE
    (8) statement -> . digitize NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . until NEWLINE
    (11) statement -> . if NEWLINE
    (12) statement -> . command NEWLINE
    (13) statement -> . statement_error NEWLINE
    (14) empty -> .
    (15) declaration -> . VARIANT variant
    (16) declaration -> . VARIANT variant ASSIGNMENT initialization
    (81) declaration -> . VARIANT error
    (82) declaration -> . VARIANT variant ASSIGNMENT error
    (83) declaration -> . declaration error
    (66) assignment -> . variant ASSIGNMENT expression
    (89) assignment -> . variant ASSIGNMENT error
    (67) convert -> . CONVERT type TO type variant
    (90) convert -> . CONVERT type TO type error
    (91) convert -> . CONVERT type TO error
    (92) convert -> . CONVERT type error
    (93) convert -> . CONVERT error
    (94) convert -> . convert error
    (68) digitize -> . DIGITIZE variant
    (95) digitize -> . DIGITIZE error
    (96) digitize -> . digitize error
    (72) while -> . WHILE bool_expression NEWLINE statements ENDW
    (73) until -> . UNTIL bool_expression NEWLINE statements ENDU
    (74) if -> . IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (75) if -> . IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (76) if -> . IFZERO decimal_expression NEWLINE statements ENDIF
    (77) if -> . IFNZERO decimal_expression NEWLINE statements ENDIF
    (78) if -> . IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (79) if -> . IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF
    (80) command -> . COMMAND string_expression
    (97) command -> . COMMAND error
    (98) command -> . command error
    (99) statement_error -> . error
    (100) statement_error -> . statement_error error
    (17) variant -> . NAME
    (18) variant -> . NAME varsize
    (19) variant -> . PARAM
    (20) variant -> . PARAM varsize

    ENDIF           shift and go to state 182
    NEWLINE         reduce using rule 14 (empty -> .)
    VARIANT         shift and go to state 14
    CONVERT         shift and go to state 17
    DIGITIZE        shift and go to state 18
    WHILE           shift and go to state 19
    UNTIL           shift and go to state 20
    IFLESS          shift and go to state 21
    IFNLESS         shift and go to state 22
    IFZERO          shift and go to state 23
    IFNZERO         shift and go to state 24
    IFHIGH          shift and go to state 25
    IFNHIGH         shift and go to state 26
    COMMAND         shift and go to state 27
    error           shift and go to state 16
    NAME            shift and go to state 28
    PARAM           shift and go to state 29

    statement                      shift and go to state 30
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    convert                        shift and go to state 7
    digitize                       shift and go to state 8
    while                          shift and go to state 9
    until                          shift and go to state 10
    if                             shift and go to state 11
    command                        shift and go to state 12
    statement_error                shift and go to state 13
    variant                        shift and go to state 15

state 169

    (22) varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .

    error           reduce using rule 22 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    ASSIGNMENT      reduce using rule 22 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    NEWLINE         reduce using rule 22 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    PLUS            reduce using rule 22 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    COMMA           reduce using rule 22 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)
    RSQBRACKET      reduce using rule 22 (varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET .)


state 170

    (86) varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .

    error           reduce using rule 86 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    ASSIGNMENT      reduce using rule 86 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    NEWLINE         reduce using rule 86 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    PLUS            reduce using rule 86 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    COMMA           reduce using rule 86 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)
    RSQBRACKET      reduce using rule 86 (varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET .)


state 171

    (87) varsize -> LSQBRACKET error COMMA error RSQBRACKET .

    error           reduce using rule 87 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    ASSIGNMENT      reduce using rule 87 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    NEWLINE         reduce using rule 87 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    PLUS            reduce using rule 87 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    COMMA           reduce using rule 87 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)
    RSQBRACKET      reduce using rule 87 (varsize -> LSQBRACKET error COMMA error RSQBRACKET .)


state 172

    (85) varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .

    error           reduce using rule 85 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    ASSIGNMENT      reduce using rule 85 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    NEWLINE         reduce using rule 85 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    PLUS            reduce using rule 85 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    COMMA           reduce using rule 85 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)
    RSQBRACKET      reduce using rule 85 (varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET .)


state 173

    (26) init_list -> LBRACE inits RBRACE .

    RBRACE          reduce using rule 26 (init_list -> LBRACE inits RBRACE .)
    LBRACE          reduce using rule 26 (init_list -> LBRACE inits RBRACE .)


state 174

    (28) inits -> inits init .

    RBRACE          reduce using rule 28 (inits -> inits init .)
    MINUS           reduce using rule 28 (inits -> inits init .)
    TRUE            reduce using rule 28 (inits -> inits init .)
    FALSE           reduce using rule 28 (inits -> inits init .)
    DECIMAL         reduce using rule 28 (inits -> inits init .)
    LETTERS         reduce using rule 28 (inits -> inits init .)


state 175

    (30) init -> const_expressions COMMA . const_expression SEMICOLON
    (32) const_expressions -> const_expressions COMMA . const_expression
    (34) const_expression -> . const_math_expression
    (35) const_expression -> . const
    (50) const_math_expression -> . const_expression PLUS const_expression
    (51) const_math_expression -> . MINUS const_expression
    (58) const -> . TRUE
    (59) const -> . FALSE
    (60) const -> . DECIMAL
    (61) const -> . LETTERS

    MINUS           shift and go to state 162
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    DECIMAL         shift and go to state 94
    LETTERS         shift and go to state 95

    const_expression               shift and go to state 183
    const_math_expression          shift and go to state 160
    const                          shift and go to state 161

state 176

    (31) init -> const_expression SEMICOLON .

    RBRACE          reduce using rule 31 (init -> const_expression SEMICOLON .)
    MINUS           reduce using rule 31 (init -> const_expression SEMICOLON .)
    TRUE            reduce using rule 31 (init -> const_expression SEMICOLON .)
    FALSE           reduce using rule 31 (init -> const_expression SEMICOLON .)
    DECIMAL         reduce using rule 31 (init -> const_expression SEMICOLON .)
    LETTERS         reduce using rule 31 (init -> const_expression SEMICOLON .)


state 177

    (50) const_math_expression -> const_expression PLUS . const_expression
    (34) const_expression -> . const_math_expression
    (35) const_expression -> . const
    (50) const_math_expression -> . const_expression PLUS const_expression
    (51) const_math_expression -> . MINUS const_expression
    (58) const -> . TRUE
    (59) const -> . FALSE
    (60) const -> . DECIMAL
    (61) const -> . LETTERS

    MINUS           shift and go to state 162
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    DECIMAL         shift and go to state 94
    LETTERS         shift and go to state 95

    const_expression               shift and go to state 184
    const_math_expression          shift and go to state 160
    const                          shift and go to state 161

state 178

    (51) const_math_expression -> MINUS const_expression .
    (50) const_math_expression -> const_expression . PLUS const_expression

  ! shift/reduce conflict for PLUS resolved as shift
    SEMICOLON       reduce using rule 51 (const_math_expression -> MINUS const_expression .)
    COMMA           reduce using rule 51 (const_math_expression -> MINUS const_expression .)
    PLUS            shift and go to state 177

  ! PLUS            [ reduce using rule 51 (const_math_expression -> MINUS const_expression .) ]


state 179

    (74) if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 74 (if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)


state 180

    (75) if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 75 (if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)


state 181

    (78) if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 78 (if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)


state 182

    (79) if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .

    NEWLINE         reduce using rule 79 (if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF .)


state 183

    (30) init -> const_expressions COMMA const_expression . SEMICOLON
    (32) const_expressions -> const_expressions COMMA const_expression .
    (50) const_math_expression -> const_expression . PLUS const_expression

    SEMICOLON       shift and go to state 185
    COMMA           reduce using rule 32 (const_expressions -> const_expressions COMMA const_expression .)
    PLUS            shift and go to state 177


state 184

    (50) const_math_expression -> const_expression PLUS const_expression .
    (50) const_math_expression -> const_expression . PLUS const_expression

  ! shift/reduce conflict for PLUS resolved as shift
    SEMICOLON       reduce using rule 50 (const_math_expression -> const_expression PLUS const_expression .)
    COMMA           reduce using rule 50 (const_math_expression -> const_expression PLUS const_expression .)
    PLUS            shift and go to state 177

  ! PLUS            [ reduce using rule 50 (const_math_expression -> const_expression PLUS const_expression .) ]


state 185

    (30) init -> const_expressions COMMA const_expression SEMICOLON .

    RBRACE          reduce using rule 30 (init -> const_expressions COMMA const_expression SEMICOLON .)
    MINUS           reduce using rule 30 (init -> const_expressions COMMA const_expression SEMICOLON .)
    TRUE            reduce using rule 30 (init -> const_expressions COMMA const_expression SEMICOLON .)
    FALSE           reduce using rule 30 (init -> const_expressions COMMA const_expression SEMICOLON .)
    DECIMAL         reduce using rule 30 (init -> const_expressions COMMA const_expression SEMICOLON .)
    LETTERS         reduce using rule 30 (init -> const_expressions COMMA const_expression SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for error in state 82 resolved as shift
WARNING: shift/reduce conflict for error in state 84 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 123 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 140 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 178 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 184 resolved as shift
