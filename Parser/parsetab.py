
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGNMENT BOOL CALL COMMA COMMAND CONVERT DECIMAL DIGIT DIGITIZE ENDFUNC ENDIF ENDU ENDW FALSE FUNC IFHIGH IFLESS IFNHIGH IFNLESS IFNZERO IFZERO LBRACE LETTERS LSQBRACKET MINUS NAME NEWLINE PARAM PLUS RBRACE RETURN RSQBRACKET SEMICOLON STRING TO TRUE UNTIL VARIANT WHILEprogram : statementsstatements : statements statement\n                        | statementstatement : declaration NEWLINEdeclaration : VARIANT variant\n                        | VARIANT variant ASSIGNMENT init_listsvariant : NAME\n                    | NAME varsizevarsize : LSQBRACKET expression RSQBRACKET\n                    | LSQBRACKET expression COMMA expression RSQBRACKETinit_lists : LBRACE init_lists init_list RBRACE\n                        | LBRACE init_list RBRACEinit_list : LBRACE inits RBRACE\n                        | LBRACE RBRACEinits : inits init\n                    | initinit : expressions COMMA expression SEMICOLON\n                    | expression SEMICOLONexpressions : expressions COMMA expression\n                        | expressionexpression : math_expression\n                        | const\n                        | variantmath_expression : expression PLUS expression\n                            | MINUS expressionconst : TRUE\n                | FALSE\n                | DECIMAL\n                | LETTERS'
    
_lr_action_items = {'VARIANT':([0,2,3,6,7,],[5,5,-3,-2,-4,]),'$end':([1,2,3,6,7,],[0,-1,-3,-2,-4,]),'NEWLINE':([4,8,9,11,13,27,38,45,46,],[7,-5,-7,-8,-6,-9,-12,-11,-10,]),'NAME':([5,12,19,24,28,29,32,33,36,42,43,44,48,],[9,9,9,9,9,9,9,-16,9,-15,9,-18,-17,]),'ASSIGNMENT':([8,9,11,27,46,],[10,-7,-8,-9,-10,]),'RSQBRACKET':([9,11,15,16,17,18,20,21,22,23,27,30,39,40,46,],[-7,-8,27,-21,-22,-23,-26,-27,-28,-29,-9,-25,46,-24,-10,]),'COMMA':([9,11,15,16,17,18,20,21,22,23,27,30,34,35,40,46,47,],[-7,-8,28,-21,-22,-23,-26,-27,-28,-29,-9,-25,43,-20,-24,-10,-19,]),'PLUS':([9,11,15,16,17,18,20,21,22,23,27,30,35,39,40,46,47,],[-7,-8,29,-21,-22,-23,-26,-27,-28,-29,-9,29,29,29,29,-10,29,]),'SEMICOLON':([9,11,16,17,18,20,21,22,23,27,30,35,40,46,47,],[-7,-8,-21,-22,-23,-26,-27,-28,-29,-9,-25,44,-24,-10,48,]),'LSQBRACKET':([9,],[12,]),'LBRACE':([10,14,24,25,38,45,],[14,24,24,36,-12,-11,]),'MINUS':([12,19,24,28,29,32,33,36,42,43,44,48,],[19,19,19,19,19,19,-16,19,-15,19,-18,-17,]),'TRUE':([12,19,24,28,29,32,33,36,42,43,44,48,],[20,20,20,20,20,20,-16,20,-15,20,-18,-17,]),'FALSE':([12,19,24,28,29,32,33,36,42,43,44,48,],[21,21,21,21,21,21,-16,21,-15,21,-18,-17,]),'DECIMAL':([12,19,24,28,29,32,33,36,42,43,44,48,],[22,22,22,22,22,22,-16,22,-15,22,-18,-17,]),'LETTERS':([12,19,24,28,29,32,33,36,42,43,44,48,],[23,23,23,23,23,23,-16,23,-15,23,-18,-17,]),'RBRACE':([24,26,31,32,33,36,37,41,42,44,48,],[31,38,-14,41,-16,31,45,-13,-15,-18,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,],[2,]),'statement':([0,2,],[3,6,]),'declaration':([0,2,],[4,4,]),'variant':([5,12,19,24,28,29,32,36,43,],[8,18,18,18,18,18,18,18,18,]),'varsize':([9,],[11,]),'init_lists':([10,14,24,],[13,25,25,]),'expression':([12,19,24,28,29,32,36,43,],[15,30,35,39,40,35,35,47,]),'math_expression':([12,19,24,28,29,32,36,43,],[16,16,16,16,16,16,16,16,]),'const':([12,19,24,28,29,32,36,43,],[17,17,17,17,17,17,17,17,]),'init_list':([14,24,25,],[26,26,37,]),'inits':([24,36,],[32,32,]),'init':([24,32,36,],[33,42,33,]),'expressions':([24,32,36,],[34,34,34,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',27),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',31),
  ('statements -> statement','statements',1,'p_statements','parser.py',32),
  ('statement -> declaration NEWLINE','statement',2,'p_statement','parser.py',39),
  ('declaration -> VARIANT variant','declaration',2,'p_declaration','parser.py',51),
  ('declaration -> VARIANT variant ASSIGNMENT init_lists','declaration',4,'p_declaration','parser.py',52),
  ('variant -> NAME','variant',1,'p_variant','parser.py',59),
  ('variant -> NAME varsize','variant',2,'p_variant','parser.py',60),
  ('varsize -> LSQBRACKET expression RSQBRACKET','varsize',3,'p_varsize','parser.py',67),
  ('varsize -> LSQBRACKET expression COMMA expression RSQBRACKET','varsize',5,'p_varsize','parser.py',68),
  ('init_lists -> LBRACE init_lists init_list RBRACE','init_lists',4,'p_init_lists','parser.py',75),
  ('init_lists -> LBRACE init_list RBRACE','init_lists',3,'p_init_lists','parser.py',76),
  ('init_list -> LBRACE inits RBRACE','init_list',3,'p_init_list','parser.py',83),
  ('init_list -> LBRACE RBRACE','init_list',2,'p_init_list','parser.py',84),
  ('inits -> inits init','inits',2,'p_inits','parser.py',91),
  ('inits -> init','inits',1,'p_inits','parser.py',92),
  ('init -> expressions COMMA expression SEMICOLON','init',4,'p_init','parser.py',99),
  ('init -> expression SEMICOLON','init',2,'p_init','parser.py',100),
  ('expressions -> expressions COMMA expression','expressions',3,'p_expressions','parser.py',107),
  ('expressions -> expression','expressions',1,'p_expressions','parser.py',108),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',115),
  ('expression -> const','expression',1,'p_expression','parser.py',116),
  ('expression -> variant','expression',1,'p_expression','parser.py',117),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',121),
  ('math_expression -> MINUS expression','math_expression',2,'p_math_expression','parser.py',122),
  ('const -> TRUE','const',1,'p_const','parser.py',129),
  ('const -> FALSE','const',1,'p_const','parser.py',130),
  ('const -> DECIMAL','const',1,'p_const','parser.py',131),
  ('const -> LETTERS','const',1,'p_const','parser.py',132),
]
