
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGNMENT BOOL CALL COMMA COMMAND CONVERT DECIMAL DIGIT DIGITIZE ENDFUNC ENDIF ENDU ENDW FALSE FUNC IFHIGH IFLESS IFNHIGH IFNLESS IFNZERO IFZERO LBRACE LETTERS LSQBRACKET MINUS NAME NEWLINE PARAM PLUS RBRACE RETURN RSQBRACKET SEMICOLON STRING TO TRUE UNTIL VARIANT WHILEprogram : statementsstatements : statements statement\n                        | statementstatement : empty NEWLINE\n                        | declaration NEWLINE\n                        | assignment NEWLINE\n                        | convert NEWLINE\n                        | while NEWLINE\n                        | until NEWLINE\n                        | if NEWLINE\n                        | statement_error NEWLINEempty : declaration : VARIANT variant\n                        | VARIANT variant ASSIGNMENT initializationdeclaration : VARIANT error\n                        | VARIANT variant ASSIGNMENT error\n                        | declaration errorvariant : NAME\n                    | NAME varsizevarsize : LSQBRACKET decimal_expression RSQBRACKET\n                    | LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKETvarsize : LSQBRACKET error RSQBRACKET\n                    | LSQBRACKET error COMMA decimal_expression RSQBRACKET\n                    | LSQBRACKET decimal_expression COMMA error RSQBRACKET\n                    | LSQBRACKET error COMMA error RSQBRACKET\n                    | varsize errorinitialization : LBRACE init_lists RBRACEinit_lists : init_lists init_list\n                        | init_listinit_list : LBRACE inits RBRACE\n                        | LBRACE RBRACEinits : inits init\n                    | initinit : const_expressions COMMA const_expression SEMICOLON\n                    | const_expression SEMICOLONconst_expressions : const_expressions COMMA const_expression\n                        | const_expressionconst_expression : const_math_expression\n                        | constexpression : math_expression\n                        | const\n                        | variantdecimal_expression : dec_math_expression\n                                | decimal_const\n                                | variantbool_expression : bool_math_expression\n                            | bool_const\n                            | variantmath_expression : expression PLUS expression\n                            | MINUS expressionconst_math_expression : const_expression PLUS const_expression\n                            | MINUS const_expressiondec_math_expression : decimal_expression PLUS decimal_expression\n                                | MINUS decimal_expressionbool_math_expression : bool_expression PLUS bool_expression\n                                | MINUS bool_expressionconst : TRUE\n                | FALSE\n                | DECIMAL\n                | LETTERSdecimal_const : DECIMALbool_const : TRUE\n                        | FALSEassignment : variant ASSIGNMENT expressionassignment : variant ASSIGNMENT errorconvert : CONVERT type TO type variantconvert : CONVERT type TO type error\n                    | CONVERT type TO error\n                    | CONVERT type error\n                    | CONVERT error\n                    | convert errortype : BOOL\n                | DIGIT\n                | STRINGwhile : WHILE bool_expression NEWLINE statements ENDWuntil : UNTIL bool_expression NEWLINE statements ENDUif : IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF\n              | IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF\n              | IFZERO decimal_expression NEWLINE statements ENDIF\n              | IFNZERO decimal_expression NEWLINE statements ENDIF\n              | IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF\n              | IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIFstatement_error : error\n                            | statement_error error'
    
_lr_action_items = {'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,14,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,41,45,46,47,48,50,51,52,54,55,56,58,60,61,64,67,68,69,70,71,73,74,75,76,78,79,81,82,85,87,88,91,94,95,98,100,101,102,103,104,105,106,107,108,109,110,111,113,118,119,120,121,122,123,124,125,126,127,128,141,143,144,145,146,147,148,149,150,157,158,159,160,],[-12,-12,-3,26,27,29,30,32,33,34,35,-83,-18,-2,-4,-5,-17,-6,-7,-71,-8,-9,-10,-11,-84,-13,-15,-70,79,-46,-47,-48,-62,-63,82,-43,-44,-45,-61,87,88,-19,-42,-64,-65,-40,-41,-57,-58,-59,-60,-69,-12,-56,-12,-54,-12,-12,-26,-14,-16,-50,-68,-12,-55,-12,123,-53,124,-12,-12,127,128,-20,-22,-49,-66,-67,-75,-76,-12,-12,-79,-80,-12,-12,-27,-12,-12,-12,-12,-21,-24,-25,-23,-77,-78,-81,-82,]),'VARIANT':([0,2,3,25,26,27,29,30,32,33,34,35,79,82,87,88,101,103,107,108,123,124,127,128,143,144,145,146,],[12,12,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'CONVERT':([0,2,3,25,26,27,29,30,32,33,34,35,79,82,87,88,101,103,107,108,123,124,127,128,143,144,145,146,],[15,15,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'WHILE':([0,2,3,25,26,27,29,30,32,33,34,35,79,82,87,88,101,103,107,108,123,124,127,128,143,144,145,146,],[16,16,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'UNTIL':([0,2,3,25,26,27,29,30,32,33,34,35,79,82,87,88,101,103,107,108,123,124,127,128,143,144,145,146,],[17,17,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'IFLESS':([0,2,3,25,26,27,29,30,32,33,34,35,79,82,87,88,101,103,107,108,123,124,127,128,143,144,145,146,],[18,18,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'IFNLESS':([0,2,3,25,26,27,29,30,32,33,34,35,79,82,87,88,101,103,107,108,123,124,127,128,143,144,145,146,],[19,19,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'IFZERO':([0,2,3,25,26,27,29,30,32,33,34,35,79,82,87,88,101,103,107,108,123,124,127,128,143,144,145,146,],[20,20,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'IFNZERO':([0,2,3,25,26,27,29,30,32,33,34,35,79,82,87,88,101,103,107,108,123,124,127,128,143,144,145,146,],[21,21,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'IFHIGH':([0,2,3,25,26,27,29,30,32,33,34,35,79,82,87,88,101,103,107,108,123,124,127,128,143,144,145,146,],[22,22,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'IFNHIGH':([0,2,3,25,26,27,29,30,32,33,34,35,79,82,87,88,101,103,107,108,123,124,127,128,143,144,145,146,],[23,23,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'error':([0,2,3,5,7,11,12,14,15,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,64,65,66,77,78,79,82,87,88,91,94,95,99,100,101,103,107,108,111,112,113,114,119,120,123,124,127,128,141,143,144,145,146,147,148,149,150,],[14,14,-3,28,31,36,38,-83,41,-18,-2,-4,-5,-17,-6,-7,-71,-8,-9,-10,-11,-84,-13,-15,69,78,-70,-72,-73,-74,91,93,95,100,-69,14,14,14,14,-26,-14,-16,120,-68,14,14,14,14,-20,130,-22,131,-66,-67,14,14,14,14,-27,14,14,14,14,-21,-24,-25,-23,]),'NAME':([0,2,3,12,16,17,18,19,20,21,22,23,25,26,27,29,30,32,33,34,35,39,42,43,44,49,57,65,72,79,80,82,83,84,86,87,88,89,90,97,99,101,103,107,108,112,114,123,124,127,128,143,144,145,146,],[24,24,-3,24,24,24,24,24,24,24,24,24,-2,-4,-5,-6,-7,-8,-9,-10,-11,24,-72,-73,-74,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'$end':([1,2,3,25,26,27,29,30,32,33,34,35,],[0,-1,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,]),'ENDW':([3,25,26,27,29,30,32,33,34,35,101,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,121,]),'ENDU':([3,25,26,27,29,30,32,33,34,35,103,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,122,]),'ENDIF':([3,25,26,27,29,30,32,33,34,35,107,108,143,144,145,146,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,125,126,157,158,159,160,]),'ASSIGNMENT':([13,24,37,64,91,111,113,147,148,149,150,],[39,-18,66,-19,-26,-20,-22,-21,-24,-25,-23,]),'BOOL':([15,77,],[42,42,]),'DIGIT':([15,77,],[43,43,]),'STRING':([15,77,],[44,44,]),'MINUS':([16,17,18,19,20,21,22,23,39,49,57,65,72,80,83,84,86,89,90,97,112,114,115,133,135,140,152,153,154,155,163,],[49,49,57,57,57,57,57,57,72,49,57,57,72,49,57,57,57,57,57,72,57,57,140,140,-33,140,-32,140,-35,140,-34,]),'TRUE':([16,17,39,49,72,80,97,115,133,135,140,152,153,154,155,163,],[50,50,73,50,73,50,73,73,73,-33,73,-32,73,-35,73,-34,]),'FALSE':([16,17,39,49,72,80,97,115,133,135,140,152,153,154,155,163,],[51,51,74,51,74,51,74,74,74,-33,74,-32,74,-35,74,-34,]),'DECIMAL':([18,19,20,21,22,23,39,57,65,72,83,84,86,89,90,97,112,114,115,133,135,140,152,153,154,155,163,],[58,58,58,58,58,58,75,58,58,75,58,58,58,58,58,75,58,58,75,75,-33,75,-32,75,-35,75,-34,]),'PLUS':([24,45,46,47,48,50,51,52,53,54,55,56,58,59,60,61,62,63,64,67,68,70,71,73,74,75,76,81,85,91,92,98,102,104,105,106,109,110,111,113,118,129,132,137,138,139,147,148,149,150,156,161,162,],[-18,80,-46,-47,-48,-62,-63,80,84,-43,-44,-45,-61,84,84,84,84,84,-19,-42,97,-40,-41,-57,-58,-59,-60,80,84,-26,84,97,80,84,84,84,84,84,-20,-22,97,84,84,155,-38,-39,-21,-24,-25,-23,155,155,155,]),'COMMA':([24,53,54,55,56,58,59,62,63,64,73,74,75,76,85,91,92,93,105,111,113,136,137,138,139,147,148,149,150,156,161,162,],[-18,83,-43,-44,-45,-61,86,89,90,-19,-57,-58,-59,-60,-54,-26,112,114,-53,-20,-22,153,-37,-38,-39,-21,-24,-25,-23,-52,-36,-51,]),'RSQBRACKET':([24,54,55,56,58,64,85,91,92,93,105,111,113,129,130,131,132,147,148,149,150,],[-18,-43,-44,-45,-61,-19,-54,-26,111,113,-53,-20,-22,147,148,149,150,-21,-24,-25,-23,]),'LSQBRACKET':([24,],[65,]),'LETTERS':([39,72,97,115,133,135,140,152,153,154,155,163,],[76,76,76,76,76,-33,76,-32,76,-35,76,-34,]),'TO':([40,42,43,44,],[77,-72,-73,-74,]),'LBRACE':([66,96,116,117,134,142,151,],[96,115,115,-29,-31,-28,-30,]),'SEMICOLON':([73,74,75,76,137,138,139,156,161,162,],[-57,-58,-59,-60,154,-38,-39,-52,163,-51,]),'RBRACE':([115,116,117,133,134,135,142,151,152,154,163,],[134,141,-29,151,-31,-33,-28,-30,-32,-35,-34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,79,82,87,88,123,124,127,128,],[2,101,103,107,108,143,144,145,146,]),'statement':([0,2,79,82,87,88,101,103,107,108,123,124,127,128,143,144,145,146,],[3,25,3,3,3,3,25,25,25,25,3,3,3,3,25,25,25,25,]),'empty':([0,2,79,82,87,88,101,103,107,108,123,124,127,128,143,144,145,146,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'declaration':([0,2,79,82,87,88,101,103,107,108,123,124,127,128,143,144,145,146,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'assignment':([0,2,79,82,87,88,101,103,107,108,123,124,127,128,143,144,145,146,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'convert':([0,2,79,82,87,88,101,103,107,108,123,124,127,128,143,144,145,146,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'while':([0,2,79,82,87,88,101,103,107,108,123,124,127,128,143,144,145,146,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'until':([0,2,79,82,87,88,101,103,107,108,123,124,127,128,143,144,145,146,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'if':([0,2,79,82,87,88,101,103,107,108,123,124,127,128,143,144,145,146,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'statement_error':([0,2,79,82,87,88,101,103,107,108,123,124,127,128,143,144,145,146,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'variant':([0,2,12,16,17,18,19,20,21,22,23,39,49,57,65,72,79,80,82,83,84,86,87,88,89,90,97,99,101,103,107,108,112,114,123,124,127,128,143,144,145,146,],[13,13,37,48,48,56,56,56,56,56,56,67,48,56,56,67,13,48,13,56,56,56,13,13,56,56,67,119,13,13,13,13,56,56,13,13,13,13,13,13,13,13,]),'type':([15,77,],[40,99,]),'bool_expression':([16,17,49,80,],[45,52,81,102,]),'bool_math_expression':([16,17,49,80,],[46,46,46,46,]),'bool_const':([16,17,49,80,],[47,47,47,47,]),'decimal_expression':([18,19,20,21,22,23,57,65,83,84,86,89,90,112,114,],[53,59,60,61,62,63,85,92,104,105,106,109,110,129,132,]),'dec_math_expression':([18,19,20,21,22,23,57,65,83,84,86,89,90,112,114,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'decimal_const':([18,19,20,21,22,23,57,65,83,84,86,89,90,112,114,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'varsize':([24,],[64,]),'expression':([39,72,97,],[68,98,118,]),'math_expression':([39,72,97,],[70,70,70,]),'const':([39,72,97,115,133,140,153,155,],[71,71,71,139,139,139,139,139,]),'initialization':([66,],[94,]),'init_lists':([96,],[116,]),'init_list':([96,116,],[117,142,]),'inits':([115,],[133,]),'init':([115,133,],[135,152,]),'const_expressions':([115,133,],[136,136,]),'const_expression':([115,133,140,153,155,],[137,137,156,161,162,]),'const_math_expression':([115,133,140,153,155,],[138,138,138,138,138,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',27),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',31),
  ('statements -> statement','statements',1,'p_statements','parser.py',32),
  ('statement -> empty NEWLINE','statement',2,'p_statement','parser.py',39),
  ('statement -> declaration NEWLINE','statement',2,'p_statement','parser.py',40),
  ('statement -> assignment NEWLINE','statement',2,'p_statement','parser.py',41),
  ('statement -> convert NEWLINE','statement',2,'p_statement','parser.py',42),
  ('statement -> while NEWLINE','statement',2,'p_statement','parser.py',43),
  ('statement -> until NEWLINE','statement',2,'p_statement','parser.py',44),
  ('statement -> if NEWLINE','statement',2,'p_statement','parser.py',45),
  ('statement -> statement_error NEWLINE','statement',2,'p_statement','parser.py',46),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',53),
  ('declaration -> VARIANT variant','declaration',2,'p_declaration','parser.py',57),
  ('declaration -> VARIANT variant ASSIGNMENT initialization','declaration',4,'p_declaration','parser.py',58),
  ('declaration -> VARIANT error','declaration',2,'p_decl_error','parser.py',65),
  ('declaration -> VARIANT variant ASSIGNMENT error','declaration',4,'p_decl_error','parser.py',66),
  ('declaration -> declaration error','declaration',2,'p_decl_error','parser.py',67),
  ('variant -> NAME','variant',1,'p_variant','parser.py',76),
  ('variant -> NAME varsize','variant',2,'p_variant','parser.py',77),
  ('varsize -> LSQBRACKET decimal_expression RSQBRACKET','varsize',3,'p_varsize','parser.py',84),
  ('varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET','varsize',5,'p_varsize','parser.py',85),
  ('varsize -> LSQBRACKET error RSQBRACKET','varsize',3,'p_varsize_error','parser.py',92),
  ('varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET','varsize',5,'p_varsize_error','parser.py',93),
  ('varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET','varsize',5,'p_varsize_error','parser.py',94),
  ('varsize -> LSQBRACKET error COMMA error RSQBRACKET','varsize',5,'p_varsize_error','parser.py',95),
  ('varsize -> varsize error','varsize',2,'p_varsize_error','parser.py',96),
  ('initialization -> LBRACE init_lists RBRACE','initialization',3,'p_initialization','parser.py',102),
  ('init_lists -> init_lists init_list','init_lists',2,'p_init_lists','parser.py',106),
  ('init_lists -> init_list','init_lists',1,'p_init_lists','parser.py',107),
  ('init_list -> LBRACE inits RBRACE','init_list',3,'p_init_list','parser.py',114),
  ('init_list -> LBRACE RBRACE','init_list',2,'p_init_list','parser.py',115),
  ('inits -> inits init','inits',2,'p_inits','parser.py',122),
  ('inits -> init','inits',1,'p_inits','parser.py',123),
  ('init -> const_expressions COMMA const_expression SEMICOLON','init',4,'p_init','parser.py',130),
  ('init -> const_expression SEMICOLON','init',2,'p_init','parser.py',131),
  ('const_expressions -> const_expressions COMMA const_expression','const_expressions',3,'p_const_expressions','parser.py',138),
  ('const_expressions -> const_expression','const_expressions',1,'p_const_expressions','parser.py',139),
  ('const_expression -> const_math_expression','const_expression',1,'p_const_expression','parser.py',146),
  ('const_expression -> const','const_expression',1,'p_const_expression','parser.py',147),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',151),
  ('expression -> const','expression',1,'p_expression','parser.py',152),
  ('expression -> variant','expression',1,'p_expression','parser.py',153),
  ('decimal_expression -> dec_math_expression','decimal_expression',1,'p_decimal_expression','parser.py',157),
  ('decimal_expression -> decimal_const','decimal_expression',1,'p_decimal_expression','parser.py',158),
  ('decimal_expression -> variant','decimal_expression',1,'p_decimal_expression','parser.py',159),
  ('bool_expression -> bool_math_expression','bool_expression',1,'p_bool_expression','parser.py',163),
  ('bool_expression -> bool_const','bool_expression',1,'p_bool_expression','parser.py',164),
  ('bool_expression -> variant','bool_expression',1,'p_bool_expression','parser.py',165),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',169),
  ('math_expression -> MINUS expression','math_expression',2,'p_math_expression','parser.py',170),
  ('const_math_expression -> const_expression PLUS const_expression','const_math_expression',3,'p_const_math_expression','parser.py',177),
  ('const_math_expression -> MINUS const_expression','const_math_expression',2,'p_const_math_expression','parser.py',178),
  ('dec_math_expression -> decimal_expression PLUS decimal_expression','dec_math_expression',3,'p_dec_math_expression','parser.py',185),
  ('dec_math_expression -> MINUS decimal_expression','dec_math_expression',2,'p_dec_math_expression','parser.py',186),
  ('bool_math_expression -> bool_expression PLUS bool_expression','bool_math_expression',3,'p_bool_math_expression','parser.py',193),
  ('bool_math_expression -> MINUS bool_expression','bool_math_expression',2,'p_bool_math_expression','parser.py',194),
  ('const -> TRUE','const',1,'p_const','parser.py',201),
  ('const -> FALSE','const',1,'p_const','parser.py',202),
  ('const -> DECIMAL','const',1,'p_const','parser.py',203),
  ('const -> LETTERS','const',1,'p_const','parser.py',204),
  ('decimal_const -> DECIMAL','decimal_const',1,'p_decimal_const','parser.py',208),
  ('bool_const -> TRUE','bool_const',1,'p_bool_const','parser.py',212),
  ('bool_const -> FALSE','bool_const',1,'p_bool_const','parser.py',213),
  ('assignment -> variant ASSIGNMENT expression','assignment',3,'p_assignment','parser.py',217),
  ('assignment -> variant ASSIGNMENT error','assignment',3,'p_assignment_error','parser.py',221),
  ('convert -> CONVERT type TO type variant','convert',5,'p_convert','parser.py',226),
  ('convert -> CONVERT type TO type error','convert',5,'p_convert_error','parser.py',230),
  ('convert -> CONVERT type TO error','convert',4,'p_convert_error','parser.py',231),
  ('convert -> CONVERT type error','convert',3,'p_convert_error','parser.py',232),
  ('convert -> CONVERT error','convert',2,'p_convert_error','parser.py',233),
  ('convert -> convert error','convert',2,'p_convert_error','parser.py',234),
  ('type -> BOOL','type',1,'p_type','parser.py',239),
  ('type -> DIGIT','type',1,'p_type','parser.py',240),
  ('type -> STRING','type',1,'p_type','parser.py',241),
  ('while -> WHILE bool_expression NEWLINE statements ENDW','while',5,'p_while','parser.py',245),
  ('until -> UNTIL bool_expression NEWLINE statements ENDU','until',5,'p_until','parser.py',249),
  ('if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF','if',7,'p_if','parser.py',253),
  ('if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF','if',7,'p_if','parser.py',254),
  ('if -> IFZERO decimal_expression NEWLINE statements ENDIF','if',5,'p_if','parser.py',255),
  ('if -> IFNZERO decimal_expression NEWLINE statements ENDIF','if',5,'p_if','parser.py',256),
  ('if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF','if',7,'p_if','parser.py',257),
  ('if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF','if',7,'p_if','parser.py',258),
  ('statement_error -> error','statement_error',1,'p_statement_error','parser.py',269),
  ('statement_error -> statement_error error','statement_error',2,'p_statement_error','parser.py',270),
]
