
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGNMENT BOOL CALL COMMA COMMAND CONVERT DECIMAL DIGIT DIGITIZE ENDFUNC ENDIF ENDU ENDW FALSE FUNC IFHIGH IFLESS IFNHIGH IFNLESS IFNZERO IFZERO LBRACE LETTERS LSQBRACKET MINUS NAME NEWLINE PARAM PLUS RBRACE RETURN RSQBRACKET SEMICOLON STRING TO TRUE UNTIL VARIANT WHILEprogram : statementsstatements : statements statement\n                        | statementstatement : empty NEWLINE\n                        | declaration NEWLINE\n                        | assignment NEWLINE\n                        | convert NEWLINE\n                        | digitize NEWLINE\n                        | while NEWLINE\n                        | until NEWLINE\n                        | if NEWLINE\n                        | command NEWLINE\n                        | function NEWLINE\n                        | function_call NEWLINEempty : declaration : VARIANT variant\n                        | VARIANT variant ASSIGNMENT initializationvariant : NAME\n                    | NAME varsize\n                    | PARAM\n                    | PARAM varsizevarsize : LSQBRACKET decimal_expression RSQBRACKET\n                    | LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET\n                    | LSQBRACKET RSQBRACKETinitialization : LBRACE init_lists RBRACEinit_lists : init_lists init_list\n                        | init_listinit_list : LBRACE inits RBRACE\n                        | LBRACE RBRACEinits : inits init\n                    | initinit : const_expressions COMMA const_expression SEMICOLON\n                    | const_expression SEMICOLONconst_expressions : const_expressions COMMA const_expression\n                        | const_expressionconst_expression : const_math_expression\n                        | constexpression : math_expression\n                        | const\n                        | variant\n                        | function_calldecimal_expression : dec_math_expression\n                                | decimal_const\n                                | variant\n                                | function_callbool_expression : bool_math_expression\n                            | bool_const\n                            | variant\n                            | function_callstring_expression : string_math_expression\n                            | string_const\n                            | variant\n                            | function_callmath_expression : expression PLUS expression\n                            | MINUS expressionconst_math_expression : const_expression PLUS const_expression\n                            | MINUS const_expressiondec_math_expression : decimal_expression PLUS decimal_expression\n                                | MINUS decimal_expressionbool_math_expression : bool_expression PLUS bool_expression\n                                | MINUS bool_expressionstring_math_expression : string_expression PLUS string_expression\n                                        | MINUS string_expressionconst : bool_const\n                | decimal_const\n                | string_constdecimal_const : DECIMALbool_const : TRUE\n                        | FALSEstring_const : LETTERSassignment : variant ASSIGNMENT expressionconvert : CONVERT type TO type variantdigitize : DIGITIZE type varianttype : BOOL\n                | DIGIT\n                | STRINGwhile : WHILE bool_expression NEWLINE statements ENDWuntil : UNTIL bool_expression NEWLINE statements ENDUif : IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF\n              | IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF\n              | IFZERO decimal_expression NEWLINE statements ENDIF\n              | IFNZERO decimal_expression NEWLINE statements ENDIF\n              | IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF\n              | IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIFcommand : COMMAND string_expressionfunc_body_statements : func_body_statements func_body_statement\n                        | func_body_statementfunc_body_statement : empty NEWLINE\n                        | declaration NEWLINE\n                        | assignment NEWLINE\n                        | convert NEWLINE\n                        | digitize NEWLINE\n                        | while NEWLINE\n                        | until NEWLINE\n                        | if NEWLINE\n                        | command NEWLINE\n                        | function_call NEWLINE\n                        | return NEWLINEfunction : FUNC NAME NEWLINE func_body_statements ENDFUNCfunction_call : CALL NAME expression\n                            | CALL NAMEreturn : RETURN expressiondeclaration : VARIANT error\n                        | VARIANT variant ASSIGNMENT error\n                        | declaration errorvarsize : LSQBRACKET error RSQBRACKET\n                    | LSQBRACKET error COMMA decimal_expression RSQBRACKET\n                    | LSQBRACKET decimal_expression COMMA error RSQBRACKET\n                    | LSQBRACKET error COMMA error RSQBRACKET\n                    | varsize errorassignment : variant ASSIGNMENT error\n                        | error ASSIGNMENT expressionconvert : CONVERT type TO type error\n                    | CONVERT type TO error\n                    | CONVERT type error\n                    | CONVERT error\n                    | convert errordigitize : DIGITIZE error\n                    | digitize errorcommand : COMMAND error\n                    | command errorwhile : WHILE error NEWLINE statements ENDW\n                    | WHILE bool_expression NEWLINE statements error\n                    | WHILE bool_expression statements ENDW\n                    | while erroruntil : UNTIL error NEWLINE statements ENDU\n                    | UNTIL bool_expression NEWLINE statements error\n                    | UNTIL bool_expression statements ENDU\n                    | until errorif : IFLESS error NEWLINE statements ENDIF\n              | IFNLESS error NEWLINE statements ENDIF\n              | IFZERO error NEWLINE statements ENDIF\n              | IFNZERO error NEWLINE statements ENDIF\n              | IFHIGH error NEWLINE statements ENDIF\n              | IFNHIGH error NEWLINE statements ENDIF\n\n              | IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error\n              | IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error\n              | IFZERO decimal_expression NEWLINE statements error\n              | IFNZERO decimal_expression NEWLINE statements error\n              | IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error\n              | IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error\n\n              | IFLESS decimal_expression COMMA decimal_expression statements ENDIF\n              | IFNLESS decimal_expression COMMA decimal_expression statements ENDIF\n              | IFZERO decimal_expression statements ENDIF\n              | IFNZERO decimal_expression statements ENDIF\n              | IFHIGH decimal_expression COMMA decimal_expression statements ENDIF\n              | IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF\n\n              | if errorfunction : FUNC error NEWLINE func_body_statements ENDFUNC\n                    | FUNC NAME NEWLINE func_body_statements error\n                    | FUNC error NEWLINE func_body_statements error\n                    | function errorreturn : RETURN error\n                    | return error'
    
_lr_action_items = {'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,58,63,64,65,66,67,68,69,71,72,73,74,76,77,78,79,80,82,84,85,86,87,88,90,92,93,94,95,96,97,98,100,101,102,103,105,106,108,109,110,111,112,113,115,116,117,118,120,121,122,123,125,126,127,128,129,132,133,135,136,137,138,139,140,141,143,145,147,148,149,150,152,154,155,156,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,199,200,202,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,265,267,268,269,270,271,272,273,274,275,276,277,278,285,286,287,288,289,290,291,292,],[-15,-15,-3,34,35,37,38,40,42,44,46,48,50,52,-18,-20,-2,-4,-5,-105,-6,-7,-117,-8,-119,-9,-125,-10,-129,-11,-148,-12,-121,-13,-152,-14,-16,-103,-116,-118,122,125,-46,-47,-48,-49,-68,-69,127,129,132,-42,-43,-44,-45,-67,135,136,138,139,141,143,145,-85,-120,-50,-51,-52,-53,-70,148,149,-19,-101,-21,-40,-71,-111,-38,-39,-41,-64,-65,-66,-112,-115,-73,-15,-15,-15,-61,-15,-15,-15,-15,-59,-15,-15,-15,-15,-15,-15,-15,-15,-15,-63,-15,-15,-110,-24,-100,-17,-104,-55,-114,-15,-124,-60,-15,-15,-128,-15,216,-58,-15,219,-15,-15,-144,-15,-15,-145,-15,228,-15,231,-15,-62,-15,-87,237,238,239,240,241,242,243,244,245,246,247,-15,-22,-106,-54,-72,-113,-77,-123,-122,-78,-127,-126,-15,-15,-130,-15,-15,-131,-81,-138,-132,-82,-139,-133,-15,-15,-134,-15,-15,-135,-99,-150,-86,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-154,-102,-153,-151,-149,-25,-15,-142,-15,-143,-15,-146,-15,-147,-23,-108,-109,-107,-79,-136,-80,-137,-83,-140,-84,-141,]),'VARIANT':([0,2,3,30,32,33,34,35,37,38,40,42,44,46,48,50,52,64,66,67,68,69,71,72,73,77,78,79,80,82,85,87,100,103,105,106,108,111,112,113,115,116,117,122,123,125,126,127,128,129,132,133,135,136,137,138,139,140,141,143,145,148,149,150,152,154,159,162,164,165,166,168,169,170,171,172,173,174,176,177,179,180,181,182,183,185,186,199,200,202,207,216,217,219,220,228,229,231,232,236,237,238,239,240,241,242,243,244,245,246,247,267,269,271,273,275,276,277,278,],[15,15,-3,-18,-20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,15,-46,-47,-48,-49,-68,-69,15,-42,-43,-44,-45,-67,15,15,-70,-19,-101,-21,-40,-38,-39,-41,-64,-65,-66,15,15,15,-61,15,15,15,15,-59,15,15,15,15,15,15,15,15,15,15,15,-110,-24,-100,-55,15,-60,15,15,15,15,-58,15,15,15,15,15,15,15,15,15,15,15,15,-87,15,-22,-106,-54,15,15,15,15,15,15,15,15,-86,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,15,15,15,15,-23,-108,-109,-107,]),'error':([0,2,3,5,7,8,9,10,11,12,13,15,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,63,64,66,67,68,69,71,72,73,77,78,79,80,82,85,87,93,94,95,96,97,98,100,103,104,105,106,107,108,111,112,113,115,116,117,119,120,121,122,123,125,126,127,128,129,132,133,135,136,137,138,139,140,141,143,145,147,148,149,150,152,154,155,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,188,190,191,192,193,194,195,197,198,199,200,201,202,203,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,265,267,268,269,270,271,272,273,274,275,276,277,278,285,286,287,288,289,290,291,292,],[17,17,-3,36,39,41,43,45,47,49,51,54,58,63,65,74,76,84,86,88,90,92,94,102,-18,-20,-2,-4,-5,-105,-6,-7,-117,-8,-119,-9,-125,-10,-129,-11,-148,-12,-121,-13,-152,-14,-16,-103,110,120,-116,-74,-75,-76,-118,17,-46,-47,-48,-49,-68,-69,17,-42,-43,-44,-45,-67,17,17,-85,-120,-50,-51,-52,-53,-70,150,153,-101,150,156,-40,-38,-39,-41,-64,-65,-66,161,-115,-73,17,17,17,-61,17,17,17,17,-59,17,17,17,17,17,17,17,17,17,-63,17,17,-110,-24,-100,-17,-104,-55,209,-114,211,-124,-60,17,214,-128,17,17,-58,17,17,17,223,-144,17,226,-145,17,17,17,17,17,-62,235,-87,36,39,41,43,45,47,49,248,250,251,-22,254,-106,255,-54,-72,-113,-77,-123,-122,-78,-127,-126,17,17,-130,17,17,-131,-81,-138,-132,-82,-139,-133,17,17,-134,17,17,-135,-99,-150,-86,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-154,-102,-153,-151,-149,-25,286,-142,288,-143,290,-146,292,-147,-23,-108,-109,-107,-79,-136,-80,-137,-83,-140,-84,-141,]),'CONVERT':([0,2,3,30,32,33,34,35,37,38,40,42,44,46,48,50,52,64,66,67,68,69,71,72,73,77,78,79,80,82,85,87,100,103,105,106,108,111,112,113,115,116,117,122,123,125,126,127,128,129,132,133,135,136,137,138,139,140,141,143,145,148,149,150,152,154,159,162,164,165,166,168,169,170,171,172,173,174,176,177,179,180,181,182,183,185,186,199,200,202,207,216,217,219,220,228,229,231,232,236,237,238,239,240,241,242,243,244,245,246,247,267,269,271,273,275,276,277,278,],[18,18,-3,-18,-20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,18,-46,-47,-48,-49,-68,-69,18,-42,-43,-44,-45,-67,18,18,-70,-19,-101,-21,-40,-38,-39,-41,-64,-65,-66,18,18,18,-61,18,18,18,18,-59,18,18,18,18,18,18,18,18,18,18,18,-110,-24,-100,-55,18,-60,18,18,18,18,-58,18,18,18,18,18,18,18,18,18,18,18,18,-87,18,-22,-106,-54,18,18,18,18,18,18,18,18,-86,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,18,18,18,18,-23,-108,-109,-107,]),'DIGITIZE':([0,2,3,30,32,33,34,35,37,38,40,42,44,46,48,50,52,64,66,67,68,69,71,72,73,77,78,79,80,82,85,87,100,103,105,106,108,111,112,113,115,116,117,122,123,125,126,127,128,129,132,133,135,136,137,138,139,140,141,143,145,148,149,150,152,154,159,162,164,165,166,168,169,170,171,172,173,174,176,177,179,180,181,182,183,185,186,199,200,202,207,216,217,219,220,228,229,231,232,236,237,238,239,240,241,242,243,244,245,246,247,267,269,271,273,275,276,277,278,],[19,19,-3,-18,-20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,19,-46,-47,-48,-49,-68,-69,19,-42,-43,-44,-45,-67,19,19,-70,-19,-101,-21,-40,-38,-39,-41,-64,-65,-66,19,19,19,-61,19,19,19,19,-59,19,19,19,19,19,19,19,19,19,19,19,-110,-24,-100,-55,19,-60,19,19,19,19,-58,19,19,19,19,19,19,19,19,19,19,19,19,-87,19,-22,-106,-54,19,19,19,19,19,19,19,19,-86,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,19,19,19,19,-23,-108,-109,-107,]),'WHILE':([0,2,3,30,32,33,34,35,37,38,40,42,44,46,48,50,52,64,66,67,68,69,71,72,73,77,78,79,80,82,85,87,100,103,105,106,108,111,112,113,115,116,117,122,123,125,126,127,128,129,132,133,135,136,137,138,139,140,141,143,145,148,149,150,152,154,159,162,164,165,166,168,169,170,171,172,173,174,176,177,179,180,181,182,183,185,186,199,200,202,207,216,217,219,220,228,229,231,232,236,237,238,239,240,241,242,243,244,245,246,247,267,269,271,273,275,276,277,278,],[20,20,-3,-18,-20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,20,-46,-47,-48,-49,-68,-69,20,-42,-43,-44,-45,-67,20,20,-70,-19,-101,-21,-40,-38,-39,-41,-64,-65,-66,20,20,20,-61,20,20,20,20,-59,20,20,20,20,20,20,20,20,20,20,20,-110,-24,-100,-55,20,-60,20,20,20,20,-58,20,20,20,20,20,20,20,20,20,20,20,20,-87,20,-22,-106,-54,20,20,20,20,20,20,20,20,-86,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,20,20,20,20,-23,-108,-109,-107,]),'UNTIL':([0,2,3,30,32,33,34,35,37,38,40,42,44,46,48,50,52,64,66,67,68,69,71,72,73,77,78,79,80,82,85,87,100,103,105,106,108,111,112,113,115,116,117,122,123,125,126,127,128,129,132,133,135,136,137,138,139,140,141,143,145,148,149,150,152,154,159,162,164,165,166,168,169,170,171,172,173,174,176,177,179,180,181,182,183,185,186,199,200,202,207,216,217,219,220,228,229,231,232,236,237,238,239,240,241,242,243,244,245,246,247,267,269,271,273,275,276,277,278,],[21,21,-3,-18,-20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,21,-46,-47,-48,-49,-68,-69,21,-42,-43,-44,-45,-67,21,21,-70,-19,-101,-21,-40,-38,-39,-41,-64,-65,-66,21,21,21,-61,21,21,21,21,-59,21,21,21,21,21,21,21,21,21,21,21,-110,-24,-100,-55,21,-60,21,21,21,21,-58,21,21,21,21,21,21,21,21,21,21,21,21,-87,21,-22,-106,-54,21,21,21,21,21,21,21,21,-86,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,21,21,21,21,-23,-108,-109,-107,]),'IFLESS':([0,2,3,30,32,33,34,35,37,38,40,42,44,46,48,50,52,64,66,67,68,69,71,72,73,77,78,79,80,82,85,87,100,103,105,106,108,111,112,113,115,116,117,122,123,125,126,127,128,129,132,133,135,136,137,138,139,140,141,143,145,148,149,150,152,154,159,162,164,165,166,168,169,170,171,172,173,174,176,177,179,180,181,182,183,185,186,199,200,202,207,216,217,219,220,228,229,231,232,236,237,238,239,240,241,242,243,244,245,246,247,267,269,271,273,275,276,277,278,],[22,22,-3,-18,-20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,22,-46,-47,-48,-49,-68,-69,22,-42,-43,-44,-45,-67,22,22,-70,-19,-101,-21,-40,-38,-39,-41,-64,-65,-66,22,22,22,-61,22,22,22,22,-59,22,22,22,22,22,22,22,22,22,22,22,-110,-24,-100,-55,22,-60,22,22,22,22,-58,22,22,22,22,22,22,22,22,22,22,22,22,-87,22,-22,-106,-54,22,22,22,22,22,22,22,22,-86,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,22,22,22,22,-23,-108,-109,-107,]),'IFNLESS':([0,2,3,30,32,33,34,35,37,38,40,42,44,46,48,50,52,64,66,67,68,69,71,72,73,77,78,79,80,82,85,87,100,103,105,106,108,111,112,113,115,116,117,122,123,125,126,127,128,129,132,133,135,136,137,138,139,140,141,143,145,148,149,150,152,154,159,162,164,165,166,168,169,170,171,172,173,174,176,177,179,180,181,182,183,185,186,199,200,202,207,216,217,219,220,228,229,231,232,236,237,238,239,240,241,242,243,244,245,246,247,267,269,271,273,275,276,277,278,],[23,23,-3,-18,-20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,23,-46,-47,-48,-49,-68,-69,23,-42,-43,-44,-45,-67,23,23,-70,-19,-101,-21,-40,-38,-39,-41,-64,-65,-66,23,23,23,-61,23,23,23,23,-59,23,23,23,23,23,23,23,23,23,23,23,-110,-24,-100,-55,23,-60,23,23,23,23,-58,23,23,23,23,23,23,23,23,23,23,23,23,-87,23,-22,-106,-54,23,23,23,23,23,23,23,23,-86,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,23,23,23,23,-23,-108,-109,-107,]),'IFZERO':([0,2,3,30,32,33,34,35,37,38,40,42,44,46,48,50,52,64,66,67,68,69,71,72,73,77,78,79,80,82,85,87,100,103,105,106,108,111,112,113,115,116,117,122,123,125,126,127,128,129,132,133,135,136,137,138,139,140,141,143,145,148,149,150,152,154,159,162,164,165,166,168,169,170,171,172,173,174,176,177,179,180,181,182,183,185,186,199,200,202,207,216,217,219,220,228,229,231,232,236,237,238,239,240,241,242,243,244,245,246,247,267,269,271,273,275,276,277,278,],[24,24,-3,-18,-20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,24,-46,-47,-48,-49,-68,-69,24,-42,-43,-44,-45,-67,24,24,-70,-19,-101,-21,-40,-38,-39,-41,-64,-65,-66,24,24,24,-61,24,24,24,24,-59,24,24,24,24,24,24,24,24,24,24,24,-110,-24,-100,-55,24,-60,24,24,24,24,-58,24,24,24,24,24,24,24,24,24,24,24,24,-87,24,-22,-106,-54,24,24,24,24,24,24,24,24,-86,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,24,24,24,24,-23,-108,-109,-107,]),'IFNZERO':([0,2,3,30,32,33,34,35,37,38,40,42,44,46,48,50,52,64,66,67,68,69,71,72,73,77,78,79,80,82,85,87,100,103,105,106,108,111,112,113,115,116,117,122,123,125,126,127,128,129,132,133,135,136,137,138,139,140,141,143,145,148,149,150,152,154,159,162,164,165,166,168,169,170,171,172,173,174,176,177,179,180,181,182,183,185,186,199,200,202,207,216,217,219,220,228,229,231,232,236,237,238,239,240,241,242,243,244,245,246,247,267,269,271,273,275,276,277,278,],[25,25,-3,-18,-20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,25,-46,-47,-48,-49,-68,-69,25,-42,-43,-44,-45,-67,25,25,-70,-19,-101,-21,-40,-38,-39,-41,-64,-65,-66,25,25,25,-61,25,25,25,25,-59,25,25,25,25,25,25,25,25,25,25,25,-110,-24,-100,-55,25,-60,25,25,25,25,-58,25,25,25,25,25,25,25,25,25,25,25,25,-87,25,-22,-106,-54,25,25,25,25,25,25,25,25,-86,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,25,25,25,25,-23,-108,-109,-107,]),'IFHIGH':([0,2,3,30,32,33,34,35,37,38,40,42,44,46,48,50,52,64,66,67,68,69,71,72,73,77,78,79,80,82,85,87,100,103,105,106,108,111,112,113,115,116,117,122,123,125,126,127,128,129,132,133,135,136,137,138,139,140,141,143,145,148,149,150,152,154,159,162,164,165,166,168,169,170,171,172,173,174,176,177,179,180,181,182,183,185,186,199,200,202,207,216,217,219,220,228,229,231,232,236,237,238,239,240,241,242,243,244,245,246,247,267,269,271,273,275,276,277,278,],[26,26,-3,-18,-20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,26,-46,-47,-48,-49,-68,-69,26,-42,-43,-44,-45,-67,26,26,-70,-19,-101,-21,-40,-38,-39,-41,-64,-65,-66,26,26,26,-61,26,26,26,26,-59,26,26,26,26,26,26,26,26,26,26,26,-110,-24,-100,-55,26,-60,26,26,26,26,-58,26,26,26,26,26,26,26,26,26,26,26,26,-87,26,-22,-106,-54,26,26,26,26,26,26,26,26,-86,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,26,26,26,26,-23,-108,-109,-107,]),'IFNHIGH':([0,2,3,30,32,33,34,35,37,38,40,42,44,46,48,50,52,64,66,67,68,69,71,72,73,77,78,79,80,82,85,87,100,103,105,106,108,111,112,113,115,116,117,122,123,125,126,127,128,129,132,133,135,136,137,138,139,140,141,143,145,148,149,150,152,154,159,162,164,165,166,168,169,170,171,172,173,174,176,177,179,180,181,182,183,185,186,199,200,202,207,216,217,219,220,228,229,231,232,236,237,238,239,240,241,242,243,244,245,246,247,267,269,271,273,275,276,277,278,],[27,27,-3,-18,-20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,27,-46,-47,-48,-49,-68,-69,27,-42,-43,-44,-45,-67,27,27,-70,-19,-101,-21,-40,-38,-39,-41,-64,-65,-66,27,27,27,-61,27,27,27,27,-59,27,27,27,27,27,27,27,27,27,27,27,-110,-24,-100,-55,27,-60,27,27,27,27,-58,27,27,27,27,27,27,27,27,27,27,27,27,-87,27,-22,-106,-54,27,27,27,27,27,27,27,27,-86,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,27,27,27,27,-23,-108,-109,-107,]),'COMMAND':([0,2,3,30,32,33,34,35,37,38,40,42,44,46,48,50,52,64,66,67,68,69,71,72,73,77,78,79,80,82,85,87,100,103,105,106,108,111,112,113,115,116,117,122,123,125,126,127,128,129,132,133,135,136,137,138,139,140,141,143,145,148,149,150,152,154,159,162,164,165,166,168,169,170,171,172,173,174,176,177,179,180,181,182,183,185,186,199,200,202,207,216,217,219,220,228,229,231,232,236,237,238,239,240,241,242,243,244,245,246,247,267,269,271,273,275,276,277,278,],[28,28,-3,-18,-20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,28,-46,-47,-48,-49,-68,-69,28,-42,-43,-44,-45,-67,28,28,-70,-19,-101,-21,-40,-38,-39,-41,-64,-65,-66,28,28,28,-61,28,28,28,28,-59,28,28,28,28,28,28,28,28,28,28,28,-110,-24,-100,-55,28,-60,28,28,28,28,-58,28,28,28,28,28,28,28,28,28,28,28,28,-87,28,-22,-106,-54,28,28,28,28,28,28,28,28,-86,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,28,28,28,28,-23,-108,-109,-107,]),'FUNC':([0,2,3,30,32,33,34,35,37,38,40,42,44,46,48,50,52,64,66,67,68,69,71,72,73,77,78,79,80,82,85,87,100,103,105,106,108,111,112,113,115,116,117,122,123,125,126,127,128,129,132,133,135,136,137,138,139,140,141,143,145,150,152,154,159,162,164,165,166,168,169,170,171,172,173,174,176,177,179,180,181,182,183,200,202,207,216,217,219,220,228,229,231,232,267,269,271,273,275,276,277,278,],[29,29,-3,-18,-20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,29,-46,-47,-48,-49,-68,-69,29,-42,-43,-44,-45,-67,29,29,-70,-19,-101,-21,-40,-38,-39,-41,-64,-65,-66,29,29,29,-61,29,29,29,29,-59,29,29,29,29,29,29,29,29,29,-110,-24,-100,-55,29,-60,29,29,29,29,-58,29,29,29,29,29,29,29,29,29,29,29,-22,-106,-54,29,29,29,29,29,29,29,29,29,29,29,29,-23,-108,-109,-107,]),'CALL':([0,2,3,20,21,22,23,24,25,26,27,28,30,32,33,34,35,37,38,40,42,44,46,48,50,52,55,56,64,66,67,68,69,70,71,72,73,77,78,79,80,81,82,85,87,99,100,103,104,105,106,108,111,112,113,114,115,116,117,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,148,149,150,152,154,158,159,162,164,165,166,168,169,170,171,172,173,174,176,177,179,180,181,182,183,185,186,198,199,200,201,202,203,207,216,217,219,220,228,229,231,232,236,237,238,239,240,241,242,243,244,245,246,247,267,269,271,273,275,276,277,278,],[31,31,-3,31,31,31,31,31,31,31,31,31,-18,-20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,31,31,31,-46,-47,-48,-49,31,-68,-69,31,-42,-43,-44,-45,31,-67,31,31,31,-70,-19,31,31,-21,-40,-38,-39,-41,31,-64,-65,-66,31,31,31,31,-61,31,31,31,31,31,31,-59,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-110,-24,-100,31,-55,31,-60,31,31,31,31,-58,31,31,31,31,31,31,31,31,31,31,31,31,-87,31,31,-22,31,-106,31,-54,31,31,31,31,31,31,31,31,-86,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,31,31,31,31,-23,-108,-109,-107,]),'NAME':([0,2,3,15,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,40,42,44,46,48,50,52,55,56,59,60,61,62,64,66,67,68,69,70,71,72,73,77,78,79,80,81,82,85,87,99,100,103,104,105,106,108,111,112,113,114,115,116,117,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,148,149,150,152,154,158,159,160,162,164,165,166,168,169,170,171,172,173,174,176,177,179,180,181,182,183,185,186,198,199,200,201,202,203,207,216,217,219,220,228,229,231,232,236,237,238,239,240,241,242,243,244,245,246,247,267,269,271,273,275,276,277,278,],[30,30,-3,30,30,30,30,30,30,30,30,30,30,101,-18,105,-20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,30,30,-74,-75,-76,30,30,-46,-47,-48,-49,30,-68,-69,30,-42,-43,-44,-45,30,-67,30,30,30,-70,-19,30,30,-21,-40,-38,-39,-41,30,-64,-65,-66,30,30,30,30,-61,30,30,30,30,30,30,-59,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-110,-24,-100,30,-55,30,30,-60,30,30,30,30,-58,30,30,30,30,30,30,30,30,30,30,30,30,-87,30,30,-22,30,-106,30,-54,30,30,30,30,30,30,30,30,-86,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,30,30,30,30,-23,-108,-109,-107,]),'PARAM':([0,2,3,15,20,21,22,23,24,25,26,27,28,30,32,33,34,35,37,38,40,42,44,46,48,50,52,55,56,59,60,61,62,64,66,67,68,69,70,71,72,73,77,78,79,80,81,82,85,87,99,100,103,104,105,106,108,111,112,113,114,115,116,117,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,148,149,150,152,154,158,159,160,162,164,165,166,168,169,170,171,172,173,174,176,177,179,180,181,182,183,185,186,198,199,200,201,202,203,207,216,217,219,220,228,229,231,232,236,237,238,239,240,241,242,243,244,245,246,247,267,269,271,273,275,276,277,278,],[32,32,-3,32,32,32,32,32,32,32,32,32,32,-18,-20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,32,32,-74,-75,-76,32,32,-46,-47,-48,-49,32,-68,-69,32,-42,-43,-44,-45,32,-67,32,32,32,-70,-19,32,32,-21,-40,-38,-39,-41,32,-64,-65,-66,32,32,32,32,-61,32,32,32,32,32,32,-59,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-110,-24,-100,32,-55,32,32,-60,32,32,32,32,-58,32,32,32,32,32,32,32,32,32,32,32,32,-87,32,32,-22,32,-106,32,-54,32,32,32,32,32,32,32,32,-86,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,32,32,32,32,-23,-108,-109,-107,]),'$end':([1,2,3,33,34,35,37,38,40,42,44,46,48,50,52,],[0,-1,-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,]),'ENDW':([3,33,34,35,37,38,40,42,44,46,48,50,52,123,162,165,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,163,210,212,]),'ENDU':([3,33,34,35,37,38,40,42,44,46,48,50,52,128,166,168,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,167,213,215,]),'ENDIF':([3,33,34,35,37,38,40,42,44,46,48,50,52,137,140,171,173,174,176,177,179,181,183,217,220,229,232,267,269,271,273,],[-3,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,175,178,218,221,222,224,225,227,230,233,268,270,272,274,285,287,289,291,]),'ASSIGNMENT':([16,17,30,32,53,103,106,150,152,200,202,211,214,223,226,235,251,275,276,277,278,286,288,290,292,],[55,56,-18,-20,107,-19,-21,-110,-24,-22,-106,56,56,56,56,56,56,-23,-108,-109,-107,56,56,56,56,]),'BOOL':([18,19,119,],[59,59,59,]),'DIGIT':([18,19,119,],[60,60,60,]),'STRING':([18,19,119,],[61,61,61,]),'MINUS':([20,21,22,23,24,25,26,27,28,55,56,70,81,99,104,105,114,124,130,131,134,142,144,146,158,198,201,203,204,257,259,264,280,281,282,283,295,],[70,70,81,81,81,81,81,81,99,114,114,70,81,99,81,114,114,70,81,81,81,81,81,99,114,114,81,81,264,264,-31,264,-30,264,-33,264,-32,]),'TRUE':([20,21,55,56,70,105,114,124,158,198,204,257,259,264,280,281,282,283,295,],[71,71,71,71,71,71,71,71,71,71,71,71,-31,71,-30,71,-33,71,-32,]),'FALSE':([20,21,55,56,70,105,114,124,158,198,204,257,259,264,280,281,282,283,295,],[72,72,72,72,72,72,72,72,72,72,72,72,-31,72,-30,72,-33,72,-32,]),'DECIMAL':([22,23,24,25,26,27,55,56,81,104,105,114,130,131,134,142,144,158,198,201,203,204,257,259,264,280,281,282,283,295,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-31,82,-30,82,-33,82,-32,]),'LETTERS':([28,55,56,99,105,114,146,158,198,204,257,259,264,280,281,282,283,295,],[100,100,100,100,100,100,100,100,100,100,100,-31,100,-30,100,-33,100,-32,]),'PLUS':([30,32,64,66,67,68,69,71,72,73,75,77,78,79,80,82,83,85,87,89,91,93,95,96,97,98,100,103,105,106,108,109,111,112,113,115,116,117,118,126,133,147,150,151,152,154,159,164,169,170,172,180,182,184,200,202,207,249,253,256,261,262,263,275,276,277,278,284,293,294,],[-18,-20,124,-46,-47,-48,-49,-68,-69,124,131,-42,-43,-44,-45,-67,131,131,131,131,131,146,-50,-51,-52,-53,-70,-19,-101,-21,-40,158,-38,-39,-41,-64,-65,-66,158,124,131,146,-110,131,-24,158,158,124,131,131,131,131,131,146,-22,-106,158,158,131,131,283,-36,-37,-23,-108,-109,-107,283,283,283,]),'COMMA':([30,32,71,72,75,77,78,79,80,82,83,89,91,100,103,105,106,108,111,112,113,115,116,117,133,150,151,152,153,154,159,170,200,202,207,260,261,262,263,275,276,277,278,284,293,294,],[-18,-20,-68,-69,130,-42,-43,-44,-45,-67,134,142,144,-70,-19,-101,-21,-40,-38,-39,-41,-64,-65,-66,-59,-110,201,-24,203,-100,-55,-58,-22,-106,-54,281,-35,-36,-37,-23,-108,-109,-107,-57,-34,-56,]),'RSQBRACKET':([30,32,71,72,77,78,79,80,82,100,103,104,105,106,108,111,112,113,115,116,117,133,150,151,152,153,154,159,170,200,202,207,253,254,255,256,275,276,277,278,],[-18,-20,-68,-69,-42,-43,-44,-45,-67,-70,-19,152,-101,-21,-40,-38,-39,-41,-64,-65,-66,-59,-110,200,-24,202,-100,-55,-58,-22,-106,-54,275,276,277,278,-23,-108,-109,-107,]),'LSQBRACKET':([30,32,],[104,104,]),'TO':([57,59,60,61,],[119,-74,-75,-76,]),'SEMICOLON':([71,72,82,100,115,116,117,261,262,263,284,293,294,],[-68,-69,-67,-70,-64,-65,-66,282,-36,-37,-57,295,-56,]),'LBRACE':([107,157,205,206,258,266,279,],[157,204,204,-27,-29,-26,-28,]),'RETURN':([148,149,185,186,199,236,237,238,239,240,241,242,243,244,245,246,247,],[198,198,198,-87,198,-86,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,]),'ENDFUNC':([185,186,199,236,237,238,239,240,241,242,243,244,245,246,247,],[234,-87,252,-86,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,]),'RBRACE':([204,205,206,257,258,259,266,279,280,282,295,],[258,265,-27,279,-29,-31,-26,-28,-30,-33,-32,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,64,73,85,87,122,125,127,129,132,135,136,138,139,141,143,145,169,172,180,182,216,219,228,231,],[2,123,128,137,140,162,165,166,168,171,173,174,176,177,179,181,183,217,220,229,232,267,269,271,273,]),'statement':([0,2,64,73,85,87,122,123,125,127,128,129,132,135,136,137,138,139,140,141,143,145,162,165,166,168,169,171,172,173,174,176,177,179,180,181,182,183,216,217,219,220,228,229,231,232,267,269,271,273,],[3,33,3,3,3,3,3,33,3,3,33,3,3,3,3,33,3,3,33,3,3,3,33,33,33,33,3,33,3,33,33,33,33,33,3,33,3,33,3,33,3,33,3,33,3,33,33,33,33,33,]),'empty':([0,2,64,73,85,87,122,123,125,127,128,129,132,135,136,137,138,139,140,141,143,145,148,149,162,165,166,168,169,171,172,173,174,176,177,179,180,181,182,183,185,199,216,217,219,220,228,229,231,232,267,269,271,273,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,187,187,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,187,187,4,4,4,4,4,4,4,4,4,4,4,4,]),'declaration':([0,2,64,73,85,87,122,123,125,127,128,129,132,135,136,137,138,139,140,141,143,145,148,149,162,165,166,168,169,171,172,173,174,176,177,179,180,181,182,183,185,199,216,217,219,220,228,229,231,232,267,269,271,273,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,188,188,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,188,188,5,5,5,5,5,5,5,5,5,5,5,5,]),'assignment':([0,2,64,73,85,87,122,123,125,127,128,129,132,135,136,137,138,139,140,141,143,145,148,149,162,165,166,168,169,171,172,173,174,176,177,179,180,181,182,183,185,199,216,217,219,220,228,229,231,232,267,269,271,273,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,189,189,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,189,189,6,6,6,6,6,6,6,6,6,6,6,6,]),'convert':([0,2,64,73,85,87,122,123,125,127,128,129,132,135,136,137,138,139,140,141,143,145,148,149,162,165,166,168,169,171,172,173,174,176,177,179,180,181,182,183,185,199,216,217,219,220,228,229,231,232,267,269,271,273,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,190,190,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,190,190,7,7,7,7,7,7,7,7,7,7,7,7,]),'digitize':([0,2,64,73,85,87,122,123,125,127,128,129,132,135,136,137,138,139,140,141,143,145,148,149,162,165,166,168,169,171,172,173,174,176,177,179,180,181,182,183,185,199,216,217,219,220,228,229,231,232,267,269,271,273,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,191,191,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,191,191,8,8,8,8,8,8,8,8,8,8,8,8,]),'while':([0,2,64,73,85,87,122,123,125,127,128,129,132,135,136,137,138,139,140,141,143,145,148,149,162,165,166,168,169,171,172,173,174,176,177,179,180,181,182,183,185,199,216,217,219,220,228,229,231,232,267,269,271,273,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,192,192,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,192,192,9,9,9,9,9,9,9,9,9,9,9,9,]),'until':([0,2,64,73,85,87,122,123,125,127,128,129,132,135,136,137,138,139,140,141,143,145,148,149,162,165,166,168,169,171,172,173,174,176,177,179,180,181,182,183,185,199,216,217,219,220,228,229,231,232,267,269,271,273,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,193,193,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,193,193,10,10,10,10,10,10,10,10,10,10,10,10,]),'if':([0,2,64,73,85,87,122,123,125,127,128,129,132,135,136,137,138,139,140,141,143,145,148,149,162,165,166,168,169,171,172,173,174,176,177,179,180,181,182,183,185,199,216,217,219,220,228,229,231,232,267,269,271,273,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,194,194,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,194,194,11,11,11,11,11,11,11,11,11,11,11,11,]),'command':([0,2,64,73,85,87,122,123,125,127,128,129,132,135,136,137,138,139,140,141,143,145,148,149,162,165,166,168,169,171,172,173,174,176,177,179,180,181,182,183,185,199,216,217,219,220,228,229,231,232,267,269,271,273,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,195,195,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,195,195,12,12,12,12,12,12,12,12,12,12,12,12,]),'function':([0,2,64,73,85,87,122,123,125,127,128,129,132,135,136,137,138,139,140,141,143,145,162,165,166,168,169,171,172,173,174,176,177,179,180,181,182,183,216,217,219,220,228,229,231,232,267,269,271,273,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'function_call':([0,2,20,21,22,23,24,25,26,27,28,55,56,64,70,73,81,85,87,99,104,105,114,122,123,124,125,127,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,145,146,148,149,158,162,165,166,168,169,171,172,173,174,176,177,179,180,181,182,183,185,198,199,201,203,216,217,219,220,228,229,231,232,267,269,271,273,],[14,14,69,69,80,80,80,80,80,80,98,113,113,14,69,14,80,14,14,98,80,113,113,14,14,69,14,14,14,14,80,80,14,80,14,14,14,14,14,14,14,80,14,80,14,98,196,196,113,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,196,113,196,80,80,14,14,14,14,14,14,14,14,14,14,14,14,]),'variant':([0,2,15,20,21,22,23,24,25,26,27,28,55,56,62,64,70,73,81,85,87,99,104,105,114,122,123,124,125,127,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,145,146,148,149,158,160,162,165,166,168,169,171,172,173,174,176,177,179,180,181,182,183,185,198,199,201,203,216,217,219,220,228,229,231,232,267,269,271,273,],[16,16,53,68,68,79,79,79,79,79,79,97,108,108,121,16,68,16,79,16,16,97,79,108,108,16,16,68,16,16,16,16,79,79,16,79,16,16,16,16,16,16,16,79,16,79,16,97,16,16,108,208,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,108,16,79,79,16,16,16,16,16,16,16,16,16,16,16,16,]),'type':([18,19,119,],[57,62,160,]),'bool_expression':([20,21,70,124,],[64,73,126,164,]),'bool_math_expression':([20,21,70,124,],[66,66,66,66,]),'bool_const':([20,21,55,56,70,105,114,124,158,198,204,257,264,281,283,],[67,67,115,115,67,115,115,67,115,115,115,115,115,115,115,]),'decimal_expression':([22,23,24,25,26,27,81,104,130,131,134,142,144,201,203,],[75,83,85,87,89,91,133,151,169,170,172,180,182,253,256,]),'dec_math_expression':([22,23,24,25,26,27,81,104,130,131,134,142,144,201,203,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'decimal_const':([22,23,24,25,26,27,55,56,81,104,105,114,130,131,134,142,144,158,198,201,203,204,257,264,281,283,],[78,78,78,78,78,78,116,116,78,78,116,116,78,78,78,78,78,116,116,78,78,116,116,116,116,116,]),'string_expression':([28,99,146,],[93,147,184,]),'string_math_expression':([28,99,146,],[95,95,95,]),'string_const':([28,55,56,99,105,114,146,158,198,204,257,264,281,283,],[96,117,117,96,117,117,96,117,117,117,117,117,117,117,]),'varsize':([30,32,],[103,106,]),'expression':([55,56,105,114,158,198,],[109,118,154,159,207,249,]),'math_expression':([55,56,105,114,158,198,],[111,111,111,111,111,111,]),'const':([55,56,105,114,158,198,204,257,264,281,283,],[112,112,112,112,112,112,263,263,263,263,263,]),'initialization':([107,],[155,]),'func_body_statements':([148,149,],[185,199,]),'func_body_statement':([148,149,185,199,],[186,186,236,236,]),'return':([148,149,185,199,],[197,197,197,197,]),'init_lists':([157,],[205,]),'init_list':([157,205,],[206,266,]),'inits':([204,],[257,]),'init':([204,257,],[259,280,]),'const_expressions':([204,257,],[260,260,]),'const_expression':([204,257,264,281,283,],[261,261,284,293,294,]),'const_math_expression':([204,257,264,281,283,],[262,262,262,262,262,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',27),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',31),
  ('statements -> statement','statements',1,'p_statements','parser.py',32),
  ('statement -> empty NEWLINE','statement',2,'p_statement','parser.py',39),
  ('statement -> declaration NEWLINE','statement',2,'p_statement','parser.py',40),
  ('statement -> assignment NEWLINE','statement',2,'p_statement','parser.py',41),
  ('statement -> convert NEWLINE','statement',2,'p_statement','parser.py',42),
  ('statement -> digitize NEWLINE','statement',2,'p_statement','parser.py',43),
  ('statement -> while NEWLINE','statement',2,'p_statement','parser.py',44),
  ('statement -> until NEWLINE','statement',2,'p_statement','parser.py',45),
  ('statement -> if NEWLINE','statement',2,'p_statement','parser.py',46),
  ('statement -> command NEWLINE','statement',2,'p_statement','parser.py',47),
  ('statement -> function NEWLINE','statement',2,'p_statement','parser.py',48),
  ('statement -> function_call NEWLINE','statement',2,'p_statement','parser.py',49),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',54),
  ('declaration -> VARIANT variant','declaration',2,'p_declaration','parser.py',58),
  ('declaration -> VARIANT variant ASSIGNMENT initialization','declaration',4,'p_declaration','parser.py',59),
  ('variant -> NAME','variant',1,'p_variant','parser.py',66),
  ('variant -> NAME varsize','variant',2,'p_variant','parser.py',67),
  ('variant -> PARAM','variant',1,'p_variant','parser.py',68),
  ('variant -> PARAM varsize','variant',2,'p_variant','parser.py',69),
  ('varsize -> LSQBRACKET decimal_expression RSQBRACKET','varsize',3,'p_varsize','parser.py',80),
  ('varsize -> LSQBRACKET decimal_expression COMMA decimal_expression RSQBRACKET','varsize',5,'p_varsize','parser.py',81),
  ('varsize -> LSQBRACKET RSQBRACKET','varsize',2,'p_varsize','parser.py',82),
  ('initialization -> LBRACE init_lists RBRACE','initialization',3,'p_initialization','parser.py',93),
  ('init_lists -> init_lists init_list','init_lists',2,'p_init_lists','parser.py',97),
  ('init_lists -> init_list','init_lists',1,'p_init_lists','parser.py',98),
  ('init_list -> LBRACE inits RBRACE','init_list',3,'p_init_list','parser.py',105),
  ('init_list -> LBRACE RBRACE','init_list',2,'p_init_list','parser.py',106),
  ('inits -> inits init','inits',2,'p_inits','parser.py',113),
  ('inits -> init','inits',1,'p_inits','parser.py',114),
  ('init -> const_expressions COMMA const_expression SEMICOLON','init',4,'p_init','parser.py',121),
  ('init -> const_expression SEMICOLON','init',2,'p_init','parser.py',122),
  ('const_expressions -> const_expressions COMMA const_expression','const_expressions',3,'p_const_expressions','parser.py',131),
  ('const_expressions -> const_expression','const_expressions',1,'p_const_expressions','parser.py',132),
  ('const_expression -> const_math_expression','const_expression',1,'p_const_expression','parser.py',139),
  ('const_expression -> const','const_expression',1,'p_const_expression','parser.py',140),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',144),
  ('expression -> const','expression',1,'p_expression','parser.py',145),
  ('expression -> variant','expression',1,'p_expression','parser.py',146),
  ('expression -> function_call','expression',1,'p_expression','parser.py',147),
  ('decimal_expression -> dec_math_expression','decimal_expression',1,'p_decimal_expression','parser.py',151),
  ('decimal_expression -> decimal_const','decimal_expression',1,'p_decimal_expression','parser.py',152),
  ('decimal_expression -> variant','decimal_expression',1,'p_decimal_expression','parser.py',153),
  ('decimal_expression -> function_call','decimal_expression',1,'p_decimal_expression','parser.py',154),
  ('bool_expression -> bool_math_expression','bool_expression',1,'p_bool_expression','parser.py',158),
  ('bool_expression -> bool_const','bool_expression',1,'p_bool_expression','parser.py',159),
  ('bool_expression -> variant','bool_expression',1,'p_bool_expression','parser.py',160),
  ('bool_expression -> function_call','bool_expression',1,'p_bool_expression','parser.py',161),
  ('string_expression -> string_math_expression','string_expression',1,'p_string_expression','parser.py',165),
  ('string_expression -> string_const','string_expression',1,'p_string_expression','parser.py',166),
  ('string_expression -> variant','string_expression',1,'p_string_expression','parser.py',167),
  ('string_expression -> function_call','string_expression',1,'p_string_expression','parser.py',168),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',174),
  ('math_expression -> MINUS expression','math_expression',2,'p_math_expression','parser.py',175),
  ('const_math_expression -> const_expression PLUS const_expression','const_math_expression',3,'p_const_math_expression','parser.py',182),
  ('const_math_expression -> MINUS const_expression','const_math_expression',2,'p_const_math_expression','parser.py',183),
  ('dec_math_expression -> decimal_expression PLUS decimal_expression','dec_math_expression',3,'p_dec_math_expression','parser.py',190),
  ('dec_math_expression -> MINUS decimal_expression','dec_math_expression',2,'p_dec_math_expression','parser.py',191),
  ('bool_math_expression -> bool_expression PLUS bool_expression','bool_math_expression',3,'p_bool_math_expression','parser.py',198),
  ('bool_math_expression -> MINUS bool_expression','bool_math_expression',2,'p_bool_math_expression','parser.py',199),
  ('string_math_expression -> string_expression PLUS string_expression','string_math_expression',3,'p_string_math_expression','parser.py',206),
  ('string_math_expression -> MINUS string_expression','string_math_expression',2,'p_string_math_expression','parser.py',207),
  ('const -> bool_const','const',1,'p_const','parser.py',216),
  ('const -> decimal_const','const',1,'p_const','parser.py',217),
  ('const -> string_const','const',1,'p_const','parser.py',218),
  ('decimal_const -> DECIMAL','decimal_const',1,'p_decimal_const','parser.py',222),
  ('bool_const -> TRUE','bool_const',1,'p_bool_const','parser.py',226),
  ('bool_const -> FALSE','bool_const',1,'p_bool_const','parser.py',227),
  ('string_const -> LETTERS','string_const',1,'p_string_const','parser.py',235),
  ('assignment -> variant ASSIGNMENT expression','assignment',3,'p_assignment','parser.py',241),
  ('convert -> CONVERT type TO type variant','convert',5,'p_convert','parser.py',245),
  ('digitize -> DIGITIZE type variant','digitize',3,'p_digitize','parser.py',249),
  ('type -> BOOL','type',1,'p_type','parser.py',253),
  ('type -> DIGIT','type',1,'p_type','parser.py',254),
  ('type -> STRING','type',1,'p_type','parser.py',255),
  ('while -> WHILE bool_expression NEWLINE statements ENDW','while',5,'p_while','parser.py',259),
  ('until -> UNTIL bool_expression NEWLINE statements ENDU','until',5,'p_until','parser.py',263),
  ('if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF','if',7,'p_if','parser.py',267),
  ('if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements ENDIF','if',7,'p_if','parser.py',268),
  ('if -> IFZERO decimal_expression NEWLINE statements ENDIF','if',5,'p_if','parser.py',269),
  ('if -> IFNZERO decimal_expression NEWLINE statements ENDIF','if',5,'p_if','parser.py',270),
  ('if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF','if',7,'p_if','parser.py',271),
  ('if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements ENDIF','if',7,'p_if','parser.py',272),
  ('command -> COMMAND string_expression','command',2,'p_command','parser.py',283),
  ('func_body_statements -> func_body_statements func_body_statement','func_body_statements',2,'p_func_body_statements','parser.py',289),
  ('func_body_statements -> func_body_statement','func_body_statements',1,'p_func_body_statements','parser.py',290),
  ('func_body_statement -> empty NEWLINE','func_body_statement',2,'p_func_body_statement','parser.py',297),
  ('func_body_statement -> declaration NEWLINE','func_body_statement',2,'p_func_body_statement','parser.py',298),
  ('func_body_statement -> assignment NEWLINE','func_body_statement',2,'p_func_body_statement','parser.py',299),
  ('func_body_statement -> convert NEWLINE','func_body_statement',2,'p_func_body_statement','parser.py',300),
  ('func_body_statement -> digitize NEWLINE','func_body_statement',2,'p_func_body_statement','parser.py',301),
  ('func_body_statement -> while NEWLINE','func_body_statement',2,'p_func_body_statement','parser.py',302),
  ('func_body_statement -> until NEWLINE','func_body_statement',2,'p_func_body_statement','parser.py',303),
  ('func_body_statement -> if NEWLINE','func_body_statement',2,'p_func_body_statement','parser.py',304),
  ('func_body_statement -> command NEWLINE','func_body_statement',2,'p_func_body_statement','parser.py',305),
  ('func_body_statement -> function_call NEWLINE','func_body_statement',2,'p_func_body_statement','parser.py',306),
  ('func_body_statement -> return NEWLINE','func_body_statement',2,'p_func_body_statement','parser.py',307),
  ('function -> FUNC NAME NEWLINE func_body_statements ENDFUNC','function',5,'p_function','parser.py',312),
  ('function_call -> CALL NAME expression','function_call',3,'p_function_call','parser.py',317),
  ('function_call -> CALL NAME','function_call',2,'p_function_call','parser.py',318),
  ('return -> RETURN expression','return',2,'p_return','parser.py',325),
  ('declaration -> VARIANT error','declaration',2,'p_decl_error','parser.py',331),
  ('declaration -> VARIANT variant ASSIGNMENT error','declaration',4,'p_decl_error','parser.py',332),
  ('declaration -> declaration error','declaration',2,'p_decl_error','parser.py',333),
  ('varsize -> LSQBRACKET error RSQBRACKET','varsize',3,'p_varsize_error','parser.py',342),
  ('varsize -> LSQBRACKET error COMMA decimal_expression RSQBRACKET','varsize',5,'p_varsize_error','parser.py',343),
  ('varsize -> LSQBRACKET decimal_expression COMMA error RSQBRACKET','varsize',5,'p_varsize_error','parser.py',344),
  ('varsize -> LSQBRACKET error COMMA error RSQBRACKET','varsize',5,'p_varsize_error','parser.py',345),
  ('varsize -> varsize error','varsize',2,'p_varsize_error','parser.py',346),
  ('assignment -> variant ASSIGNMENT error','assignment',3,'p_assignment_error','parser.py',351),
  ('assignment -> error ASSIGNMENT expression','assignment',3,'p_assignment_error','parser.py',352),
  ('convert -> CONVERT type TO type error','convert',5,'p_convert_error','parser.py',357),
  ('convert -> CONVERT type TO error','convert',4,'p_convert_error','parser.py',358),
  ('convert -> CONVERT type error','convert',3,'p_convert_error','parser.py',359),
  ('convert -> CONVERT error','convert',2,'p_convert_error','parser.py',360),
  ('convert -> convert error','convert',2,'p_convert_error','parser.py',361),
  ('digitize -> DIGITIZE error','digitize',2,'p_digitize_error','parser.py',366),
  ('digitize -> digitize error','digitize',2,'p_digitize_error','parser.py',367),
  ('command -> COMMAND error','command',2,'p_command_error','parser.py',372),
  ('command -> command error','command',2,'p_command_error','parser.py',373),
  ('while -> WHILE error NEWLINE statements ENDW','while',5,'p_while_error','parser.py',384),
  ('while -> WHILE bool_expression NEWLINE statements error','while',5,'p_while_error','parser.py',385),
  ('while -> WHILE bool_expression statements ENDW','while',4,'p_while_error','parser.py',386),
  ('while -> while error','while',2,'p_while_error','parser.py',387),
  ('until -> UNTIL error NEWLINE statements ENDU','until',5,'p_until_error','parser.py',404),
  ('until -> UNTIL bool_expression NEWLINE statements error','until',5,'p_until_error','parser.py',405),
  ('until -> UNTIL bool_expression statements ENDU','until',4,'p_until_error','parser.py',406),
  ('until -> until error','until',2,'p_until_error','parser.py',407),
  ('if -> IFLESS error NEWLINE statements ENDIF','if',5,'p_if_error','parser.py',424),
  ('if -> IFNLESS error NEWLINE statements ENDIF','if',5,'p_if_error','parser.py',425),
  ('if -> IFZERO error NEWLINE statements ENDIF','if',5,'p_if_error','parser.py',426),
  ('if -> IFNZERO error NEWLINE statements ENDIF','if',5,'p_if_error','parser.py',427),
  ('if -> IFHIGH error NEWLINE statements ENDIF','if',5,'p_if_error','parser.py',428),
  ('if -> IFNHIGH error NEWLINE statements ENDIF','if',5,'p_if_error','parser.py',429),
  ('if -> IFLESS decimal_expression COMMA decimal_expression NEWLINE statements error','if',7,'p_if_error','parser.py',431),
  ('if -> IFNLESS decimal_expression COMMA decimal_expression NEWLINE statements error','if',7,'p_if_error','parser.py',432),
  ('if -> IFZERO decimal_expression NEWLINE statements error','if',5,'p_if_error','parser.py',433),
  ('if -> IFNZERO decimal_expression NEWLINE statements error','if',5,'p_if_error','parser.py',434),
  ('if -> IFHIGH decimal_expression COMMA decimal_expression NEWLINE statements error','if',7,'p_if_error','parser.py',435),
  ('if -> IFNHIGH decimal_expression COMMA decimal_expression NEWLINE statements error','if',7,'p_if_error','parser.py',436),
  ('if -> IFLESS decimal_expression COMMA decimal_expression statements ENDIF','if',6,'p_if_error','parser.py',438),
  ('if -> IFNLESS decimal_expression COMMA decimal_expression statements ENDIF','if',6,'p_if_error','parser.py',439),
  ('if -> IFZERO decimal_expression statements ENDIF','if',4,'p_if_error','parser.py',440),
  ('if -> IFNZERO decimal_expression statements ENDIF','if',4,'p_if_error','parser.py',441),
  ('if -> IFHIGH decimal_expression COMMA decimal_expression statements ENDIF','if',6,'p_if_error','parser.py',442),
  ('if -> IFNHIGH decimal_expression COMMA decimal_expression statements ENDIF','if',6,'p_if_error','parser.py',443),
  ('if -> if error','if',2,'p_if_error','parser.py',445),
  ('function -> FUNC error NEWLINE func_body_statements ENDFUNC','function',5,'p_function_error','parser.py',458),
  ('function -> FUNC NAME NEWLINE func_body_statements error','function',5,'p_function_error','parser.py',459),
  ('function -> FUNC error NEWLINE func_body_statements error','function',5,'p_function_error','parser.py',460),
  ('function -> function error','function',2,'p_function_error','parser.py',461),
  ('return -> RETURN error','return',2,'p_return_error','parser.py',471),
  ('return -> return error','return',2,'p_return_error','parser.py',472),
]
